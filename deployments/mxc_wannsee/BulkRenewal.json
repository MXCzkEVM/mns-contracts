{
  "address": "0xD879004149706a6156De08e9a571Bfa5Ac6eDa84",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENS",
          "name": "_ens",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ens",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "renewAll",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "rentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x7e7f39e5c443000772ba5d2a90f5cc3ec38c4c7b3f830d2549adbb220dc26f4b",
  "receipt": {
    "to": null,
    "from": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
    "contractAddress": "0xD879004149706a6156De08e9a571Bfa5Ac6eDa84",
    "transactionIndex": 1,
    "gasUsed": "444492",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xf60a1ddad74ab7ec50915e0745f6f5c87c9578a0f98fe01e24ea6ac3cc7de05a",
    "transactionHash": "0x7e7f39e5c443000772ba5d2a90f5cc3ec38c4c7b3f830d2549adbb220dc26f4b",
    "logs": [],
    "blockNumber": 153,
    "cumulativeGasUsed": "588613",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4E7984fF74569a270765EE67792386cBA77D1b01"
  ],
  "numDeployments": 1,
  "solcInputHash": "b0f86eb025a2bf184421368d827bdf79",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"_ens\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"renewAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"rentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/BulkRenewal.sol\":\"BulkRenewal\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/ethregistrar/BaseRegistrarImplementation.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"../registry/ENS.sol\\\";\\r\\nimport \\\"./IBaseRegistrar.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract BaseRegistrarImplementation is ERC721, IBaseRegistrar, Ownable {\\r\\n    // A map of expiry times\\r\\n    mapping(uint256 => uint256) expiries;\\r\\n    // The ENS registry\\r\\n    ENS public ens;\\r\\n    // The namehash of the TLD this registrar owns (eg, .mxc)\\r\\n    bytes32 public baseNode;\\r\\n    // A map of addresses that are authorised to register and renew names.\\r\\n    mapping(address => bool) public controllers;\\r\\n    uint256 public constant GRACE_PERIOD = 90 days;\\r\\n    bytes4 private constant INTERFACE_META_ID =\\r\\n        bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\r\\n    bytes4 private constant ERC721_ID =\\r\\n        bytes4(\\r\\n            keccak256(\\\"balanceOf(address)\\\") ^\\r\\n                keccak256(\\\"ownerOf(uint256)\\\") ^\\r\\n                keccak256(\\\"approve(address,uint256)\\\") ^\\r\\n                keccak256(\\\"getApproved(uint256)\\\") ^\\r\\n                keccak256(\\\"setApprovalForAll(address,bool)\\\") ^\\r\\n                keccak256(\\\"isApprovedForAll(address,address)\\\") ^\\r\\n                keccak256(\\\"transferFrom(address,address,uint256)\\\") ^\\r\\n                keccak256(\\\"safeTransferFrom(address,address,uint256)\\\") ^\\r\\n                keccak256(\\\"safeTransferFrom(address,address,uint256,bytes)\\\")\\r\\n        );\\r\\n    bytes4 private constant RECLAIM_ID =\\r\\n        bytes4(keccak256(\\\"reclaim(uint256,address)\\\"));\\r\\n\\r\\n    /**\\r\\n     * v2.1.3 version of _isApprovedOrOwner which calls ownerOf(tokenId) and takes grace period into consideration instead of ERC721.ownerOf(tokenId);\\r\\n     * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.1.3/contracts/token/ERC721/ERC721.sol#L187\\r\\n     * @dev Returns whether the given spender can transfer a given token ID\\r\\n     * @param spender address of the spender to query\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @return bool whether the msg.sender is approved for the given token ID,\\r\\n     *    is an operator of the owner, or is the owner of the token\\r\\n     */\\r\\n    function _isApprovedOrOwner(\\r\\n        address spender,\\r\\n        uint256 tokenId\\r\\n    ) internal view override returns (bool) {\\r\\n        address owner = ownerOf(tokenId);\\r\\n        return (spender == owner ||\\r\\n            getApproved(tokenId) == spender ||\\r\\n            isApprovedForAll(owner, spender));\\r\\n    }\\r\\n\\r\\n    constructor(ENS _ens, bytes32 _baseNode) ERC721(\\\"\\\", \\\"\\\") {\\r\\n        ens = _ens;\\r\\n        baseNode = _baseNode;\\r\\n    }\\r\\n\\r\\n    modifier live() {\\r\\n        require(ens.owner(baseNode) == address(this));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyController() {\\r\\n        require(controllers[msg.sender]);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the owner of the specified token ID. Names become unowned\\r\\n     *      when their registration expires.\\r\\n     * @param tokenId uint256 ID of the token to query the owner of\\r\\n     * @return address currently marked as the owner of the given token ID\\r\\n     */\\r\\n    function ownerOf(\\r\\n        uint256 tokenId\\r\\n    ) public view override(IERC721, ERC721) returns (address) {\\r\\n        require(expiries[tokenId] > block.timestamp);\\r\\n        return super.ownerOf(tokenId);\\r\\n    }\\r\\n\\r\\n    // Authorises a controller, who can register and renew domains.\\r\\n    function addController(address controller) external override onlyOwner {\\r\\n        controllers[controller] = true;\\r\\n        emit ControllerAdded(controller);\\r\\n    }\\r\\n\\r\\n    // Revoke controller permission for an address.\\r\\n    function removeController(address controller) external override onlyOwner {\\r\\n        controllers[controller] = false;\\r\\n        emit ControllerRemoved(controller);\\r\\n    }\\r\\n\\r\\n    // Set the resolver for the TLD this registrar manages.\\r\\n    function setResolver(address resolver) external override onlyOwner {\\r\\n        ens.setResolver(baseNode, resolver);\\r\\n    }\\r\\n\\r\\n    // Returns the expiration timestamp of the specified id.\\r\\n    function nameExpires(uint256 id) external view override returns (uint256) {\\r\\n        return expiries[id];\\r\\n    }\\r\\n\\r\\n    // Returns true iff the specified name is available for registration.\\r\\n    function available(uint256 id) public view override returns (bool) {\\r\\n        // Not available if it's registered here or in its grace period.\\r\\n        return expiries[id] + GRACE_PERIOD < block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Register a name.\\r\\n     * @param id The token ID (keccak256 of the label).\\r\\n     * @param owner The address that should own the registration.\\r\\n     * @param duration Duration in seconds for the registration.\\r\\n     */\\r\\n    function register(\\r\\n        uint256 id,\\r\\n        address owner,\\r\\n        uint256 duration\\r\\n    ) external override returns (uint256) {\\r\\n        return _register(id, owner, duration, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Register a name, without modifying the registry.\\r\\n     * @param id The token ID (keccak256 of the label).\\r\\n     * @param owner The address that should own the registration.\\r\\n     * @param duration Duration in seconds for the registration.\\r\\n     */\\r\\n    function registerOnly(\\r\\n        uint256 id,\\r\\n        address owner,\\r\\n        uint256 duration\\r\\n    ) external returns (uint256) {\\r\\n        return _register(id, owner, duration, false);\\r\\n    }\\r\\n\\r\\n    function _register(\\r\\n        uint256 id,\\r\\n        address owner,\\r\\n        uint256 duration,\\r\\n        bool updateRegistry\\r\\n    ) internal live onlyController returns (uint256) {\\r\\n        require(available(id));\\r\\n        require(\\r\\n            block.timestamp + duration + GRACE_PERIOD >\\r\\n                block.timestamp + GRACE_PERIOD\\r\\n        ); // Prevent future overflow\\r\\n\\r\\n        expiries[id] = block.timestamp + duration;\\r\\n        if (_exists(id)) {\\r\\n            // Name was previously owned, and expired\\r\\n            _burn(id);\\r\\n        }\\r\\n        _mint(owner, id);\\r\\n        if (updateRegistry) {\\r\\n            ens.setSubnodeOwner(baseNode, bytes32(id), owner);\\r\\n        }\\r\\n\\r\\n        emit NameRegistered(id, owner, block.timestamp + duration);\\r\\n\\r\\n        return block.timestamp + duration;\\r\\n    }\\r\\n\\r\\n    function renew(\\r\\n        uint256 id,\\r\\n        uint256 duration\\r\\n    ) external override live onlyController returns (uint256) {\\r\\n        require(expiries[id] + GRACE_PERIOD >= block.timestamp); // Name must be registered here or in grace period\\r\\n        require(\\r\\n            expiries[id] + duration + GRACE_PERIOD > duration + GRACE_PERIOD\\r\\n        ); // Prevent future overflow\\r\\n\\r\\n        expiries[id] += duration;\\r\\n        emit NameRenewed(id, expiries[id]);\\r\\n        return expiries[id];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\r\\n     */\\r\\n    function reclaim(uint256 id, address owner) external override live {\\r\\n        require(_isApprovedOrOwner(msg.sender, id));\\r\\n        ens.setSubnodeOwner(baseNode, bytes32(id), owner);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceID\\r\\n    ) public view override(ERC721, IERC165) returns (bool) {\\r\\n        return\\r\\n            interfaceID == INTERFACE_META_ID ||\\r\\n            interfaceID == ERC721_ID ||\\r\\n            interfaceID == RECLAIM_ID;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdc9689d2ac747c18e04c0d98a960ffeb03d8c718c001a23a7db10cec1ace499f\"},\"contracts/ethregistrar/BulkRenewal.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ~0.8.17;\\r\\n\\r\\nimport \\\"../registry/ENS.sol\\\";\\r\\nimport \\\"./ETHRegistrarController.sol\\\";\\r\\nimport \\\"./IETHRegistrarController.sol\\\";\\r\\nimport \\\"../resolvers/Resolver.sol\\\";\\r\\nimport \\\"./IBulkRenewal.sol\\\";\\r\\nimport \\\"./IPriceOracle.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\n\\r\\ncontract BulkRenewal is IBulkRenewal {\\r\\n    bytes32 private constant ETH_NAMEHASH =\\r\\n        0xc0ae3fe48f09fde4a60d1b2e3f2c5d1f8dd5922c3ab88ca76377c5fd10816e49;\\r\\n\\r\\n    ENS public immutable ens;\\r\\n\\r\\n    constructor(ENS _ens) {\\r\\n        ens = _ens;\\r\\n    }\\r\\n\\r\\n    function getController() internal view returns (ETHRegistrarController) {\\r\\n        Resolver r = Resolver(ens.resolver(ETH_NAMEHASH));\\r\\n        return\\r\\n            ETHRegistrarController(\\r\\n                r.interfaceImplementer(\\r\\n                    ETH_NAMEHASH,\\r\\n                    type(IETHRegistrarController).interfaceId\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function rentPrice(\\r\\n        string[] calldata names,\\r\\n        uint256 duration\\r\\n    ) external view override returns (uint256 total) {\\r\\n        ETHRegistrarController controller = getController();\\r\\n        uint256 length = names.length;\\r\\n        for (uint256 i = 0; i < length; ) {\\r\\n            IPriceOracle.Price memory price = controller.rentPrice(\\r\\n                names[i],\\r\\n                duration\\r\\n            );\\r\\n            unchecked {\\r\\n                ++i;\\r\\n                total += (price.base + price.premium);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function renewAll(\\r\\n        string[] calldata names,\\r\\n        uint256 duration\\r\\n    ) external payable override {\\r\\n        ETHRegistrarController controller = getController();\\r\\n        uint256 length = names.length;\\r\\n        uint256 total;\\r\\n        for (uint256 i = 0; i < length; ) {\\r\\n            IPriceOracle.Price memory price = controller.rentPrice(\\r\\n                names[i],\\r\\n                duration\\r\\n            );\\r\\n            uint256 totalPrice = price.base + price.premium;\\r\\n            controller.renew{value: totalPrice}(names[i], duration);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n                total += totalPrice;\\r\\n            }\\r\\n        }\\r\\n        // Send any excess funds back\\r\\n        payable(msg.sender).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceID\\r\\n    ) external pure returns (bool) {\\r\\n        return\\r\\n            interfaceID == type(IERC165).interfaceId ||\\r\\n            interfaceID == type(IBulkRenewal).interfaceId;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x915faf870e0d964b5e87c2d56b5e1b6849ee582f16477c2eaa410ed8710d45a9\",\"license\":\"MIT\"},\"contracts/ethregistrar/ETHRegistrarController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ~0.8.17;\\r\\n\\r\\nimport {BaseRegistrarImplementation} from \\\"./BaseRegistrarImplementation.sol\\\";\\r\\nimport {StringUtils} from \\\"./StringUtils.sol\\\";\\r\\nimport {Resolver} from \\\"../resolvers/Resolver.sol\\\";\\r\\nimport {ENS} from \\\"../registry/ENS.sol\\\";\\r\\nimport {ReverseRegistrar} from \\\"../reverseRegistrar/ReverseRegistrar.sol\\\";\\r\\nimport {ReverseClaimer} from \\\"../reverseRegistrar/ReverseClaimer.sol\\\";\\r\\nimport {IETHRegistrarController, IPriceOracle} from \\\"./IETHRegistrarController.sol\\\";\\r\\n\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport {INameWrapper} from \\\"../wrapper/INameWrapper.sol\\\";\\r\\nimport {ERC20Recoverable} from \\\"../utils/ERC20Recoverable.sol\\\";\\r\\n\\r\\nerror CommitmentTooNew(bytes32 commitment);\\r\\nerror CommitmentTooOld(bytes32 commitment);\\r\\nerror NameNotAvailable(string name);\\r\\nerror DurationTooShort(uint256 duration);\\r\\nerror ResolverRequiredWhenDataSupplied();\\r\\nerror UnexpiredCommitmentExists(bytes32 commitment);\\r\\nerror InsufficientValue();\\r\\nerror Unauthorised(bytes32 node);\\r\\nerror MaxCommitmentAgeTooLow();\\r\\nerror MaxCommitmentAgeTooHigh();\\r\\n\\r\\n/**\\r\\n * @dev A registrar controller for registering and renewing names at fixed cost.\\r\\n */\\r\\ncontract ETHRegistrarController is\\r\\n    Ownable,\\r\\n    IETHRegistrarController,\\r\\n    IERC165,\\r\\n    ERC20Recoverable,\\r\\n    ReverseClaimer\\r\\n{\\r\\n    using StringUtils for *;\\r\\n    using Address for address;\\r\\n\\r\\n    uint256 public constant MIN_REGISTRATION_DURATION = 28 days;\\r\\n    bytes32 private constant ETH_NODE =\\r\\n        0xc0ae3fe48f09fde4a60d1b2e3f2c5d1f8dd5922c3ab88ca76377c5fd10816e49;\\r\\n    uint64 private constant MAX_EXPIRY = type(uint64).max;\\r\\n    BaseRegistrarImplementation immutable base;\\r\\n    IPriceOracle public immutable prices;\\r\\n    uint256 public immutable minCommitmentAge;\\r\\n    uint256 public immutable maxCommitmentAge;\\r\\n    ReverseRegistrar public immutable reverseRegistrar;\\r\\n    INameWrapper public immutable nameWrapper;\\r\\n\\r\\n    mapping(bytes32 => uint256) public commitments;\\r\\n\\r\\n    event NameRegistered(\\r\\n        string name,\\r\\n        bytes32 indexed label,\\r\\n        address indexed owner,\\r\\n        uint256 baseCost,\\r\\n        uint256 premium,\\r\\n        uint256 expires\\r\\n    );\\r\\n    event NameRenewed(\\r\\n        string name,\\r\\n        bytes32 indexed label,\\r\\n        uint256 cost,\\r\\n        uint256 expires\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        BaseRegistrarImplementation _base,\\r\\n        IPriceOracle _prices,\\r\\n        uint256 _minCommitmentAge,\\r\\n        uint256 _maxCommitmentAge,\\r\\n        ReverseRegistrar _reverseRegistrar,\\r\\n        INameWrapper _nameWrapper,\\r\\n        ENS _ens\\r\\n    ) ReverseClaimer(_ens, msg.sender) {\\r\\n        if (_maxCommitmentAge <= _minCommitmentAge) {\\r\\n            revert MaxCommitmentAgeTooLow();\\r\\n        }\\r\\n\\r\\n        if (_maxCommitmentAge > block.timestamp) {\\r\\n            revert MaxCommitmentAgeTooHigh();\\r\\n        }\\r\\n\\r\\n        base = _base;\\r\\n        prices = _prices;\\r\\n        minCommitmentAge = _minCommitmentAge;\\r\\n        maxCommitmentAge = _maxCommitmentAge;\\r\\n        reverseRegistrar = _reverseRegistrar;\\r\\n        nameWrapper = _nameWrapper;\\r\\n    }\\r\\n\\r\\n    function rentPrice(\\r\\n        string memory name,\\r\\n        uint256 duration\\r\\n    ) public view override returns (IPriceOracle.Price memory price) {\\r\\n        bytes32 label = keccak256(bytes(name));\\r\\n        price = prices.price(name, base.nameExpires(uint256(label)), duration);\\r\\n    }\\r\\n\\r\\n    function valid(string memory name) public pure returns (bool) {\\r\\n        return name.strlen() >= 3;\\r\\n    }\\r\\n\\r\\n    function available(string memory name) public view override returns (bool) {\\r\\n        bytes32 label = keccak256(bytes(name));\\r\\n        return valid(name) && base.available(uint256(label));\\r\\n    }\\r\\n\\r\\n    function makeCommitment(\\r\\n        string memory name,\\r\\n        address owner,\\r\\n        uint256 duration,\\r\\n        bytes32 secret,\\r\\n        address resolver,\\r\\n        bytes[] calldata data,\\r\\n        bool reverseRecord,\\r\\n        uint16 ownerControlledFuses\\r\\n    ) public pure override returns (bytes32) {\\r\\n        bytes32 label = keccak256(bytes(name));\\r\\n        if (data.length > 0 && resolver == address(0)) {\\r\\n            revert ResolverRequiredWhenDataSupplied();\\r\\n        }\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    label,\\r\\n                    owner,\\r\\n                    duration,\\r\\n                    secret,\\r\\n                    resolver,\\r\\n                    data,\\r\\n                    reverseRecord,\\r\\n                    ownerControlledFuses\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function commit(bytes32 commitment) public override {\\r\\n        if (commitments[commitment] + maxCommitmentAge >= block.timestamp) {\\r\\n            revert UnexpiredCommitmentExists(commitment);\\r\\n        }\\r\\n        commitments[commitment] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function register(\\r\\n        string calldata name,\\r\\n        address owner,\\r\\n        uint256 duration,\\r\\n        bytes32 secret,\\r\\n        address resolver,\\r\\n        bytes[] calldata data,\\r\\n        bool reverseRecord,\\r\\n        uint16 ownerControlledFuses\\r\\n    ) public payable override {\\r\\n        IPriceOracle.Price memory price = rentPrice(name, duration);\\r\\n        if (msg.value < price.base + price.premium) {\\r\\n            revert InsufficientValue();\\r\\n        }\\r\\n\\r\\n        _consumeCommitment(\\r\\n            name,\\r\\n            duration,\\r\\n            makeCommitment(\\r\\n                name,\\r\\n                owner,\\r\\n                duration,\\r\\n                secret,\\r\\n                resolver,\\r\\n                data,\\r\\n                reverseRecord,\\r\\n                ownerControlledFuses\\r\\n            )\\r\\n        );\\r\\n\\r\\n        uint256 expires = nameWrapper.registerAndWrapETH2LD(\\r\\n            name,\\r\\n            owner,\\r\\n            duration,\\r\\n            resolver,\\r\\n            ownerControlledFuses\\r\\n        );\\r\\n\\r\\n        if (data.length > 0) {\\r\\n            _setRecords(resolver, keccak256(bytes(name)), data);\\r\\n        }\\r\\n\\r\\n        if (reverseRecord) {\\r\\n            _setReverseRecord(name, resolver, msg.sender);\\r\\n        }\\r\\n\\r\\n        emit NameRegistered(\\r\\n            name,\\r\\n            keccak256(bytes(name)),\\r\\n            owner,\\r\\n            price.base,\\r\\n            price.premium,\\r\\n            expires\\r\\n        );\\r\\n\\r\\n        if (msg.value > (price.base + price.premium)) {\\r\\n            payable(msg.sender).transfer(\\r\\n                msg.value - (price.base + price.premium)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function renew(\\r\\n        string calldata name,\\r\\n        uint256 duration\\r\\n    ) external payable override {\\r\\n        bytes32 labelhash = keccak256(bytes(name));\\r\\n        uint256 tokenId = uint256(labelhash);\\r\\n        IPriceOracle.Price memory price = rentPrice(name, duration);\\r\\n        if (msg.value < price.base) {\\r\\n            revert InsufficientValue();\\r\\n        }\\r\\n        uint256 expires = nameWrapper.renew(tokenId, duration);\\r\\n\\r\\n        if (msg.value > price.base) {\\r\\n            payable(msg.sender).transfer(msg.value - price.base);\\r\\n        }\\r\\n\\r\\n        emit NameRenewed(name, labelhash, msg.value, expires);\\r\\n    }\\r\\n\\r\\n    function withdraw() public {\\r\\n        payable(owner()).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceID\\r\\n    ) external pure returns (bool) {\\r\\n        return\\r\\n            interfaceID == type(IERC165).interfaceId ||\\r\\n            interfaceID == type(IETHRegistrarController).interfaceId;\\r\\n    }\\r\\n\\r\\n    /* Internal functions */\\r\\n\\r\\n    function _consumeCommitment(\\r\\n        string memory name,\\r\\n        uint256 duration,\\r\\n        bytes32 commitment\\r\\n    ) internal {\\r\\n        // Require an old enough commitment.\\r\\n        if (commitments[commitment] + minCommitmentAge > block.timestamp) {\\r\\n            revert CommitmentTooNew(commitment);\\r\\n        }\\r\\n\\r\\n        // If the commitment is too old, or the name is registered, stop\\r\\n        if (commitments[commitment] + maxCommitmentAge <= block.timestamp) {\\r\\n            revert CommitmentTooOld(commitment);\\r\\n        }\\r\\n        if (!available(name)) {\\r\\n            revert NameNotAvailable(name);\\r\\n        }\\r\\n\\r\\n        delete (commitments[commitment]);\\r\\n\\r\\n        if (duration < MIN_REGISTRATION_DURATION) {\\r\\n            revert DurationTooShort(duration);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setRecords(\\r\\n        address resolverAddress,\\r\\n        bytes32 label,\\r\\n        bytes[] calldata data\\r\\n    ) internal {\\r\\n        // use hardcoded 0xe761520f35bc505d5d33776c0d0a0c388647f53898a9d57228b275d12a23afa7 namehash\\r\\n        bytes32 nodehash = keccak256(abi.encodePacked(ETH_NODE, label));\\r\\n        Resolver resolver = Resolver(resolverAddress);\\r\\n        resolver.multicallWithNodeCheck(nodehash, data);\\r\\n    }\\r\\n\\r\\n    function _setReverseRecord(\\r\\n        string memory name,\\r\\n        address resolver,\\r\\n        address owner\\r\\n    ) internal {\\r\\n        reverseRegistrar.setNameForAddr(\\r\\n            msg.sender,\\r\\n            owner,\\r\\n            resolver,\\r\\n            string.concat(name, \\\".mxc\\\")\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x13d067dc4e501e6fad1b6982da60179edafd8fc87f0ebe89e2c7170ba9de0751\",\"license\":\"MIT\"},\"contracts/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\r\\nimport \\\"./IBaseRegistrar.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ninterface IBaseRegistrar is IERC721 {\\r\\n    event ControllerAdded(address indexed controller);\\r\\n    event ControllerRemoved(address indexed controller);\\r\\n    event NameMigrated(\\r\\n        uint256 indexed id,\\r\\n        address indexed owner,\\r\\n        uint256 expires\\r\\n    );\\r\\n    event NameRegistered(\\r\\n        uint256 indexed id,\\r\\n        address indexed owner,\\r\\n        uint256 expires\\r\\n    );\\r\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\r\\n\\r\\n    // Authorises a controller, who can register and renew domains.\\r\\n    function addController(address controller) external;\\r\\n\\r\\n    // Revoke controller permission for an address.\\r\\n    function removeController(address controller) external;\\r\\n\\r\\n    // Set the resolver for the TLD this registrar manages.\\r\\n    function setResolver(address resolver) external;\\r\\n\\r\\n    // Returns the expiration timestamp of the specified label hash.\\r\\n    function nameExpires(uint256 id) external view returns (uint256);\\r\\n\\r\\n    // Returns true if the specified name is available for registration.\\r\\n    function available(uint256 id) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Register a name.\\r\\n     */\\r\\n    function register(\\r\\n        uint256 id,\\r\\n        address owner,\\r\\n        uint256 duration\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\r\\n     */\\r\\n    function reclaim(uint256 id, address owner) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xaf6ba1e70a10caf590da42bdeac7a2b10463cc6928dc06dbea4881677b3f9610\"},\"contracts/ethregistrar/IBulkRenewal.sol\":{\"content\":\"interface IBulkRenewal {\\r\\n    function rentPrice(\\r\\n        string[] calldata names,\\r\\n        uint256 duration\\r\\n    ) external view returns (uint256 total);\\r\\n\\r\\n    function renewAll(\\r\\n        string[] calldata names,\\r\\n        uint256 duration\\r\\n    ) external payable;\\r\\n}\\r\\n\",\"keccak256\":\"0x0047ea297cde3757a1371eb0241f3925398da2c258dfb4999dd370ec17411b48\"},\"contracts/ethregistrar/IETHRegistrarController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ~0.8.17;\\r\\n\\r\\nimport \\\"./IPriceOracle.sol\\\";\\r\\n\\r\\ninterface IETHRegistrarController {\\r\\n    function rentPrice(\\r\\n        string memory,\\r\\n        uint256\\r\\n    ) external view returns (IPriceOracle.Price memory);\\r\\n\\r\\n    function available(string memory) external returns (bool);\\r\\n\\r\\n    function makeCommitment(\\r\\n        string memory,\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes32,\\r\\n        address,\\r\\n        bytes[] calldata,\\r\\n        bool,\\r\\n        uint16\\r\\n    ) external pure returns (bytes32);\\r\\n\\r\\n    function commit(bytes32) external;\\r\\n\\r\\n    function register(\\r\\n        string calldata,\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes32,\\r\\n        address,\\r\\n        bytes[] calldata,\\r\\n        bool,\\r\\n        uint16\\r\\n    ) external payable;\\r\\n\\r\\n    function renew(string calldata, uint256) external payable;\\r\\n}\\r\\n\",\"keccak256\":\"0x9fb85b4938449b90d3b7b03a64661287af5a5cb9acdcb3b257edb26a054dc519\",\"license\":\"MIT\"},\"contracts/ethregistrar/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.17 <0.9.0;\\r\\n\\r\\ninterface IPriceOracle {\\r\\n    struct Price {\\r\\n        uint256 base;\\r\\n        uint256 premium;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the price to register or renew a name.\\r\\n     * @param name The name being registered or renewed.\\r\\n     * @param expires When the name presently expires (0 if this is a new registration).\\r\\n     * @param duration How long the name is being registered or extended for, in seconds.\\r\\n     * @return base premium tuple of base price + premium price\\r\\n     */\\r\\n    function price(\\r\\n        string calldata name,\\r\\n        uint256 expires,\\r\\n        uint256 duration\\r\\n    ) external view returns (Price calldata);\\r\\n}\\r\\n\",\"keccak256\":\"0x2284fa2fee843161bb68ba58864a8ff2f4048f33651011ad32ee64d31c87a117\",\"license\":\"MIT\"},\"contracts/ethregistrar/StringUtils.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\nlibrary StringUtils {\\r\\n    /**\\r\\n     * @dev Returns the length of a given string\\r\\n     *\\r\\n     * @param s The string to measure the length of\\r\\n     * @return The length of the input string\\r\\n     */\\r\\n    function strlen(string memory s) internal pure returns (uint256) {\\r\\n        uint256 len;\\r\\n        uint256 i = 0;\\r\\n        uint256 bytelength = bytes(s).length;\\r\\n        for (len = 0; i < bytelength; len++) {\\r\\n            bytes1 b = bytes(s)[i];\\r\\n            if (b < 0x80) {\\r\\n                i += 1;\\r\\n            } else if (b < 0xE0) {\\r\\n                i += 2;\\r\\n            } else if (b < 0xF0) {\\r\\n                i += 3;\\r\\n            } else if (b < 0xF8) {\\r\\n                i += 4;\\r\\n            } else if (b < 0xFC) {\\r\\n                i += 5;\\r\\n            } else {\\r\\n                i += 6;\\r\\n            }\\r\\n        }\\r\\n        return len;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x424dbc316c1ad8b629d8a134c44e80d4dab63bcda2c07fe3772d9ede777fe65b\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\ninterface ENS {\\r\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\r\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\r\\n\\r\\n    // Logged when the owner of a node transfers ownership to a new account.\\r\\n    event Transfer(bytes32 indexed node, address owner);\\r\\n\\r\\n    // Logged when the resolver for a node changes.\\r\\n    event NewResolver(bytes32 indexed node, address resolver);\\r\\n\\r\\n    // Logged when the TTL of a node changes\\r\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\r\\n\\r\\n    // Logged when an operator is added or removed.\\r\\n    event ApprovalForAll(\\r\\n        address indexed owner,\\r\\n        address indexed operator,\\r\\n        bool approved\\r\\n    );\\r\\n\\r\\n    function setRecord(\\r\\n        bytes32 node,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) external;\\r\\n\\r\\n    function setSubnodeRecord(\\r\\n        bytes32 node,\\r\\n        bytes32 label,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) external;\\r\\n\\r\\n    function setSubnodeOwner(\\r\\n        bytes32 node,\\r\\n        bytes32 label,\\r\\n        address owner\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function setResolver(bytes32 node, address resolver) external;\\r\\n\\r\\n    function setOwner(bytes32 node, address owner) external;\\r\\n\\r\\n    function setTTL(bytes32 node, uint64 ttl) external;\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    function owner(bytes32 node) external view returns (address);\\r\\n\\r\\n    function resolver(bytes32 node) external view returns (address);\\r\\n\\r\\n    function ttl(bytes32 node) external view returns (uint64);\\r\\n\\r\\n    function recordExists(bytes32 node) external view returns (bool);\\r\\n\\r\\n    function isApprovedForAll(\\r\\n        address owner,\\r\\n        address operator\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xb1fece691daf62005e0103e7699d25a2a9e0853b1eb59fd0a43042db6d43b081\"},\"contracts/resolvers/Resolver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport \\\"./profiles/IABIResolver.sol\\\";\\r\\nimport \\\"./profiles/IAddressResolver.sol\\\";\\r\\nimport \\\"./profiles/IAddrResolver.sol\\\";\\r\\nimport \\\"./profiles/IContentHashResolver.sol\\\";\\r\\nimport \\\"./profiles/IDNSRecordResolver.sol\\\";\\r\\nimport \\\"./profiles/IDNSZoneResolver.sol\\\";\\r\\nimport \\\"./profiles/IInterfaceResolver.sol\\\";\\r\\nimport \\\"./profiles/INameResolver.sol\\\";\\r\\nimport \\\"./profiles/IPubkeyResolver.sol\\\";\\r\\nimport \\\"./profiles/ITextResolver.sol\\\";\\r\\nimport \\\"./profiles/IExtendedResolver.sol\\\";\\r\\n\\r\\n/**\\r\\n * A generic resolver interface which includes all the functions including the ones deprecated\\r\\n */\\r\\ninterface Resolver is\\r\\n    IERC165,\\r\\n    IABIResolver,\\r\\n    IAddressResolver,\\r\\n    IAddrResolver,\\r\\n    IContentHashResolver,\\r\\n    IDNSRecordResolver,\\r\\n    IDNSZoneResolver,\\r\\n    IInterfaceResolver,\\r\\n    INameResolver,\\r\\n    IPubkeyResolver,\\r\\n    ITextResolver,\\r\\n    IExtendedResolver\\r\\n{\\r\\n    /* Deprecated events */\\r\\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\\r\\n\\r\\n    function setApprovalForAll(address, bool) external;\\r\\n\\r\\n    function approve(bytes32 node, address delegate, bool approved) external;\\r\\n\\r\\n    function isApprovedForAll(address account, address operator) external;\\r\\n\\r\\n    function isApprovedFor(\\r\\n        address owner,\\r\\n        bytes32 node,\\r\\n        address delegate\\r\\n    ) external;\\r\\n\\r\\n    function setABI(\\r\\n        bytes32 node,\\r\\n        uint256 contentType,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function setAddr(bytes32 node, address addr) external;\\r\\n\\r\\n    function setAddr(bytes32 node, uint256 coinType, bytes calldata a) external;\\r\\n\\r\\n    function setContenthash(bytes32 node, bytes calldata hash) external;\\r\\n\\r\\n    function setDnsrr(bytes32 node, bytes calldata data) external;\\r\\n\\r\\n    function setName(bytes32 node, string calldata _name) external;\\r\\n\\r\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\\r\\n\\r\\n    function setText(\\r\\n        bytes32 node,\\r\\n        string calldata key,\\r\\n        string calldata value\\r\\n    ) external;\\r\\n\\r\\n    function setInterface(\\r\\n        bytes32 node,\\r\\n        bytes4 interfaceID,\\r\\n        address implementer\\r\\n    ) external;\\r\\n\\r\\n    function multicall(\\r\\n        bytes[] calldata data\\r\\n    ) external returns (bytes[] memory results);\\r\\n\\r\\n    function multicallWithNodeCheck(\\r\\n        bytes32 nodehash,\\r\\n        bytes[] calldata data\\r\\n    ) external returns (bytes[] memory results);\\r\\n\\r\\n    /* Deprecated functions */\\r\\n    function content(bytes32 node) external view returns (bytes32);\\r\\n\\r\\n    function multihash(bytes32 node) external view returns (bytes memory);\\r\\n\\r\\n    function setContent(bytes32 node, bytes32 hash) external;\\r\\n\\r\\n    function setMultihash(bytes32 node, bytes calldata hash) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xa637f8a51efd63aace5b3798c99d65a4ff6438f6d0723a95efbb3a9cca03c9c7\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface IABIResolver {\\r\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\r\\n\\r\\n    /**\\r\\n     * Returns the ABI associated with an ENS node.\\r\\n     * Defined in EIP205.\\r\\n     * @param node The ENS node to query\\r\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\r\\n     * @return contentType The content type of the return value\\r\\n     * @return data The ABI data\\r\\n     */\\r\\n    function ABI(\\r\\n        bytes32 node,\\r\\n        uint256 contentTypes\\r\\n    ) external view returns (uint256, bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xae06aa52e52dd52ba12242c331662eaf85a25f39406242bab046578a08a10d64\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\n/**\\r\\n * Interface for the legacy (ETH-only) addr function.\\r\\n */\\r\\ninterface IAddrResolver {\\r\\n    event AddrChanged(bytes32 indexed node, address a);\\r\\n\\r\\n    /**\\r\\n     * Returns the address associated with an ENS node.\\r\\n     * @param node The ENS node to query.\\r\\n     * @return The associated address.\\r\\n     */\\r\\n    function addr(bytes32 node) external view returns (address payable);\\r\\n}\\r\\n\",\"keccak256\":\"0xc28e76da1c1d807c571ad75c169fa8496a8c63f21a4955171cf36b709924de20\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\n/**\\r\\n * Interface for the new (multicoin) addr function.\\r\\n */\\r\\ninterface IAddressResolver {\\r\\n    event AddressChanged(\\r\\n        bytes32 indexed node,\\r\\n        uint256 coinType,\\r\\n        bytes newAddress\\r\\n    );\\r\\n\\r\\n    function addr(\\r\\n        bytes32 node,\\r\\n        uint256 coinType\\r\\n    ) external view returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x5040e2be35e303880581d50dbda555dd0e5f9e11f0e818e453c3bfd8b3800b95\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface IContentHashResolver {\\r\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\r\\n\\r\\n    /**\\r\\n     * Returns the contenthash associated with an ENS node.\\r\\n     * @param node The ENS node to query.\\r\\n     * @return The associated contenthash.\\r\\n     */\\r\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x6e849ab5f033476fe52662ac7540630f42fdb79f772adf279a2a377f8f7d07d3\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IDNSRecordResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface IDNSRecordResolver {\\r\\n    // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\r\\n    event DNSRecordChanged(\\r\\n        bytes32 indexed node,\\r\\n        bytes name,\\r\\n        uint16 resource,\\r\\n        bytes record\\r\\n    );\\r\\n    // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\r\\n    event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\r\\n\\r\\n    /**\\r\\n     * Obtain a DNS record.\\r\\n     * @param node the namehash of the node for which to fetch the record\\r\\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\r\\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\r\\n     * @return the DNS record in wire format if present, otherwise empty\\r\\n     */\\r\\n    function dnsRecord(\\r\\n        bytes32 node,\\r\\n        bytes32 name,\\r\\n        uint16 resource\\r\\n    ) external view returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xd08097a7b1fb907dd8a031fffbb964ee392639d40f00a83a499f16b8ef03fe11\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IDNSZoneResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface IDNSZoneResolver {\\r\\n    // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\\r\\n    event DNSZonehashChanged(\\r\\n        bytes32 indexed node,\\r\\n        bytes lastzonehash,\\r\\n        bytes zonehash\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * zonehash obtains the hash for the zone.\\r\\n     * @param node The ENS node to query.\\r\\n     * @return The associated contenthash.\\r\\n     */\\r\\n    function zonehash(bytes32 node) external view returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xb7f766cf8c0c6c0589c0a2ecb6e15fb7d67cff9c0277be93f20440fd318a5cf9\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IExtendedResolver {\\r\\n    function resolve(\\r\\n        bytes memory name,\\r\\n        bytes memory data\\r\\n    ) external view returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x0e783e816c0c96e1a51cce9be020ab8c07d5aef2840b3a583c75e75f609544ce\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IInterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface IInterfaceResolver {\\r\\n    event InterfaceChanged(\\r\\n        bytes32 indexed node,\\r\\n        bytes4 indexed interfaceID,\\r\\n        address implementer\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * Returns the address of a contract that implements the specified interface for this name.\\r\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\r\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\r\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\r\\n     * will be returned.\\r\\n     * @param node The ENS node to query.\\r\\n     * @param interfaceID The EIP 165 interface ID to check for.\\r\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\r\\n     */\\r\\n    function interfaceImplementer(\\r\\n        bytes32 node,\\r\\n        bytes4 interfaceID\\r\\n    ) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xeb9380e62d4a71e2d1c1d210796641bc5a5e85d076883c69a01cc2b35dd8f2a4\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface INameResolver {\\r\\n    event NameChanged(bytes32 indexed node, string name);\\r\\n\\r\\n    /**\\r\\n     * Returns the name associated with an ENS node, for reverse records.\\r\\n     * Defined in EIP181.\\r\\n     * @param node The ENS node to query.\\r\\n     * @return The associated name.\\r\\n     */\\r\\n    function name(bytes32 node) external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x23978bee98a262ac81b48b9e609ba3c2f58dad1e2ce90e064e3db36e98db4f2f\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IPubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface IPubkeyResolver {\\r\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\r\\n\\r\\n    /**\\r\\n     * Returns the SECP256k1 public key associated with an ENS node.\\r\\n     * Defined in EIP 619.\\r\\n     * @param node The ENS node to query\\r\\n     * @return x The X coordinate of the curve point for the public key.\\r\\n     * @return y The Y coordinate of the curve point for the public key.\\r\\n     */\\r\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\r\\n}\\r\\n\",\"keccak256\":\"0x660a4697f9bf2271cc93e986ab0bb1584d96a6c6441f4c017c9a23f205e74153\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface ITextResolver {\\r\\n    event TextChanged(\\r\\n        bytes32 indexed node,\\r\\n        string indexed indexedKey,\\r\\n        string key,\\r\\n        string value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * Returns the text data associated with an ENS node and key.\\r\\n     * @param node The ENS node to query.\\r\\n     * @param key The text data key to query.\\r\\n     * @return The associated text data.\\r\\n     */\\r\\n    function text(\\r\\n        bytes32 node,\\r\\n        string calldata key\\r\\n    ) external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x9ff1a5c32e2d5a4680027ab172651da5f9ff68129abeec02650bcc8b471b9659\",\"license\":\"MIT\"},\"contracts/reverseRegistrar/IReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\ninterface IReverseRegistrar {\\r\\n    function setDefaultResolver(address resolver) external;\\r\\n\\r\\n    function claim(address owner) external returns (bytes32);\\r\\n\\r\\n    function claimForAddr(\\r\\n        address addr,\\r\\n        address owner,\\r\\n        address resolver\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function claimWithResolver(\\r\\n        address owner,\\r\\n        address resolver\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function setName(string memory name) external returns (bytes32);\\r\\n\\r\\n    function setNameForAddr(\\r\\n        address addr,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        string memory name\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function node(address addr) external pure returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x6acf52dff6d755236ebbab385c6d87fa305d6682f16c6f016737123fbcb36fee\"},\"contracts/reverseRegistrar/ReverseClaimer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.17 <0.9.0;\\r\\n\\r\\nimport {ENS} from \\\"../registry/ENS.sol\\\";\\r\\nimport {IReverseRegistrar} from \\\"../reverseRegistrar/IReverseRegistrar.sol\\\";\\r\\n\\r\\ncontract ReverseClaimer {\\r\\n    bytes32 constant ADDR_REVERSE_NODE =\\r\\n        0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\r\\n\\r\\n    constructor(ENS ens, address claimant) {\\r\\n        IReverseRegistrar reverseRegistrar = IReverseRegistrar(\\r\\n            ens.owner(ADDR_REVERSE_NODE)\\r\\n        );\\r\\n        reverseRegistrar.claim(claimant);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x97b68693fb055f0b33a5667c1f58e30afdb81174f26eab4f7ee7f02d8e65a899\",\"license\":\"MIT\"},\"contracts/reverseRegistrar/ReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"../registry/ENS.sol\\\";\\r\\nimport \\\"./IReverseRegistrar.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../root/Controllable.sol\\\";\\r\\n\\r\\nabstract contract NameResolver {\\r\\n    function setName(bytes32 node, string memory name) public virtual;\\r\\n}\\r\\n\\r\\nbytes32 constant lookup = 0x3031323334353637383961626364656600000000000000000000000000000000;\\r\\n\\r\\nbytes32 constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\r\\n\\r\\n// namehash('addr.reverse')\\r\\n\\r\\ncontract ReverseRegistrar is Ownable, Controllable, IReverseRegistrar {\\r\\n    ENS public immutable ens;\\r\\n    NameResolver public defaultResolver;\\r\\n\\r\\n    event ReverseClaimed(address indexed addr, bytes32 indexed node);\\r\\n    event DefaultResolverChanged(NameResolver indexed resolver);\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor\\r\\n     * @param ensAddr The address of the ENS registry.\\r\\n     */\\r\\n    constructor(ENS ensAddr) {\\r\\n        ens = ensAddr;\\r\\n\\r\\n        // Assign ownership of the reverse record to our deployer\\r\\n        ReverseRegistrar oldRegistrar = ReverseRegistrar(\\r\\n            ensAddr.owner(ADDR_REVERSE_NODE)\\r\\n        );\\r\\n        if (address(oldRegistrar) != address(0x0)) {\\r\\n            oldRegistrar.claim(msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    modifier authorised(address addr) {\\r\\n        require(\\r\\n            addr == msg.sender ||\\r\\n                controllers[msg.sender] ||\\r\\n                ens.isApprovedForAll(addr, msg.sender) ||\\r\\n                ownsContract(addr),\\r\\n            \\\"ReverseRegistrar: Caller is not a controller or authorised by address or the address itself\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setDefaultResolver(address resolver) public override onlyOwner {\\r\\n        require(\\r\\n            address(resolver) != address(0),\\r\\n            \\\"ReverseRegistrar: Resolver address must not be 0\\\"\\r\\n        );\\r\\n        defaultResolver = NameResolver(resolver);\\r\\n        emit DefaultResolverChanged(NameResolver(resolver));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\r\\n     *      calling account.\\r\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\r\\n     * @return The ENS node hash of the reverse record.\\r\\n     */\\r\\n    function claim(address owner) public override returns (bytes32) {\\r\\n        return claimForAddr(msg.sender, owner, address(defaultResolver));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\r\\n     *      calling account.\\r\\n     * @param addr The reverse record to set\\r\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\r\\n     * @param resolver The resolver of the reverse node\\r\\n     * @return The ENS node hash of the reverse record.\\r\\n     */\\r\\n    function claimForAddr(\\r\\n        address addr,\\r\\n        address owner,\\r\\n        address resolver\\r\\n    ) public override authorised(addr) returns (bytes32) {\\r\\n        bytes32 labelHash = sha3HexAddress(addr);\\r\\n        bytes32 reverseNode = keccak256(\\r\\n            abi.encodePacked(ADDR_REVERSE_NODE, labelHash)\\r\\n        );\\r\\n        emit ReverseClaimed(addr, reverseNode);\\r\\n        ens.setSubnodeRecord(ADDR_REVERSE_NODE, labelHash, owner, resolver, 0);\\r\\n        return reverseNode;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\r\\n     *      calling account.\\r\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\r\\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\\r\\n     * @return The ENS node hash of the reverse record.\\r\\n     */\\r\\n    function claimWithResolver(\\r\\n        address owner,\\r\\n        address resolver\\r\\n    ) public override returns (bytes32) {\\r\\n        return claimForAddr(msg.sender, owner, resolver);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\r\\n     * the calling account. First updates the resolver to the default reverse\\r\\n     * resolver if necessary.\\r\\n     * @param name The name to set for this address.\\r\\n     * @return The ENS node hash of the reverse record.\\r\\n     */\\r\\n    function setName(string memory name) public override returns (bytes32) {\\r\\n        return\\r\\n            setNameForAddr(\\r\\n                msg.sender,\\r\\n                msg.sender,\\r\\n                address(defaultResolver),\\r\\n                name\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\r\\n     * the account provided. Updates the resolver to a designated resolver\\r\\n     * Only callable by controllers and authorised users\\r\\n     * @param addr The reverse record to set\\r\\n     * @param owner The owner of the reverse node\\r\\n     * @param resolver The resolver of the reverse node\\r\\n     * @param name The name to set for this address.\\r\\n     * @return The ENS node hash of the reverse record.\\r\\n     */\\r\\n    function setNameForAddr(\\r\\n        address addr,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        string memory name\\r\\n    ) public override returns (bytes32) {\\r\\n        bytes32 node = claimForAddr(addr, owner, resolver);\\r\\n        NameResolver(resolver).setName(node, name);\\r\\n        return node;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the node hash for a given account's reverse records.\\r\\n     * @param addr The address to hash\\r\\n     * @return The ENS node hash.\\r\\n     */\\r\\n    function node(address addr) public pure override returns (bytes32) {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr))\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev An optimised function to compute the sha3 of the lower-case\\r\\n     *      hexadecimal representation of an Ethereum address.\\r\\n     * @param addr The address to hash\\r\\n     * @return ret The SHA3 hash of the lower-case hexadecimal encoding of the\\r\\n     *         input address.\\r\\n     */\\r\\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\\r\\n        assembly {\\r\\n            for {\\r\\n                let i := 40\\r\\n            } gt(i, 0) {\\r\\n\\r\\n            } {\\r\\n                i := sub(i, 1)\\r\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\r\\n                addr := div(addr, 0x10)\\r\\n                i := sub(i, 1)\\r\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\r\\n                addr := div(addr, 0x10)\\r\\n            }\\r\\n\\r\\n            ret := keccak256(0, 40)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function ownsContract(address addr) internal view returns (bool) {\\r\\n        try Ownable(addr).owner() returns (address owner) {\\r\\n            return owner == msg.sender;\\r\\n        } catch {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x79496bde42df65310790ed9309789eeebca3276dd6f862d0eaf5152cec8a66ca\"},\"contracts/root/Controllable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Controllable is Ownable {\\r\\n    mapping(address => bool) public controllers;\\r\\n\\r\\n    event ControllerChanged(address indexed controller, bool enabled);\\r\\n\\r\\n    modifier onlyController() {\\r\\n        require(\\r\\n            controllers[msg.sender],\\r\\n            \\\"Controllable: Caller is not a controller\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setController(address controller, bool enabled) public onlyOwner {\\r\\n        controllers[controller] = enabled;\\r\\n        emit ControllerChanged(controller, enabled);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3447a0afba4673bd715f1f459c71831cc87e085507fb455cea97883453e63374\"},\"contracts/utils/ERC20Recoverable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.17 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n    @notice Contract is used to recover ERC20 tokens sent to the contract by mistake.\\r\\n */\\r\\n\\r\\ncontract ERC20Recoverable is Ownable {\\r\\n    /**\\r\\n    @notice Recover ERC20 tokens sent to the contract by mistake.\\r\\n    @dev The contract is Ownable and only the owner can call the recover function.\\r\\n    @param _to The address to send the tokens to.\\r\\n@param _token The address of the ERC20 token to recover\\r\\n    @param _amount The amount of tokens to recover.\\r\\n */\\r\\n    function recoverFunds(\\r\\n        address _token,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(_token).transfer(_to, _amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x76cdae07a72756b10449198942a674ae0d17ad864a94101ac4d486b135f4e8aa\",\"license\":\"MIT\"},\"contracts/wrapper/IMetadataService.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ~0.8.17;\\r\\n\\r\\ninterface IMetadataService {\\r\\n    function uri(uint256) external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x0e3865c7cc5844146972a662d5fcbd81b418be9cb95a731132681b5f4c5ac8f2\",\"license\":\"MIT\"},\"contracts/wrapper/INameWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ~0.8.17;\\r\\n\\r\\nimport \\\"../registry/ENS.sol\\\";\\r\\nimport \\\"../ethregistrar/IBaseRegistrar.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"./IMetadataService.sol\\\";\\r\\nimport \\\"./INameWrapperUpgrade.sol\\\";\\r\\n\\r\\nuint32 constant CANNOT_UNWRAP = 1;\\r\\nuint32 constant CANNOT_BURN_FUSES = 2;\\r\\nuint32 constant CANNOT_TRANSFER = 4;\\r\\nuint32 constant CANNOT_SET_RESOLVER = 8;\\r\\nuint32 constant CANNOT_SET_TTL = 16;\\r\\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\\r\\nuint32 constant CANNOT_APPROVE = 64;\\r\\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\\r\\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\\r\\nuint32 constant IS_DOT_ETH = 1 << 17;\\r\\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\\r\\nuint32 constant CAN_DO_EVERYTHING = 0;\\r\\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\\r\\n// all fuses apart from IS_DOT_ETH\\r\\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\\r\\n\\r\\ninterface INameWrapper is IERC1155 {\\r\\n    event NameWrapped(\\r\\n        bytes32 indexed node,\\r\\n        bytes name,\\r\\n        address owner,\\r\\n        uint32 fuses,\\r\\n        uint64 expiry\\r\\n    );\\r\\n\\r\\n    event NameUnwrapped(bytes32 indexed node, address owner);\\r\\n\\r\\n    event FusesSet(bytes32 indexed node, uint32 fuses);\\r\\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\\r\\n\\r\\n    function ens() external view returns (ENS);\\r\\n\\r\\n    function registrar() external view returns (IBaseRegistrar);\\r\\n\\r\\n    function metadataService() external view returns (IMetadataService);\\r\\n\\r\\n    function names(bytes32) external view returns (bytes memory);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function upgradeContract() external view returns (INameWrapperUpgrade);\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\r\\n\\r\\n    function wrap(\\r\\n        bytes calldata name,\\r\\n        address wrappedOwner,\\r\\n        address resolver\\r\\n    ) external;\\r\\n\\r\\n    function wrapETH2LD(\\r\\n        string calldata label,\\r\\n        address wrappedOwner,\\r\\n        uint16 ownerControlledFuses,\\r\\n        address resolver\\r\\n    ) external returns (uint64 expires);\\r\\n\\r\\n    function registerAndWrapETH2LD(\\r\\n        string calldata label,\\r\\n        address wrappedOwner,\\r\\n        uint256 duration,\\r\\n        address resolver,\\r\\n        uint16 ownerControlledFuses\\r\\n    ) external returns (uint256 registrarExpiry);\\r\\n\\r\\n    function renew(\\r\\n        uint256 labelHash,\\r\\n        uint256 duration\\r\\n    ) external returns (uint256 expires);\\r\\n\\r\\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\\r\\n\\r\\n    function unwrapETH2LD(\\r\\n        bytes32 label,\\r\\n        address newRegistrant,\\r\\n        address newController\\r\\n    ) external;\\r\\n\\r\\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\\r\\n\\r\\n    function setFuses(\\r\\n        bytes32 node,\\r\\n        uint16 ownerControlledFuses\\r\\n    ) external returns (uint32 newFuses);\\r\\n\\r\\n    function setChildFuses(\\r\\n        bytes32 parentNode,\\r\\n        bytes32 labelhash,\\r\\n        uint32 fuses,\\r\\n        uint64 expiry\\r\\n    ) external;\\r\\n\\r\\n    function setSubnodeRecord(\\r\\n        bytes32 node,\\r\\n        string calldata label,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl,\\r\\n        uint32 fuses,\\r\\n        uint64 expiry\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function setRecord(\\r\\n        bytes32 node,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) external;\\r\\n\\r\\n    function setSubnodeOwner(\\r\\n        bytes32 node,\\r\\n        string calldata label,\\r\\n        address newOwner,\\r\\n        uint32 fuses,\\r\\n        uint64 expiry\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function extendExpiry(\\r\\n        bytes32 node,\\r\\n        bytes32 labelhash,\\r\\n        uint64 expiry\\r\\n    ) external returns (uint64);\\r\\n\\r\\n    function canModifyName(\\r\\n        bytes32 node,\\r\\n        address addr\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function setResolver(bytes32 node, address resolver) external;\\r\\n\\r\\n    function setTTL(bytes32 node, uint64 ttl) external;\\r\\n\\r\\n    function ownerOf(uint256 id) external view returns (address owner);\\r\\n\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    function getApproved(uint256 tokenId) external view returns (address);\\r\\n\\r\\n    function getData(\\r\\n        uint256 id\\r\\n    ) external view returns (address, uint32, uint64);\\r\\n\\r\\n    function setMetadataService(IMetadataService _metadataService) external;\\r\\n\\r\\n    function uri(uint256 tokenId) external view returns (string memory);\\r\\n\\r\\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\\r\\n\\r\\n    function allFusesBurned(\\r\\n        bytes32 node,\\r\\n        uint32 fuseMask\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function isWrapped(bytes32) external view returns (bool);\\r\\n\\r\\n    function isWrapped(bytes32, bytes32) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xda719a7d21e720db7530541cc740b3e637047d79f22806f02af633406efbac90\",\"license\":\"MIT\"},\"contracts/wrapper/INameWrapperUpgrade.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ~0.8.17;\\r\\n\\r\\ninterface INameWrapperUpgrade {\\r\\n    function wrapFromUpgrade(\\r\\n        bytes calldata name,\\r\\n        address wrappedOwner,\\r\\n        uint32 fuses,\\r\\n        uint64 expiry,\\r\\n        address approved,\\r\\n        bytes calldata extraData\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xff7834752740bd7dde3939a257f83ed45c2d323d8ca0fae007ad086e98d1afad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161079e38038061079e83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161070d6100916000396000818160b901526103d6015261070d6000f3fe60806040526004361061003f5760003560e01c806301ffc9a7146100445780633971d467146100795780633f15457f146100a7578063e8d6dbb4146100f3575b600080fd5b34801561005057600080fd5b5061006461005f3660046104e7565b610108565b60405190151581526020015b60405180910390f35b34801561008557600080fd5b50610099610094366004610518565b61013f565b604051908152602001610070565b3480156100b357600080fd5b506100db7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610070565b610106610101366004610518565b61020c565b005b60006001600160e01b031982166301ffc9a760e01b148061013957506001600160e01b0319821663d1a70fd360e01b145b92915050565b60008061014a61039c565b90508360005b81811015610202576000836001600160a01b03166383e7f6ff89898581811061017b5761017b610593565b905060200281019061018d91906105a9565b896040518463ffffffff1660e01b81526004016101ac939291906105f7565b6040805180830381865afa1580156101c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ec9190610630565b6020810151905101949094019350600101610150565b5050509392505050565b600061021661039c565b9050826000805b82811015610366576000846001600160a01b03166383e7f6ff89898581811061024857610248610593565b905060200281019061025a91906105a9565b896040518463ffffffff1660e01b8152600401610279939291906105f7565b6040805180830381865afa158015610295573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b99190610630565b90506000816020015182600001516102d1919061068d565b9050856001600160a01b031663acf1a841828b8b878181106102f5576102f5610593565b905060200281019061030791906105a9565b8b6040518563ffffffff1660e01b8152600401610326939291906105f7565b6000604051808303818588803b15801561033f57600080fd5b505af1158015610353573d6000803e3d6000fd5b505050919094019350505060010161021d565b5060405133904780156108fc02916000818181858888f19350505050158015610393573d6000803e3d6000fd5b50505050505050565b604051630178b8bf60e01b81527fc0ae3fe48f09fde4a60d1b2e3f2c5d1f8dd5922c3ab88ca76377c5fd10816e49600482015260009081907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630178b8bf90602401602060405180830381865afa158015610425573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044991906106ae565b6040516304928c6760e21b81527fc0ae3fe48f09fde4a60d1b2e3f2c5d1f8dd5922c3ab88ca76377c5fd10816e49600482015263612e8c0960e01b60248201529091506001600160a01b0382169063124a319c90604401602060405180830381865afa1580156104bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e191906106ae565b91505090565b6000602082840312156104f957600080fd5b81356001600160e01b03198116811461051157600080fd5b9392505050565b60008060006040848603121561052d57600080fd5b833567ffffffffffffffff8082111561054557600080fd5b818601915086601f83011261055957600080fd5b81358181111561056857600080fd5b8760208260051b850101111561057d57600080fd5b6020928301989097509590910135949350505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126105c057600080fd5b83018035915067ffffffffffffffff8211156105db57600080fd5b6020019150368190038213156105f057600080fd5b9250929050565b604081528260408201528284606083013760006060848301015260006060601f19601f8601168301019050826020830152949350505050565b60006040828403121561064257600080fd5b6040516040810181811067ffffffffffffffff8211171561067357634e487b7160e01b600052604160045260246000fd5b604052825181526020928301519281019290925250919050565b8082018082111561013957634e487b7160e01b600052601160045260246000fd5b6000602082840312156106c057600080fd5b81516001600160a01b038116811461051157600080fdfea2646970667358221220ba7819d1cc56a48bafff83859079ab427832b6286d661ed234602a3046e36b3164736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c806301ffc9a7146100445780633971d467146100795780633f15457f146100a7578063e8d6dbb4146100f3575b600080fd5b34801561005057600080fd5b5061006461005f3660046104e7565b610108565b60405190151581526020015b60405180910390f35b34801561008557600080fd5b50610099610094366004610518565b61013f565b604051908152602001610070565b3480156100b357600080fd5b506100db7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610070565b610106610101366004610518565b61020c565b005b60006001600160e01b031982166301ffc9a760e01b148061013957506001600160e01b0319821663d1a70fd360e01b145b92915050565b60008061014a61039c565b90508360005b81811015610202576000836001600160a01b03166383e7f6ff89898581811061017b5761017b610593565b905060200281019061018d91906105a9565b896040518463ffffffff1660e01b81526004016101ac939291906105f7565b6040805180830381865afa1580156101c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ec9190610630565b6020810151905101949094019350600101610150565b5050509392505050565b600061021661039c565b9050826000805b82811015610366576000846001600160a01b03166383e7f6ff89898581811061024857610248610593565b905060200281019061025a91906105a9565b896040518463ffffffff1660e01b8152600401610279939291906105f7565b6040805180830381865afa158015610295573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b99190610630565b90506000816020015182600001516102d1919061068d565b9050856001600160a01b031663acf1a841828b8b878181106102f5576102f5610593565b905060200281019061030791906105a9565b8b6040518563ffffffff1660e01b8152600401610326939291906105f7565b6000604051808303818588803b15801561033f57600080fd5b505af1158015610353573d6000803e3d6000fd5b505050919094019350505060010161021d565b5060405133904780156108fc02916000818181858888f19350505050158015610393573d6000803e3d6000fd5b50505050505050565b604051630178b8bf60e01b81527fc0ae3fe48f09fde4a60d1b2e3f2c5d1f8dd5922c3ab88ca76377c5fd10816e49600482015260009081907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630178b8bf90602401602060405180830381865afa158015610425573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044991906106ae565b6040516304928c6760e21b81527fc0ae3fe48f09fde4a60d1b2e3f2c5d1f8dd5922c3ab88ca76377c5fd10816e49600482015263612e8c0960e01b60248201529091506001600160a01b0382169063124a319c90604401602060405180830381865afa1580156104bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e191906106ae565b91505090565b6000602082840312156104f957600080fd5b81356001600160e01b03198116811461051157600080fd5b9392505050565b60008060006040848603121561052d57600080fd5b833567ffffffffffffffff8082111561054557600080fd5b818601915086601f83011261055957600080fd5b81358181111561056857600080fd5b8760208260051b850101111561057d57600080fd5b6020928301989097509590910135949350505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126105c057600080fd5b83018035915067ffffffffffffffff8211156105db57600080fd5b6020019150368190038213156105f057600080fd5b9250929050565b604081528260408201528284606083013760006060848301015260006060601f19601f8601168301019050826020830152949350505050565b60006040828403121561064257600080fd5b6040516040810181811067ffffffffffffffff8211171561067357634e487b7160e01b600052604160045260246000fd5b604052825181526020928301519281019290925250919050565b8082018082111561013957634e487b7160e01b600052601160045260246000fd5b6000602082840312156106c057600080fd5b81516001600160a01b038116811461051157600080fdfea2646970667358221220ba7819d1cc56a48bafff83859079ab427832b6286d661ed234602a3046e36b3164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}