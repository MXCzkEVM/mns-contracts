{
  "address": "0x1AcBA90b99B5c045191d8bfd660E5B95c443EC11",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENS",
          "name": "_ens",
          "type": "address"
        },
        {
          "internalType": "contract IBaseRegistrar",
          "name": "_registrar",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedWrapper",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ens",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registrar",
      "outputs": [
        {
          "internalType": "contract IBaseRegistrar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "parentNode",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "label",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "ttl",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "fuses",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "expiry",
          "type": "uint64"
        }
      ],
      "name": "setSubnodeRecord",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wrapper",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setWrapperApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "label",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "wrappedOwner",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "fuses",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "expiry",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "wrapETH2LD",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "wrappedOwner",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "fuses",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "expiry",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "wrapFromUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xabd545528d6ca667433d7d34910be452be99b68ded91659d1eb9ae37bf5d062c",
  "receipt": {
    "to": null,
    "from": "0x1Ea0de0ae730d5D12ED7cB429e220Bf4e1D0e234",
    "contractAddress": "0x1AcBA90b99B5c045191d8bfd660E5B95c443EC11",
    "transactionIndex": 1,
    "gasUsed": "921931",
    "logsBloom": "0x
    "blockHash": "0xdabaca583046126ae87d5db81452ee034867c18edcbe827393e97fc6e909721b",
    "transactionHash": "0xabd545528d6ca667433d7d34910be452be99b68ded91659d1eb9ae37bf5d062c",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 975,
        "transactionHash": "0xabd545528d6ca667433d7d34910be452be99b68ded91659d1eb9ae37bf5d062c",
        "address": "0x1AcBA90b99B5c045191d8bfd660E5B95c443EC11",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001ea0de0ae730d5d12ed7cb429e220bf4e1d0e234"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xdabaca583046126ae87d5db81452ee034867c18edcbe827393e97fc6e909721b"
      }
    ],
    "blockNumber": 975,
    "cumulativeGasUsed": "1084331",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1Ee5F6b9083af19Ea13D4B0665aa3896DC262565",
    "0xE490C7df37ae5Cc2A7909246E87B292A83Fc3423"
  ],
  "numDeployments": 1,
  "solcInputHash": "b0f86eb025a2bf184421368d827bdf79",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"_ens\",\"type\":\"address\"},{\"internalType\":\"contract IBaseRegistrar\",\"name\":\"_registrar\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedWrapper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrar\",\"outputs\":[{\"internalType\":\"contract IBaseRegistrar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"fuses\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"name\":\"setSubnodeRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setWrapperApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wrappedOwner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"fuses\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"wrapETH2LD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"wrappedOwner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"fuses\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"wrapFromUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wrapper/mocks/TestUnwrap.sol\":\"TestUnwrap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\r\\nimport \\\"./IBaseRegistrar.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ninterface IBaseRegistrar is IERC721 {\\r\\n    event ControllerAdded(address indexed controller);\\r\\n    event ControllerRemoved(address indexed controller);\\r\\n    event NameMigrated(\\r\\n        uint256 indexed id,\\r\\n        address indexed owner,\\r\\n        uint256 expires\\r\\n    );\\r\\n    event NameRegistered(\\r\\n        uint256 indexed id,\\r\\n        address indexed owner,\\r\\n        uint256 expires\\r\\n    );\\r\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\r\\n\\r\\n    // Authorises a controller, who can register and renew domains.\\r\\n    function addController(address controller) external;\\r\\n\\r\\n    // Revoke controller permission for an address.\\r\\n    function removeController(address controller) external;\\r\\n\\r\\n    // Set the resolver for the TLD this registrar manages.\\r\\n    function setResolver(address resolver) external;\\r\\n\\r\\n    // Returns the expiration timestamp of the specified label hash.\\r\\n    function nameExpires(uint256 id) external view returns (uint256);\\r\\n\\r\\n    // Returns true if the specified name is available for registration.\\r\\n    function available(uint256 id) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Register a name.\\r\\n     */\\r\\n    function register(\\r\\n        uint256 id,\\r\\n        address owner,\\r\\n        uint256 duration\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\r\\n     */\\r\\n    function reclaim(uint256 id, address owner) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xaf6ba1e70a10caf590da42bdeac7a2b10463cc6928dc06dbea4881677b3f9610\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\ninterface ENS {\\r\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\r\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\r\\n\\r\\n    // Logged when the owner of a node transfers ownership to a new account.\\r\\n    event Transfer(bytes32 indexed node, address owner);\\r\\n\\r\\n    // Logged when the resolver for a node changes.\\r\\n    event NewResolver(bytes32 indexed node, address resolver);\\r\\n\\r\\n    // Logged when the TTL of a node changes\\r\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\r\\n\\r\\n    // Logged when an operator is added or removed.\\r\\n    event ApprovalForAll(\\r\\n        address indexed owner,\\r\\n        address indexed operator,\\r\\n        bool approved\\r\\n    );\\r\\n\\r\\n    function setRecord(\\r\\n        bytes32 node,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) external;\\r\\n\\r\\n    function setSubnodeRecord(\\r\\n        bytes32 node,\\r\\n        bytes32 label,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) external;\\r\\n\\r\\n    function setSubnodeOwner(\\r\\n        bytes32 node,\\r\\n        bytes32 label,\\r\\n        address owner\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function setResolver(bytes32 node, address resolver) external;\\r\\n\\r\\n    function setOwner(bytes32 node, address owner) external;\\r\\n\\r\\n    function setTTL(bytes32 node, uint64 ttl) external;\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    function owner(bytes32 node) external view returns (address);\\r\\n\\r\\n    function resolver(bytes32 node) external view returns (address);\\r\\n\\r\\n    function ttl(bytes32 node) external view returns (uint64);\\r\\n\\r\\n    function recordExists(bytes32 node) external view returns (bool);\\r\\n\\r\\n    function isApprovedForAll(\\r\\n        address owner,\\r\\n        address operator\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xb1fece691daf62005e0103e7699d25a2a9e0853b1eb59fd0a43042db6d43b081\"},\"contracts/wrapper/BytesUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ~0.8.17;\\r\\n\\r\\nlibrary BytesUtils {\\r\\n    /*\\r\\n     * @dev Returns the keccak-256 hash of a byte range.\\r\\n     * @param self The byte string to hash.\\r\\n     * @param offset The position to start hashing at.\\r\\n     * @param len The number of bytes to hash.\\r\\n     * @return The hash of the byte range.\\r\\n     */\\r\\n    function keccak(\\r\\n        bytes memory self,\\r\\n        uint256 offset,\\r\\n        uint256 len\\r\\n    ) internal pure returns (bytes32 ret) {\\r\\n        require(offset + len <= self.length);\\r\\n        assembly {\\r\\n            ret := keccak256(add(add(self, 32), offset), len)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the ENS namehash of a DNS-encoded name.\\r\\n     * @param self The DNS-encoded name to hash.\\r\\n     * @param offset The offset at which to start hashing.\\r\\n     * @return The namehash of the name.\\r\\n     */\\r\\n    function namehash(\\r\\n        bytes memory self,\\r\\n        uint256 offset\\r\\n    ) internal pure returns (bytes32) {\\r\\n        (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\\r\\n        if (labelhash == bytes32(0)) {\\r\\n            require(offset == self.length - 1, \\\"namehash: Junk at end of name\\\");\\r\\n            return bytes32(0);\\r\\n        }\\r\\n        return\\r\\n            keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\\r\\n     * @param self The byte string to read a label from.\\r\\n     * @param idx The index to read a label at.\\r\\n     * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\\r\\n     * @return newIdx The index of the start of the next label.\\r\\n     */\\r\\n    function readLabel(\\r\\n        bytes memory self,\\r\\n        uint256 idx\\r\\n    ) internal pure returns (bytes32 labelhash, uint256 newIdx) {\\r\\n        require(idx < self.length, \\\"readLabel: Index out of bounds\\\");\\r\\n        uint256 len = uint256(uint8(self[idx]));\\r\\n        if (len > 0) {\\r\\n            labelhash = keccak(self, idx + 1, len);\\r\\n        } else {\\r\\n            labelhash = bytes32(0);\\r\\n        }\\r\\n        newIdx = idx + len + 1;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2b950cab33fe4cfaf4cbe51b34262cf1d23813700296ed00149473b0a2cf59a8\",\"license\":\"MIT\"},\"contracts/wrapper/mocks/TestUnwrap.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"../../registry/ENS.sol\\\";\\r\\nimport \\\"../../ethregistrar/IBaseRegistrar.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {BytesUtils} from \\\"../BytesUtils.sol\\\";\\r\\n\\r\\ncontract TestUnwrap is Ownable {\\r\\n    using BytesUtils for bytes;\\r\\n\\r\\n    bytes32 private constant ETH_NODE =\\r\\n        0xc0ae3fe48f09fde4a60d1b2e3f2c5d1f8dd5922c3ab88ca76377c5fd10816e49;\\r\\n\\r\\n    ENS public immutable ens;\\r\\n    IBaseRegistrar public immutable registrar;\\r\\n    mapping(address => bool) public approvedWrapper;\\r\\n\\r\\n    constructor(ENS _ens, IBaseRegistrar _registrar) {\\r\\n        ens = _ens;\\r\\n        registrar = _registrar;\\r\\n    }\\r\\n\\r\\n    function setWrapperApproval(\\r\\n        address wrapper,\\r\\n        bool approved\\r\\n    ) public onlyOwner {\\r\\n        approvedWrapper[wrapper] = approved;\\r\\n    }\\r\\n\\r\\n    function wrapETH2LD(\\r\\n        string calldata label,\\r\\n        address wrappedOwner,\\r\\n        uint32 fuses,\\r\\n        uint64 expiry,\\r\\n        address resolver\\r\\n    ) public {\\r\\n        _unwrapETH2LD(keccak256(bytes(label)), wrappedOwner, msg.sender);\\r\\n    }\\r\\n\\r\\n    function setSubnodeRecord(\\r\\n        bytes32 parentNode,\\r\\n        string memory label,\\r\\n        address newOwner,\\r\\n        address resolver,\\r\\n        uint64 ttl,\\r\\n        uint32 fuses,\\r\\n        uint64 expiry\\r\\n    ) public {\\r\\n        bytes32 node = _makeNode(parentNode, keccak256(bytes(label)));\\r\\n        _unwrapSubnode(node, newOwner, msg.sender);\\r\\n    }\\r\\n\\r\\n    function wrapFromUpgrade(\\r\\n        bytes calldata name,\\r\\n        address wrappedOwner,\\r\\n        uint32 fuses,\\r\\n        uint64 expiry,\\r\\n        address approved,\\r\\n        bytes calldata extraData\\r\\n    ) public {\\r\\n        (bytes32 labelhash, uint256 offset) = name.readLabel(0);\\r\\n        bytes32 parentNode = name.namehash(offset);\\r\\n        bytes32 node = _makeNode(parentNode, labelhash);\\r\\n\\r\\n        if (parentNode == ETH_NODE) {\\r\\n            _unwrapETH2LD(labelhash, wrappedOwner, msg.sender);\\r\\n        } else {\\r\\n            _unwrapSubnode(node, wrappedOwner, msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _unwrapETH2LD(\\r\\n        bytes32 labelhash,\\r\\n        address wrappedOwner,\\r\\n        address sender\\r\\n    ) private {\\r\\n        uint256 tokenId = uint256(labelhash);\\r\\n        address registrant = registrar.ownerOf(tokenId);\\r\\n\\r\\n        require(\\r\\n            approvedWrapper[sender] &&\\r\\n                sender == registrant &&\\r\\n                registrar.isApprovedForAll(registrant, address(this)),\\r\\n            \\\"Unauthorised\\\"\\r\\n        );\\r\\n\\r\\n        registrar.reclaim(tokenId, wrappedOwner);\\r\\n        registrar.transferFrom(registrant, wrappedOwner, tokenId);\\r\\n    }\\r\\n\\r\\n    function _unwrapSubnode(\\r\\n        bytes32 node,\\r\\n        address newOwner,\\r\\n        address sender\\r\\n    ) private {\\r\\n        address owner = ens.owner(node);\\r\\n\\r\\n        require(\\r\\n            approvedWrapper[sender] &&\\r\\n                owner == sender &&\\r\\n                ens.isApprovedForAll(owner, address(this)),\\r\\n            \\\"Unauthorised\\\"\\r\\n        );\\r\\n\\r\\n        ens.setOwner(node, newOwner);\\r\\n    }\\r\\n\\r\\n    function _makeNode(\\r\\n        bytes32 node,\\r\\n        bytes32 labelhash\\r\\n    ) private pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(node, labelhash));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xed06d1b90d5d5cf3157561fd3df4d25e2c354577d0fae7a293fea684c90b0ed0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b1461013e5780639198c2761461014f578063c6d6d7c114610162578063f2fde38b14610195578063f9547a9e146101a857600080fd5b80630cc17365146100a357806324c1af44146100b85780632b20e397146100cb5780633f15457f1461010f578063715018a614610136575b600080fd5b6100b66100b1366004610b31565b6101bb565b005b6100b66100c6366004610bac565b6101ee565b6100f27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f27f000000000000000000000000000000000000000000000000000000000000000081565b6100b6610218565b6000546001600160a01b03166100f2565b6100b661015d366004610d03565b61022c565b610185610170366004610dbe565b60016020526000908152604090205460ff1681565b6040519015158152602001610106565b6100b66101a3366004610dbe565b61031c565b6100b66101b6366004610de2565b61039a565b6101c36103c4565b6001600160a01b03919091166000908152600160205260409020805460ff1916911515919091179055565b600061020188888051906020012061041e565b905061020e81873361044d565b5050505050505050565b6102206103c4565b61022a6000610665565b565b60008061027360008b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506106b59050565b9150915060006102bc828c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929392505061076c9050565b905060006102ca828561041e565b90507f3f51c01b70f6021b59f2e4d1c0d3a2e0722a6dd3c54773589c883a02ef7e91b78201610303576102fe848b3361082b565b61030e565b61030e818b3361044d565b505050505050505050505050565b6103246103c4565b6001600160a01b03811661038e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61039781610665565b50565b6103bc86866040516103ad929190610e6c565b6040518091039020853361082b565b505050505050565b6000546001600160a01b0316331461022a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610385565b604080516020808201859052818301849052825180830384018152606090920190925280519101205b92915050565b6040516302571be360e01b8152600481018490526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906302571be390602401602060405180830381865afa1580156104b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d99190610e7c565b6001600160a01b03831660009081526001602052604090205490915060ff1680156105155750816001600160a01b0316816001600160a01b0316145b80156105ac575060405163e985e9c560e01b81526001600160a01b0382811660048301523060248301527f0000000000000000000000000000000000000000000000000000000000000000169063e985e9c590604401602060405180830381865afa158015610588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ac9190610e99565b6105e75760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5cd95960a21b6044820152606401610385565b604051635b0fc9c360e01b8152600481018590526001600160a01b0384811660248301527f00000000000000000000000000000000000000000000000000000000000000001690635b0fc9c390604401600060405180830381600087803b15801561065157600080fd5b505af115801561020e573d6000803e3d6000fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080835183106107085760405162461bcd60e51b815260206004820152601e60248201527f726561644c6162656c3a20496e646578206f7574206f6620626f756e647300006044820152606401610385565b600084848151811061071c5761071c610eb6565b016020015160f81c90508015610748576107418561073b866001610ee2565b83610ada565b925061074d565b600092505b6107578185610ee2565b610762906001610ee2565b9150509250929050565b600080600061077b85856106b5565b9092509050816107ed57600185516107939190610ef5565b84146107e15760405162461bcd60e51b815260206004820152601d60248201527f6e616d65686173683a204a756e6b20617420656e64206f66206e616d650000006044820152606401610385565b50600091506104479050565b6107f7858261076c565b6040805160208101929092528101839052606001604051602081830303815290604052805190602001209250505092915050565b6040516331a9108f60e11b81526004810184905283906000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa158015610895573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b99190610e7c565b6001600160a01b03841660009081526001602052604090205490915060ff1680156108f55750806001600160a01b0316836001600160a01b0316145b801561098c575060405163e985e9c560e01b81526001600160a01b0382811660048301523060248301527f0000000000000000000000000000000000000000000000000000000000000000169063e985e9c590604401602060405180830381865afa158015610968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098c9190610e99565b6109c75760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5cd95960a21b6044820152606401610385565b604051630a3b53db60e21b8152600481018390526001600160a01b0385811660248301527f000000000000000000000000000000000000000000000000000000000000000016906328ed4f6c90604401600060405180830381600087803b158015610a3157600080fd5b505af1158015610a45573d6000803e3d6000fd5b50506040516323b872dd60e01b81526001600160a01b0384811660048301528781166024830152604482018690527f00000000000000000000000000000000000000000000000000000000000000001692506323b872dd9150606401600060405180830381600087803b158015610abb57600080fd5b505af1158015610acf573d6000803e3d6000fd5b505050505050505050565b8251600090610ae98385610ee2565b1115610af457600080fd5b5091016020012090565b6001600160a01b038116811461039757600080fd5b8035610b1e81610afe565b919050565b801515811461039757600080fd5b60008060408385031215610b4457600080fd5b8235610b4f81610afe565b91506020830135610b5f81610b23565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b803567ffffffffffffffff81168114610b1e57600080fd5b803563ffffffff81168114610b1e57600080fd5b600080600080600080600060e0888a031215610bc757600080fd5b87359650602088013567ffffffffffffffff80821115610be657600080fd5b818a0191508a601f830112610bfa57600080fd5b813581811115610c0c57610c0c610b6a565b604051601f8201601f19908116603f01168101908382118183101715610c3457610c34610b6a565b816040528281528d6020848701011115610c4d57600080fd5b82602086016020830137600060208483010152809a505050505050610c7460408901610b13565b9450610c8260608901610b13565b9350610c9060808901610b80565b9250610c9e60a08901610b98565b9150610cac60c08901610b80565b905092959891949750929550565b60008083601f840112610ccc57600080fd5b50813567ffffffffffffffff811115610ce457600080fd5b602083019150836020828501011115610cfc57600080fd5b9250929050565b60008060008060008060008060c0898b031215610d1f57600080fd5b883567ffffffffffffffff80821115610d3757600080fd5b610d438c838d01610cba565b909a50985060208b01359150610d5882610afe565b819750610d6760408c01610b98565b9650610d7560608c01610b80565b955060808b01359150610d8782610afe565b90935060a08a01359080821115610d9d57600080fd5b50610daa8b828c01610cba565b999c989b5096995094979396929594505050565b600060208284031215610dd057600080fd5b8135610ddb81610afe565b9392505050565b60008060008060008060a08789031215610dfb57600080fd5b863567ffffffffffffffff811115610e1257600080fd5b610e1e89828a01610cba565b9097509550506020870135610e3281610afe565b9350610e4060408801610b98565b9250610e4e60608801610b80565b91506080870135610e5e81610afe565b809150509295509295509295565b8183823760009101908152919050565b600060208284031215610e8e57600080fd5b8151610ddb81610afe565b600060208284031215610eab57600080fd5b8151610ddb81610b23565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561044757610447610ecc565b8181038181111561044757610447610ecc56fea2646970667358221220f8770965c2662a1861945e8c40b02a0df75212be635e442773ed4cf05df1707764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 444,
        "contract": "contracts/wrapper/mocks/TestUnwrap.sol:TestUnwrap",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 24467,
        "contract": "contracts/wrapper/mocks/TestUnwrap.sol:TestUnwrap",
        "label": "approvedWrapper",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}