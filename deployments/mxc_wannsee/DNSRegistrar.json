{
  "address": "0xaCFb160C4356a89c0096aAd292c7300D5949F384",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_previousRegistrar",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "contract DNSSEC",
          "name": "_dnssec",
          "type": "address"
        },
        {
          "internalType": "contract PublicSuffixList",
          "name": "_suffixes",
          "type": "address"
        },
        {
          "internalType": "contract ENS",
          "name": "_ens",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        }
      ],
      "name": "InvalidPublicSuffix",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoOwnerRecordFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "OffsetOutOfBoundsError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "PermissionDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PreconditionNotMet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StaleProof",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "dnsname",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "inception",
          "type": "uint32"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "suffixes",
          "type": "address"
        }
      ],
      "name": "NewPublicSuffixList",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "domain",
          "type": "bytes"
        }
      ],
      "name": "enableNode",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ens",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "inceptions",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract DNSSEC",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "previousRegistrar",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "rrset",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "sig",
              "type": "bytes"
            }
          ],
          "internalType": "struct DNSSEC.RRSetWithSignature[]",
          "name": "input",
          "type": "tuple[]"
        }
      ],
      "name": "proveAndClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "rrset",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "sig",
              "type": "bytes"
            }
          ],
          "internalType": "struct DNSSEC.RRSetWithSignature[]",
          "name": "input",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "proveAndClaimWithResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract PublicSuffixList",
          "name": "_suffixes",
          "type": "address"
        }
      ],
      "name": "setPublicSuffixList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "suffixes",
      "outputs": [
        {
          "internalType": "contract PublicSuffixList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xdf4295d505079296771342b376ac0ab35bb010eff0a4cd8071b01f30347ab6c1",
  "receipt": {
    "to": null,
    "from": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
    "contractAddress": "0xaCFb160C4356a89c0096aAd292c7300D5949F384",
    "transactionIndex": 1,
    "gasUsed": "1836888",
    "logsBloom": "0x
    "blockHash": "0xec04fca49c7cd554589e223ba3db5115ff034bd76da5dc283e464ae8bab75701",
    "transactionHash": "0xdf4295d505079296771342b376ac0ab35bb010eff0a4cd8071b01f30347ab6c1",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 241,
        "transactionHash": "0xdf4295d505079296771342b376ac0ab35bb010eff0a4cd8071b01f30347ab6c1",
        "address": "0xaCFb160C4356a89c0096aAd292c7300D5949F384",
        "topics": [
          "0x9176b7f47e4504df5e5516c99d90d82ac7cbd49cc77e7f22ba2ac2f2e3a3eba8"
        ],
        "data": "0x00000000000000000000000086e3f6ad85847e6cb583d6d0dab3d31ac1f96b15",
        "logIndex": 2,
        "blockHash": "0xec04fca49c7cd554589e223ba3db5115ff034bd76da5dc283e464ae8bab75701"
      }
    ],
    "blockNumber": 241,
    "cumulativeGasUsed": "1996585",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    "0xDbDd6BBCc67E03862c25Aa046298Ac7CEB323189",
    "0x77938e634869Cbb6F9940fd690dbA9757328705F",
    "0x86e3f6AD85847e6cB583D6d0DaB3D31AC1F96b15",
    "0x4E7984fF74569a270765EE67792386cBA77D1b01"
  ],
  "numDeployments": 1,
  "solcInputHash": "b0f86eb025a2bf184421368d827bdf79",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_previousRegistrar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"contract DNSSEC\",\"name\":\"_dnssec\",\"type\":\"address\"},{\"internalType\":\"contract PublicSuffixList\",\"name\":\"_suffixes\",\"type\":\"address\"},{\"internalType\":\"contract ENS\",\"name\":\"_ens\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"}],\"name\":\"InvalidPublicSuffix\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoOwnerRecordFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"OffsetOutOfBoundsError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"PermissionDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PreconditionNotMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StaleProof\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dnsname\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"inception\",\"type\":\"uint32\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"suffixes\",\"type\":\"address\"}],\"name\":\"NewPublicSuffixList\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"domain\",\"type\":\"bytes\"}],\"name\":\"enableNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"inceptions\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract DNSSEC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousRegistrar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"rrset\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct DNSSEC.RRSetWithSignature[]\",\"name\":\"input\",\"type\":\"tuple[]\"}],\"name\":\"proveAndClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"rrset\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct DNSSEC.RRSetWithSignature[]\",\"name\":\"input\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"proveAndClaimWithResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PublicSuffixList\",\"name\":\"_suffixes\",\"type\":\"address\"}],\"name\":\"setPublicSuffixList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"suffixes\",\"outputs\":[{\"internalType\":\"contract PublicSuffixList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An ENS registrar that allows the owner of a DNS name to claim the      corresponding name in ENS.\",\"kind\":\"dev\",\"methods\":{\"proveAndClaim(bytes,(bytes,bytes)[])\":{\"details\":\"Submits proofs to the DNSSEC oracle, then claims a name using those proofs.\",\"params\":{\"input\":\"A chain of signed DNS RRSETs ending with a text record.\",\"name\":\"The name to claim, in DNS wire format.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dnsregistrar/DNSRegistrar.sol\":\"DNSRegistrar\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/buffer/contracts/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\\n\",\"keccak256\":\"0xd6dd3b0b327288f8e1b711a609f4040fea602e2ad4bba9febdf2f33b4e56eb0c\",\"license\":\"BSD-2-Clause\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/dnsregistrar/DNSClaimChecker.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../dnssec-oracle/DNSSEC.sol\\\";\\r\\nimport \\\"../dnssec-oracle/BytesUtils.sol\\\";\\r\\nimport \\\"../dnssec-oracle/RRUtils.sol\\\";\\r\\nimport \\\"../utils/HexUtils.sol\\\";\\r\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\r\\n\\r\\nlibrary DNSClaimChecker {\\r\\n    using BytesUtils for bytes;\\r\\n    using HexUtils for bytes;\\r\\n    using RRUtils for *;\\r\\n    using Buffer for Buffer.buffer;\\r\\n\\r\\n    uint16 constant CLASS_INET = 1;\\r\\n    uint16 constant TYPE_TXT = 16;\\r\\n\\r\\n    function getOwnerAddress(\\r\\n        bytes memory name,\\r\\n        bytes memory data\\r\\n    ) internal pure returns (address, bool) {\\r\\n        // Add \\\"_ens.\\\" to the front of the name.\\r\\n        Buffer.buffer memory buf;\\r\\n        buf.init(name.length + 5);\\r\\n        buf.append(\\\"\\\\x04_ens\\\");\\r\\n        buf.append(name);\\r\\n\\r\\n        for (\\r\\n            RRUtils.RRIterator memory iter = data.iterateRRs(0);\\r\\n            !iter.done();\\r\\n            iter.next()\\r\\n        ) {\\r\\n            if (iter.name().compareNames(buf.buf) != 0) continue;\\r\\n            bool found;\\r\\n            address addr;\\r\\n            (addr, found) = parseRR(data, iter.rdataOffset, iter.nextOffset);\\r\\n            if (found) {\\r\\n                return (addr, true);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (address(0x0), false);\\r\\n    }\\r\\n\\r\\n    function parseRR(\\r\\n        bytes memory rdata,\\r\\n        uint256 idx,\\r\\n        uint256 endIdx\\r\\n    ) internal pure returns (address, bool) {\\r\\n        while (idx < endIdx) {\\r\\n            uint256 len = rdata.readUint8(idx);\\r\\n            idx += 1;\\r\\n\\r\\n            bool found;\\r\\n            address addr;\\r\\n            (addr, found) = parseString(rdata, idx, len);\\r\\n\\r\\n            if (found) return (addr, true);\\r\\n            idx += len;\\r\\n        }\\r\\n\\r\\n        return (address(0x0), false);\\r\\n    }\\r\\n\\r\\n    function parseString(\\r\\n        bytes memory str,\\r\\n        uint256 idx,\\r\\n        uint256 len\\r\\n    ) internal pure returns (address, bool) {\\r\\n        // TODO: More robust parsing that handles whitespace and multiple key/value pairs\\r\\n        if (str.readUint32(idx) != 0x613d3078) return (address(0x0), false); // 0x613d3078 == 'a=0x'\\r\\n        return str.hexToAddress(idx + 4, idx + len);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x291ab56db246bde679f08348502f0dc990f500612f6558daee0e26e11fb91088\",\"license\":\"MIT\"},\"contracts/dnsregistrar/DNSRegistrar.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\r\\nimport \\\"../dnssec-oracle/BytesUtils.sol\\\";\\r\\nimport \\\"../dnssec-oracle/DNSSEC.sol\\\";\\r\\nimport \\\"../dnssec-oracle/RRUtils.sol\\\";\\r\\nimport \\\"../registry/ENSRegistry.sol\\\";\\r\\nimport \\\"../root/Root.sol\\\";\\r\\nimport \\\"../resolvers/profiles/AddrResolver.sol\\\";\\r\\nimport \\\"./DNSClaimChecker.sol\\\";\\r\\nimport \\\"./PublicSuffixList.sol\\\";\\r\\nimport \\\"./IDNSRegistrar.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev An ENS registrar that allows the owner of a DNS name to claim the\\r\\n *      corresponding name in ENS.\\r\\n */\\r\\ncontract DNSRegistrar is IDNSRegistrar, IERC165 {\\r\\n    using BytesUtils for bytes;\\r\\n    using Buffer for Buffer.buffer;\\r\\n    using RRUtils for *;\\r\\n\\r\\n    ENS public immutable ens;\\r\\n    DNSSEC public immutable oracle;\\r\\n    PublicSuffixList public suffixes;\\r\\n    address public immutable previousRegistrar;\\r\\n    address public immutable resolver;\\r\\n    // A mapping of the most recent signatures seen for each claimed domain.\\r\\n    mapping(bytes32 => uint32) public inceptions;\\r\\n\\r\\n    error NoOwnerRecordFound();\\r\\n    error PermissionDenied(address caller, address owner);\\r\\n    error PreconditionNotMet();\\r\\n    error StaleProof();\\r\\n    error InvalidPublicSuffix(bytes name);\\r\\n\\r\\n    struct OwnerRecord {\\r\\n        bytes name;\\r\\n        address owner;\\r\\n        address resolver;\\r\\n        uint64 ttl;\\r\\n    }\\r\\n\\r\\n    event Claim(\\r\\n        bytes32 indexed node,\\r\\n        address indexed owner,\\r\\n        bytes dnsname,\\r\\n        uint32 inception\\r\\n    );\\r\\n    event NewPublicSuffixList(address suffixes);\\r\\n\\r\\n    constructor(\\r\\n        address _previousRegistrar,\\r\\n        address _resolver,\\r\\n        DNSSEC _dnssec,\\r\\n        PublicSuffixList _suffixes,\\r\\n        ENS _ens\\r\\n    ) {\\r\\n        previousRegistrar = _previousRegistrar;\\r\\n        resolver = _resolver;\\r\\n        oracle = _dnssec;\\r\\n        suffixes = _suffixes;\\r\\n        emit NewPublicSuffixList(address(suffixes));\\r\\n        ens = _ens;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This contract's owner-only functions can be invoked by the owner of the ENS root.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        Root root = Root(ens.owner(bytes32(0)));\\r\\n        address owner = root.owner();\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setPublicSuffixList(PublicSuffixList _suffixes) public onlyOwner {\\r\\n        suffixes = _suffixes;\\r\\n        emit NewPublicSuffixList(address(suffixes));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Submits proofs to the DNSSEC oracle, then claims a name using those proofs.\\r\\n     * @param name The name to claim, in DNS wire format.\\r\\n     * @param input A chain of signed DNS RRSETs ending with a text record.\\r\\n     */\\r\\n    function proveAndClaim(\\r\\n        bytes memory name,\\r\\n        DNSSEC.RRSetWithSignature[] memory input\\r\\n    ) public override {\\r\\n        (bytes32 rootNode, bytes32 labelHash, address addr) = _claim(\\r\\n            name,\\r\\n            input\\r\\n        );\\r\\n        ens.setSubnodeOwner(rootNode, labelHash, addr);\\r\\n    }\\r\\n\\r\\n    function proveAndClaimWithResolver(\\r\\n        bytes memory name,\\r\\n        DNSSEC.RRSetWithSignature[] memory input,\\r\\n        address resolver,\\r\\n        address addr\\r\\n    ) public override {\\r\\n        (bytes32 rootNode, bytes32 labelHash, address owner) = _claim(\\r\\n            name,\\r\\n            input\\r\\n        );\\r\\n        if (msg.sender != owner) {\\r\\n            revert PermissionDenied(msg.sender, owner);\\r\\n        }\\r\\n        ens.setSubnodeRecord(rootNode, labelHash, owner, resolver, 0);\\r\\n        if (addr != address(0)) {\\r\\n            if (resolver == address(0)) {\\r\\n                revert PreconditionNotMet();\\r\\n            }\\r\\n            bytes32 node = keccak256(abi.encodePacked(rootNode, labelHash));\\r\\n            // Set the resolver record\\r\\n            AddrResolver(resolver).setAddr(node, addr);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceID\\r\\n    ) external pure override returns (bool) {\\r\\n        return\\r\\n            interfaceID == type(IERC165).interfaceId ||\\r\\n            interfaceID == type(IDNSRegistrar).interfaceId;\\r\\n    }\\r\\n\\r\\n    function _claim(\\r\\n        bytes memory name,\\r\\n        DNSSEC.RRSetWithSignature[] memory input\\r\\n    ) internal returns (bytes32 parentNode, bytes32 labelHash, address addr) {\\r\\n        (bytes memory data, uint32 inception) = oracle.verifyRRSet(input);\\r\\n\\r\\n        // Get the first label\\r\\n        uint256 labelLen = name.readUint8(0);\\r\\n        labelHash = name.keccak(1, labelLen);\\r\\n\\r\\n        bytes memory parentName = name.substring(\\r\\n            labelLen + 1,\\r\\n            name.length - labelLen - 1\\r\\n        );\\r\\n\\r\\n        // Make sure the parent name is enabled\\r\\n        parentNode = enableNode(parentName);\\r\\n\\r\\n        bytes32 node = keccak256(abi.encodePacked(parentNode, labelHash));\\r\\n        if (!RRUtils.serialNumberGte(inception, inceptions[node])) {\\r\\n            revert StaleProof();\\r\\n        }\\r\\n        inceptions[node] = inception;\\r\\n\\r\\n        bool found;\\r\\n        (addr, found) = DNSClaimChecker.getOwnerAddress(name, data);\\r\\n        if (!found) {\\r\\n            revert NoOwnerRecordFound();\\r\\n        }\\r\\n\\r\\n        emit Claim(node, addr, name, inception);\\r\\n    }\\r\\n\\r\\n    function enableNode(bytes memory domain) public returns (bytes32 node) {\\r\\n        // Name must be in the public suffix list.\\r\\n        if (!suffixes.isPublicSuffix(domain)) {\\r\\n            revert InvalidPublicSuffix(domain);\\r\\n        }\\r\\n        return _enableNode(domain, 0);\\r\\n    }\\r\\n\\r\\n    function _enableNode(\\r\\n        bytes memory domain,\\r\\n        uint256 offset\\r\\n    ) internal returns (bytes32 node) {\\r\\n        uint256 len = domain.readUint8(offset);\\r\\n        if (len == 0) {\\r\\n            return bytes32(0);\\r\\n        }\\r\\n\\r\\n        bytes32 parentNode = _enableNode(domain, offset + len + 1);\\r\\n        bytes32 label = domain.keccak(offset + 1, len);\\r\\n        node = keccak256(abi.encodePacked(parentNode, label));\\r\\n        address owner = ens.owner(node);\\r\\n        if (owner == address(0) || owner == previousRegistrar) {\\r\\n            if (parentNode == bytes32(0)) {\\r\\n                Root root = Root(ens.owner(bytes32(0)));\\r\\n                root.setSubnodeOwner(label, address(this));\\r\\n                ens.setResolver(node, resolver);\\r\\n            } else {\\r\\n                ens.setSubnodeRecord(\\r\\n                    parentNode,\\r\\n                    label,\\r\\n                    address(this),\\r\\n                    resolver,\\r\\n                    0\\r\\n                );\\r\\n            }\\r\\n        } else if (owner != address(this)) {\\r\\n            revert PreconditionNotMet();\\r\\n        }\\r\\n        return node;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe9e5c91c228aa9f22bfa86f3903547de5257a8d386ee818a7cf22c9a05d82900\",\"license\":\"MIT\"},\"contracts/dnsregistrar/IDNSRegistrar.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../dnssec-oracle/DNSSEC.sol\\\";\\r\\n\\r\\ninterface IDNSRegistrar {\\r\\n    function proveAndClaim(\\r\\n        bytes memory name,\\r\\n        DNSSEC.RRSetWithSignature[] memory input\\r\\n    ) external;\\r\\n\\r\\n    function proveAndClaimWithResolver(\\r\\n        bytes memory name,\\r\\n        DNSSEC.RRSetWithSignature[] memory input,\\r\\n        address resolver,\\r\\n        address addr\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x3f7ce1d74be08cddcedf4df613bb3d8f0af8ecf6e083abf9a86ca56b803306bb\",\"license\":\"MIT\"},\"contracts/dnsregistrar/PublicSuffixList.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\ninterface PublicSuffixList {\\r\\n    function isPublicSuffix(bytes calldata name) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x01cc9882071ee7f2474558f34a641b1db20efcb04d675eb35eaea48c8c772325\"},\"contracts/dnssec-oracle/BytesUtils.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\nlibrary BytesUtils {\\r\\n    error OffsetOutOfBoundsError(uint256 offset, uint256 length);\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the keccak-256 hash of a byte range.\\r\\n     * @param self The byte string to hash.\\r\\n     * @param offset The position to start hashing at.\\r\\n     * @param len The number of bytes to hash.\\r\\n     * @return The hash of the byte range.\\r\\n     */\\r\\n    function keccak(\\r\\n        bytes memory self,\\r\\n        uint256 offset,\\r\\n        uint256 len\\r\\n    ) internal pure returns (bytes32 ret) {\\r\\n        require(offset + len <= self.length);\\r\\n        assembly {\\r\\n            ret := keccak256(add(add(self, 32), offset), len)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns a positive number if `other` comes lexicographically after\\r\\n     *      `self`, a negative number if it comes before, or zero if the\\r\\n     *      contents of the two bytes are equal.\\r\\n     * @param self The first bytes to compare.\\r\\n     * @param other The second bytes to compare.\\r\\n     * @return The result of the comparison.\\r\\n     */\\r\\n    function compare(\\r\\n        bytes memory self,\\r\\n        bytes memory other\\r\\n    ) internal pure returns (int256) {\\r\\n        return compare(self, 0, self.length, other, 0, other.length);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns a positive number if `other` comes lexicographically after\\r\\n     *      `self`, a negative number if it comes before, or zero if the\\r\\n     *      contents of the two bytes are equal. Comparison is done per-rune,\\r\\n     *      on unicode codepoints.\\r\\n     * @param self The first bytes to compare.\\r\\n     * @param offset The offset of self.\\r\\n     * @param len    The length of self.\\r\\n     * @param other The second bytes to compare.\\r\\n     * @param otheroffset The offset of the other string.\\r\\n     * @param otherlen    The length of the other string.\\r\\n     * @return The result of the comparison.\\r\\n     */\\r\\n    function compare(\\r\\n        bytes memory self,\\r\\n        uint256 offset,\\r\\n        uint256 len,\\r\\n        bytes memory other,\\r\\n        uint256 otheroffset,\\r\\n        uint256 otherlen\\r\\n    ) internal pure returns (int256) {\\r\\n        if (offset + len > self.length) {\\r\\n            revert OffsetOutOfBoundsError(offset + len, self.length);\\r\\n        }\\r\\n        if (otheroffset + otherlen > other.length) {\\r\\n            revert OffsetOutOfBoundsError(otheroffset + otherlen, other.length);\\r\\n        }\\r\\n\\r\\n        uint256 shortest = len;\\r\\n        if (otherlen < len) shortest = otherlen;\\r\\n\\r\\n        uint256 selfptr;\\r\\n        uint256 otherptr;\\r\\n\\r\\n        assembly {\\r\\n            selfptr := add(self, add(offset, 32))\\r\\n            otherptr := add(other, add(otheroffset, 32))\\r\\n        }\\r\\n        for (uint256 idx = 0; idx < shortest; idx += 32) {\\r\\n            uint256 a;\\r\\n            uint256 b;\\r\\n            assembly {\\r\\n                a := mload(selfptr)\\r\\n                b := mload(otherptr)\\r\\n            }\\r\\n            if (a != b) {\\r\\n                // Mask out irrelevant bytes and check again\\r\\n                uint256 mask;\\r\\n                if (shortest - idx >= 32) {\\r\\n                    mask = type(uint256).max;\\r\\n                } else {\\r\\n                    mask = ~(2 ** (8 * (idx + 32 - shortest)) - 1);\\r\\n                }\\r\\n                int256 diff = int256(a & mask) - int256(b & mask);\\r\\n                if (diff != 0) return diff;\\r\\n            }\\r\\n            selfptr += 32;\\r\\n            otherptr += 32;\\r\\n        }\\r\\n\\r\\n        return int256(len) - int256(otherlen);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns true if the two byte ranges are equal.\\r\\n     * @param self The first byte range to compare.\\r\\n     * @param offset The offset into the first byte range.\\r\\n     * @param other The second byte range to compare.\\r\\n     * @param otherOffset The offset into the second byte range.\\r\\n     * @param len The number of bytes to compare\\r\\n     * @return True if the byte ranges are equal, false otherwise.\\r\\n     */\\r\\n    function equals(\\r\\n        bytes memory self,\\r\\n        uint256 offset,\\r\\n        bytes memory other,\\r\\n        uint256 otherOffset,\\r\\n        uint256 len\\r\\n    ) internal pure returns (bool) {\\r\\n        return keccak(self, offset, len) == keccak(other, otherOffset, len);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns true if the two byte ranges are equal with offsets.\\r\\n     * @param self The first byte range to compare.\\r\\n     * @param offset The offset into the first byte range.\\r\\n     * @param other The second byte range to compare.\\r\\n     * @param otherOffset The offset into the second byte range.\\r\\n     * @return True if the byte ranges are equal, false otherwise.\\r\\n     */\\r\\n    function equals(\\r\\n        bytes memory self,\\r\\n        uint256 offset,\\r\\n        bytes memory other,\\r\\n        uint256 otherOffset\\r\\n    ) internal pure returns (bool) {\\r\\n        return\\r\\n            keccak(self, offset, self.length - offset) ==\\r\\n            keccak(other, otherOffset, other.length - otherOffset);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Compares a range of 'self' to all of 'other' and returns True iff\\r\\n     *      they are equal.\\r\\n     * @param self The first byte range to compare.\\r\\n     * @param offset The offset into the first byte range.\\r\\n     * @param other The second byte range to compare.\\r\\n     * @return True if the byte ranges are equal, false otherwise.\\r\\n     */\\r\\n    function equals(\\r\\n        bytes memory self,\\r\\n        uint256 offset,\\r\\n        bytes memory other\\r\\n    ) internal pure returns (bool) {\\r\\n        return\\r\\n            self.length == offset + other.length &&\\r\\n            equals(self, offset, other, 0, other.length);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns true if the two byte ranges are equal.\\r\\n     * @param self The first byte range to compare.\\r\\n     * @param other The second byte range to compare.\\r\\n     * @return True if the byte ranges are equal, false otherwise.\\r\\n     */\\r\\n    function equals(\\r\\n        bytes memory self,\\r\\n        bytes memory other\\r\\n    ) internal pure returns (bool) {\\r\\n        return\\r\\n            self.length == other.length &&\\r\\n            equals(self, 0, other, 0, self.length);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the 8-bit number at the specified index of self.\\r\\n     * @param self The byte string.\\r\\n     * @param idx The index into the bytes\\r\\n     * @return The specified 8 bits of the string, interpreted as an integer.\\r\\n     */\\r\\n    function readUint8(\\r\\n        bytes memory self,\\r\\n        uint256 idx\\r\\n    ) internal pure returns (uint8 ret) {\\r\\n        return uint8(self[idx]);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the 16-bit number at the specified index of self.\\r\\n     * @param self The byte string.\\r\\n     * @param idx The index into the bytes\\r\\n     * @return The specified 16 bits of the string, interpreted as an integer.\\r\\n     */\\r\\n    function readUint16(\\r\\n        bytes memory self,\\r\\n        uint256 idx\\r\\n    ) internal pure returns (uint16 ret) {\\r\\n        require(idx + 2 <= self.length);\\r\\n        assembly {\\r\\n            ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the 32-bit number at the specified index of self.\\r\\n     * @param self The byte string.\\r\\n     * @param idx The index into the bytes\\r\\n     * @return The specified 32 bits of the string, interpreted as an integer.\\r\\n     */\\r\\n    function readUint32(\\r\\n        bytes memory self,\\r\\n        uint256 idx\\r\\n    ) internal pure returns (uint32 ret) {\\r\\n        require(idx + 4 <= self.length);\\r\\n        assembly {\\r\\n            ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the 32 byte value at the specified index of self.\\r\\n     * @param self The byte string.\\r\\n     * @param idx The index into the bytes\\r\\n     * @return The specified 32 bytes of the string.\\r\\n     */\\r\\n    function readBytes32(\\r\\n        bytes memory self,\\r\\n        uint256 idx\\r\\n    ) internal pure returns (bytes32 ret) {\\r\\n        require(idx + 32 <= self.length);\\r\\n        assembly {\\r\\n            ret := mload(add(add(self, 32), idx))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the 32 byte value at the specified index of self.\\r\\n     * @param self The byte string.\\r\\n     * @param idx The index into the bytes\\r\\n     * @return The specified 32 bytes of the string.\\r\\n     */\\r\\n    function readBytes20(\\r\\n        bytes memory self,\\r\\n        uint256 idx\\r\\n    ) internal pure returns (bytes20 ret) {\\r\\n        require(idx + 20 <= self.length);\\r\\n        assembly {\\r\\n            ret := and(\\r\\n                mload(add(add(self, 32), idx)),\\r\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the n byte value at the specified index of self.\\r\\n     * @param self The byte string.\\r\\n     * @param idx The index into the bytes.\\r\\n     * @param len The number of bytes.\\r\\n     * @return The specified 32 bytes of the string.\\r\\n     */\\r\\n    function readBytesN(\\r\\n        bytes memory self,\\r\\n        uint256 idx,\\r\\n        uint256 len\\r\\n    ) internal pure returns (bytes32 ret) {\\r\\n        require(len <= 32);\\r\\n        require(idx + len <= self.length);\\r\\n        assembly {\\r\\n            let mask := not(sub(exp(256, sub(32, len)), 1))\\r\\n            ret := and(mload(add(add(self, 32), idx)), mask)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function memcpy(uint256 dest, uint256 src, uint256 len) private pure {\\r\\n        // Copy word-length chunks while possible\\r\\n        for (; len >= 32; len -= 32) {\\r\\n            assembly {\\r\\n                mstore(dest, mload(src))\\r\\n            }\\r\\n            dest += 32;\\r\\n            src += 32;\\r\\n        }\\r\\n\\r\\n        // Copy remaining bytes\\r\\n        unchecked {\\r\\n            uint256 mask = (256 ** (32 - len)) - 1;\\r\\n            assembly {\\r\\n                let srcpart := and(mload(src), not(mask))\\r\\n                let destpart := and(mload(dest), mask)\\r\\n                mstore(dest, or(destpart, srcpart))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Copies a substring into a new byte string.\\r\\n     * @param self The byte string to copy from.\\r\\n     * @param offset The offset to start copying at.\\r\\n     * @param len The number of bytes to copy.\\r\\n     */\\r\\n    function substring(\\r\\n        bytes memory self,\\r\\n        uint256 offset,\\r\\n        uint256 len\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        require(offset + len <= self.length);\\r\\n\\r\\n        bytes memory ret = new bytes(len);\\r\\n        uint256 dest;\\r\\n        uint256 src;\\r\\n\\r\\n        assembly {\\r\\n            dest := add(ret, 32)\\r\\n            src := add(add(self, 32), offset)\\r\\n        }\\r\\n        memcpy(dest, src, len);\\r\\n\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    // Maps characters from 0x30 to 0x7A to their base32 values.\\r\\n    // 0xFF represents invalid characters in that range.\\r\\n    bytes constant base32HexTable =\\r\\n        hex\\\"00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Decodes unpadded base32 data of up to one word in length.\\r\\n     * @param self The data to decode.\\r\\n     * @param off Offset into the string to start at.\\r\\n     * @param len Number of characters to decode.\\r\\n     * @return The decoded data, left aligned.\\r\\n     */\\r\\n    function base32HexDecodeWord(\\r\\n        bytes memory self,\\r\\n        uint256 off,\\r\\n        uint256 len\\r\\n    ) internal pure returns (bytes32) {\\r\\n        require(len <= 52);\\r\\n\\r\\n        uint256 ret = 0;\\r\\n        uint8 decoded;\\r\\n        for (uint256 i = 0; i < len; i++) {\\r\\n            bytes1 char = self[off + i];\\r\\n            require(char >= 0x30 && char <= 0x7A);\\r\\n            decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\r\\n            require(decoded <= 0x20);\\r\\n            if (i == len - 1) {\\r\\n                break;\\r\\n            }\\r\\n            ret = (ret << 5) | decoded;\\r\\n        }\\r\\n\\r\\n        uint256 bitlen = len * 5;\\r\\n        if (len % 8 == 0) {\\r\\n            // Multiple of 8 characters, no padding\\r\\n            ret = (ret << 5) | decoded;\\r\\n        } else if (len % 8 == 2) {\\r\\n            // Two extra characters - 1 byte\\r\\n            ret = (ret << 3) | (decoded >> 2);\\r\\n            bitlen -= 2;\\r\\n        } else if (len % 8 == 4) {\\r\\n            // Four extra characters - 2 bytes\\r\\n            ret = (ret << 1) | (decoded >> 4);\\r\\n            bitlen -= 4;\\r\\n        } else if (len % 8 == 5) {\\r\\n            // Five extra characters - 3 bytes\\r\\n            ret = (ret << 4) | (decoded >> 1);\\r\\n            bitlen -= 1;\\r\\n        } else if (len % 8 == 7) {\\r\\n            // Seven extra characters - 4 bytes\\r\\n            ret = (ret << 2) | (decoded >> 3);\\r\\n            bitlen -= 3;\\r\\n        } else {\\r\\n            revert();\\r\\n        }\\r\\n\\r\\n        return bytes32(ret << (256 - bitlen));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Finds the first occurrence of the byte `needle` in `self`.\\r\\n     * @param self The string to search\\r\\n     * @param off The offset to start searching at\\r\\n     * @param len The number of bytes to search\\r\\n     * @param needle The byte to search for\\r\\n     * @return The offset of `needle` in `self`, or 2**256-1 if it was not found.\\r\\n     */\\r\\n    function find(\\r\\n        bytes memory self,\\r\\n        uint256 off,\\r\\n        uint256 len,\\r\\n        bytes1 needle\\r\\n    ) internal pure returns (uint256) {\\r\\n        for (uint256 idx = off; idx < off + len; idx++) {\\r\\n            if (self[idx] == needle) {\\r\\n                return idx;\\r\\n            }\\r\\n        }\\r\\n        return type(uint256).max;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb464edb8f5dc9369cb1ab2cb1c8af5e217d2fe11b32ef7288e37e2838b89dc59\"},\"contracts/dnssec-oracle/DNSSEC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nabstract contract DNSSEC {\\r\\n    bytes public anchors;\\r\\n\\r\\n    struct RRSetWithSignature {\\r\\n        bytes rrset;\\r\\n        bytes sig;\\r\\n    }\\r\\n\\r\\n    event AlgorithmUpdated(uint8 id, address addr);\\r\\n    event DigestUpdated(uint8 id, address addr);\\r\\n\\r\\n    function verifyRRSet(\\r\\n        RRSetWithSignature[] memory input\\r\\n    ) external view virtual returns (bytes memory rrs, uint32 inception);\\r\\n\\r\\n    function verifyRRSet(\\r\\n        RRSetWithSignature[] memory input,\\r\\n        uint256 now\\r\\n    ) public view virtual returns (bytes memory rrs, uint32 inception);\\r\\n}\\r\\n\",\"keccak256\":\"0x2fc67aef2359ab521c6c84d706df5d246d49bb1f6a605fb605272a7e976a61a2\",\"license\":\"MIT\"},\"contracts/dnssec-oracle/RRUtils.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BytesUtils.sol\\\";\\r\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev RRUtils is a library that provides utilities for parsing DNS resource records.\\r\\n */\\r\\nlibrary RRUtils {\\r\\n    using BytesUtils for *;\\r\\n    using Buffer for *;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\\r\\n     * @param self The byte array to read a name from.\\r\\n     * @param offset The offset to start reading at.\\r\\n     * @return The length of the DNS name at 'offset', in bytes.\\r\\n     */\\r\\n    function nameLength(\\r\\n        bytes memory self,\\r\\n        uint256 offset\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 idx = offset;\\r\\n        while (true) {\\r\\n            assert(idx < self.length);\\r\\n            uint256 labelLen = self.readUint8(idx);\\r\\n            idx += labelLen + 1;\\r\\n            if (labelLen == 0) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        return idx - offset;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a DNS format name at the specified offset of self.\\r\\n     * @param self The byte array to read a name from.\\r\\n     * @param offset The offset to start reading at.\\r\\n     * @return ret The name.\\r\\n     */\\r\\n    function readName(\\r\\n        bytes memory self,\\r\\n        uint256 offset\\r\\n    ) internal pure returns (bytes memory ret) {\\r\\n        uint256 len = nameLength(self, offset);\\r\\n        return self.substring(offset, len);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\\r\\n     * @param self The byte array to read a name from.\\r\\n     * @param offset The offset to start reading at.\\r\\n     * @return The number of labels in the DNS name at 'offset', in bytes.\\r\\n     */\\r\\n    function labelCount(\\r\\n        bytes memory self,\\r\\n        uint256 offset\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 count = 0;\\r\\n        while (true) {\\r\\n            assert(offset < self.length);\\r\\n            uint256 labelLen = self.readUint8(offset);\\r\\n            offset += labelLen + 1;\\r\\n            if (labelLen == 0) {\\r\\n                break;\\r\\n            }\\r\\n            count += 1;\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    uint256 constant RRSIG_TYPE = 0;\\r\\n    uint256 constant RRSIG_ALGORITHM = 2;\\r\\n    uint256 constant RRSIG_LABELS = 3;\\r\\n    uint256 constant RRSIG_TTL = 4;\\r\\n    uint256 constant RRSIG_EXPIRATION = 8;\\r\\n    uint256 constant RRSIG_INCEPTION = 12;\\r\\n    uint256 constant RRSIG_KEY_TAG = 16;\\r\\n    uint256 constant RRSIG_SIGNER_NAME = 18;\\r\\n\\r\\n    struct SignedSet {\\r\\n        uint16 typeCovered;\\r\\n        uint8 algorithm;\\r\\n        uint8 labels;\\r\\n        uint32 ttl;\\r\\n        uint32 expiration;\\r\\n        uint32 inception;\\r\\n        uint16 keytag;\\r\\n        bytes signerName;\\r\\n        bytes data;\\r\\n        bytes name;\\r\\n    }\\r\\n\\r\\n    function readSignedSet(\\r\\n        bytes memory data\\r\\n    ) internal pure returns (SignedSet memory self) {\\r\\n        self.typeCovered = data.readUint16(RRSIG_TYPE);\\r\\n        self.algorithm = data.readUint8(RRSIG_ALGORITHM);\\r\\n        self.labels = data.readUint8(RRSIG_LABELS);\\r\\n        self.ttl = data.readUint32(RRSIG_TTL);\\r\\n        self.expiration = data.readUint32(RRSIG_EXPIRATION);\\r\\n        self.inception = data.readUint32(RRSIG_INCEPTION);\\r\\n        self.keytag = data.readUint16(RRSIG_KEY_TAG);\\r\\n        self.signerName = readName(data, RRSIG_SIGNER_NAME);\\r\\n        self.data = data.substring(\\r\\n            RRSIG_SIGNER_NAME + self.signerName.length,\\r\\n            data.length - RRSIG_SIGNER_NAME - self.signerName.length\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function rrs(\\r\\n        SignedSet memory rrset\\r\\n    ) internal pure returns (RRIterator memory) {\\r\\n        return iterateRRs(rrset.data, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev An iterator over resource records.\\r\\n     */\\r\\n    struct RRIterator {\\r\\n        bytes data;\\r\\n        uint256 offset;\\r\\n        uint16 dnstype;\\r\\n        uint16 class;\\r\\n        uint32 ttl;\\r\\n        uint256 rdataOffset;\\r\\n        uint256 nextOffset;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Begins iterating over resource records.\\r\\n     * @param self The byte string to read from.\\r\\n     * @param offset The offset to start reading at.\\r\\n     * @return ret An iterator object.\\r\\n     */\\r\\n    function iterateRRs(\\r\\n        bytes memory self,\\r\\n        uint256 offset\\r\\n    ) internal pure returns (RRIterator memory ret) {\\r\\n        ret.data = self;\\r\\n        ret.nextOffset = offset;\\r\\n        next(ret);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true iff there are more RRs to iterate.\\r\\n     * @param iter The iterator to check.\\r\\n     * @return True iff the iterator has finished.\\r\\n     */\\r\\n    function done(RRIterator memory iter) internal pure returns (bool) {\\r\\n        return iter.offset >= iter.data.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves the iterator to the next resource record.\\r\\n     * @param iter The iterator to advance.\\r\\n     */\\r\\n    function next(RRIterator memory iter) internal pure {\\r\\n        iter.offset = iter.nextOffset;\\r\\n        if (iter.offset >= iter.data.length) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // Skip the name\\r\\n        uint256 off = iter.offset + nameLength(iter.data, iter.offset);\\r\\n\\r\\n        // Read type, class, and ttl\\r\\n        iter.dnstype = iter.data.readUint16(off);\\r\\n        off += 2;\\r\\n        iter.class = iter.data.readUint16(off);\\r\\n        off += 2;\\r\\n        iter.ttl = iter.data.readUint32(off);\\r\\n        off += 4;\\r\\n\\r\\n        // Read the rdata\\r\\n        uint256 rdataLength = iter.data.readUint16(off);\\r\\n        off += 2;\\r\\n        iter.rdataOffset = off;\\r\\n        iter.nextOffset = off + rdataLength;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the current record.\\r\\n     * @param iter The iterator.\\r\\n     * @return A new bytes object containing the owner name from the RR.\\r\\n     */\\r\\n    function name(RRIterator memory iter) internal pure returns (bytes memory) {\\r\\n        return\\r\\n            iter.data.substring(\\r\\n                iter.offset,\\r\\n                nameLength(iter.data, iter.offset)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the rdata portion of the current record.\\r\\n     * @param iter The iterator.\\r\\n     * @return A new bytes object containing the RR's RDATA.\\r\\n     */\\r\\n    function rdata(\\r\\n        RRIterator memory iter\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        return\\r\\n            iter.data.substring(\\r\\n                iter.rdataOffset,\\r\\n                iter.nextOffset - iter.rdataOffset\\r\\n            );\\r\\n    }\\r\\n\\r\\n    uint256 constant DNSKEY_FLAGS = 0;\\r\\n    uint256 constant DNSKEY_PROTOCOL = 2;\\r\\n    uint256 constant DNSKEY_ALGORITHM = 3;\\r\\n    uint256 constant DNSKEY_PUBKEY = 4;\\r\\n\\r\\n    struct DNSKEY {\\r\\n        uint16 flags;\\r\\n        uint8 protocol;\\r\\n        uint8 algorithm;\\r\\n        bytes publicKey;\\r\\n    }\\r\\n\\r\\n    function readDNSKEY(\\r\\n        bytes memory data,\\r\\n        uint256 offset,\\r\\n        uint256 length\\r\\n    ) internal pure returns (DNSKEY memory self) {\\r\\n        self.flags = data.readUint16(offset + DNSKEY_FLAGS);\\r\\n        self.protocol = data.readUint8(offset + DNSKEY_PROTOCOL);\\r\\n        self.algorithm = data.readUint8(offset + DNSKEY_ALGORITHM);\\r\\n        self.publicKey = data.substring(\\r\\n            offset + DNSKEY_PUBKEY,\\r\\n            length - DNSKEY_PUBKEY\\r\\n        );\\r\\n    }\\r\\n\\r\\n    uint256 constant DS_KEY_TAG = 0;\\r\\n    uint256 constant DS_ALGORITHM = 2;\\r\\n    uint256 constant DS_DIGEST_TYPE = 3;\\r\\n    uint256 constant DS_DIGEST = 4;\\r\\n\\r\\n    struct DS {\\r\\n        uint16 keytag;\\r\\n        uint8 algorithm;\\r\\n        uint8 digestType;\\r\\n        bytes digest;\\r\\n    }\\r\\n\\r\\n    function readDS(\\r\\n        bytes memory data,\\r\\n        uint256 offset,\\r\\n        uint256 length\\r\\n    ) internal pure returns (DS memory self) {\\r\\n        self.keytag = data.readUint16(offset + DS_KEY_TAG);\\r\\n        self.algorithm = data.readUint8(offset + DS_ALGORITHM);\\r\\n        self.digestType = data.readUint8(offset + DS_DIGEST_TYPE);\\r\\n        self.digest = data.substring(offset + DS_DIGEST, length - DS_DIGEST);\\r\\n    }\\r\\n\\r\\n    function isSubdomainOf(\\r\\n        bytes memory self,\\r\\n        bytes memory other\\r\\n    ) internal pure returns (bool) {\\r\\n        uint256 off = 0;\\r\\n        uint256 counts = labelCount(self, 0);\\r\\n        uint256 othercounts = labelCount(other, 0);\\r\\n\\r\\n        while (counts > othercounts) {\\r\\n            off = progress(self, off);\\r\\n            counts--;\\r\\n        }\\r\\n\\r\\n        return self.equals(off, other, 0);\\r\\n    }\\r\\n\\r\\n    function compareNames(\\r\\n        bytes memory self,\\r\\n        bytes memory other\\r\\n    ) internal pure returns (int256) {\\r\\n        if (self.equals(other)) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 off;\\r\\n        uint256 otheroff;\\r\\n        uint256 prevoff;\\r\\n        uint256 otherprevoff;\\r\\n        uint256 counts = labelCount(self, 0);\\r\\n        uint256 othercounts = labelCount(other, 0);\\r\\n\\r\\n        // Keep removing labels from the front of the name until both names are equal length\\r\\n        while (counts > othercounts) {\\r\\n            prevoff = off;\\r\\n            off = progress(self, off);\\r\\n            counts--;\\r\\n        }\\r\\n\\r\\n        while (othercounts > counts) {\\r\\n            otherprevoff = otheroff;\\r\\n            otheroff = progress(other, otheroff);\\r\\n            othercounts--;\\r\\n        }\\r\\n\\r\\n        // Compare the last nonequal labels to each other\\r\\n        while (counts > 0 && !self.equals(off, other, otheroff)) {\\r\\n            prevoff = off;\\r\\n            off = progress(self, off);\\r\\n            otherprevoff = otheroff;\\r\\n            otheroff = progress(other, otheroff);\\r\\n            counts -= 1;\\r\\n        }\\r\\n\\r\\n        if (off == 0) {\\r\\n            return -1;\\r\\n        }\\r\\n        if (otheroff == 0) {\\r\\n            return 1;\\r\\n        }\\r\\n\\r\\n        return\\r\\n            self.compare(\\r\\n                prevoff + 1,\\r\\n                self.readUint8(prevoff),\\r\\n                other,\\r\\n                otherprevoff + 1,\\r\\n                other.readUint8(otherprevoff)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Compares two serial numbers using RFC1982 serial number math.\\r\\n     */\\r\\n    function serialNumberGte(\\r\\n        uint32 i1,\\r\\n        uint32 i2\\r\\n    ) internal pure returns (bool) {\\r\\n        unchecked {\\r\\n            return int32(i1) - int32(i2) >= 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function progress(\\r\\n        bytes memory body,\\r\\n        uint256 off\\r\\n    ) internal pure returns (uint256) {\\r\\n        return off + 1 + body.readUint8(off);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Computes the keytag for a chunk of data.\\r\\n     * @param data The data to compute a keytag for.\\r\\n     * @return The computed key tag.\\r\\n     */\\r\\n    function computeKeytag(bytes memory data) internal pure returns (uint16) {\\r\\n        /* This function probably deserves some explanation.\\r\\n         * The DNSSEC keytag function is a checksum that relies on summing up individual bytes\\r\\n         * from the input string, with some mild bitshifting. Here's a Naive solidity implementation:\\r\\n         *\\r\\n         *     function computeKeytag(bytes memory data) internal pure returns (uint16) {\\r\\n         *         uint ac;\\r\\n         *         for (uint i = 0; i < data.length; i++) {\\r\\n         *             ac += i & 1 == 0 ? uint16(data.readUint8(i)) << 8 : data.readUint8(i);\\r\\n         *         }\\r\\n         *         return uint16(ac + (ac >> 16));\\r\\n         *     }\\r\\n         *\\r\\n         * The EVM, with its 256 bit words, is exceedingly inefficient at doing byte-by-byte operations;\\r\\n         * the code above, on reasonable length inputs, consumes over 100k gas. But we can make the EVM's\\r\\n         * large words work in our favour.\\r\\n         *\\r\\n         * The code below works by treating the input as a series of 256 bit words. It first masks out\\r\\n         * even and odd bytes from each input word, adding them to two separate accumulators `ac1` and `ac2`.\\r\\n         * The bytes are separated by empty bytes, so as long as no individual sum exceeds 2^16-1, we're\\r\\n         * effectively summing 16 different numbers with each EVM ADD opcode.\\r\\n         *\\r\\n         * Once it's added up all the inputs, it has to add all the 16 bit values in `ac1` and `ac2` together.\\r\\n         * It does this using the same trick - mask out every other value, shift to align them, add them together.\\r\\n         * After the first addition on both accumulators, there's enough room to add the two accumulators together,\\r\\n         * and the remaining sums can be done just on ac1.\\r\\n         */\\r\\n        unchecked {\\r\\n            require(data.length <= 8192, \\\"Long keys not permitted\\\");\\r\\n            uint256 ac1;\\r\\n            uint256 ac2;\\r\\n            for (uint256 i = 0; i < data.length + 31; i += 32) {\\r\\n                uint256 word;\\r\\n                assembly {\\r\\n                    word := mload(add(add(data, 32), i))\\r\\n                }\\r\\n                if (i + 32 > data.length) {\\r\\n                    uint256 unused = 256 - (data.length - i) * 8;\\r\\n                    word = (word >> unused) << unused;\\r\\n                }\\r\\n                ac1 +=\\r\\n                    (word &\\r\\n                        0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >>\\r\\n                    8;\\r\\n                ac2 += (word &\\r\\n                    0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF);\\r\\n            }\\r\\n            ac1 =\\r\\n                (ac1 &\\r\\n                    0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) +\\r\\n                ((ac1 &\\r\\n                    0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >>\\r\\n                    16);\\r\\n            ac2 =\\r\\n                (ac2 &\\r\\n                    0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) +\\r\\n                ((ac2 &\\r\\n                    0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >>\\r\\n                    16);\\r\\n            ac1 = (ac1 << 8) + ac2;\\r\\n            ac1 =\\r\\n                (ac1 &\\r\\n                    0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) +\\r\\n                ((ac1 &\\r\\n                    0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >>\\r\\n                    32);\\r\\n            ac1 =\\r\\n                (ac1 &\\r\\n                    0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) +\\r\\n                ((ac1 &\\r\\n                    0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >>\\r\\n                    64);\\r\\n            ac1 =\\r\\n                (ac1 &\\r\\n                    0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) +\\r\\n                (ac1 >> 128);\\r\\n            ac1 += (ac1 >> 16) & 0xFFFF;\\r\\n            return uint16(ac1);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2a03e8ba552ffd48bc87c9c7c49de7f34ee1da5e5cc09458280f5fedeb7e8d96\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\ninterface ENS {\\r\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\r\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\r\\n\\r\\n    // Logged when the owner of a node transfers ownership to a new account.\\r\\n    event Transfer(bytes32 indexed node, address owner);\\r\\n\\r\\n    // Logged when the resolver for a node changes.\\r\\n    event NewResolver(bytes32 indexed node, address resolver);\\r\\n\\r\\n    // Logged when the TTL of a node changes\\r\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\r\\n\\r\\n    // Logged when an operator is added or removed.\\r\\n    event ApprovalForAll(\\r\\n        address indexed owner,\\r\\n        address indexed operator,\\r\\n        bool approved\\r\\n    );\\r\\n\\r\\n    function setRecord(\\r\\n        bytes32 node,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) external;\\r\\n\\r\\n    function setSubnodeRecord(\\r\\n        bytes32 node,\\r\\n        bytes32 label,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) external;\\r\\n\\r\\n    function setSubnodeOwner(\\r\\n        bytes32 node,\\r\\n        bytes32 label,\\r\\n        address owner\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function setResolver(bytes32 node, address resolver) external;\\r\\n\\r\\n    function setOwner(bytes32 node, address owner) external;\\r\\n\\r\\n    function setTTL(bytes32 node, uint64 ttl) external;\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    function owner(bytes32 node) external view returns (address);\\r\\n\\r\\n    function resolver(bytes32 node) external view returns (address);\\r\\n\\r\\n    function ttl(bytes32 node) external view returns (uint64);\\r\\n\\r\\n    function recordExists(bytes32 node) external view returns (bool);\\r\\n\\r\\n    function isApprovedForAll(\\r\\n        address owner,\\r\\n        address operator\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xb1fece691daf62005e0103e7699d25a2a9e0853b1eb59fd0a43042db6d43b081\"},\"contracts/registry/ENSRegistry.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"./ENS.sol\\\";\\r\\n\\r\\n/**\\r\\n * The ENS registry contract.\\r\\n */\\r\\ncontract ENSRegistry is ENS {\\r\\n    struct Record {\\r\\n        address owner;\\r\\n        address resolver;\\r\\n        uint64 ttl;\\r\\n    }\\r\\n\\r\\n    mapping(bytes32 => Record) records;\\r\\n    mapping(address => mapping(address => bool)) operators;\\r\\n\\r\\n    // Permits modifications only by the owner of the specified node.\\r\\n    modifier authorised(bytes32 node) {\\r\\n        address owner = records[node].owner;\\r\\n        require(owner == msg.sender || operators[owner][msg.sender]);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Constructs a new ENS registry.\\r\\n     */\\r\\n    constructor() public {\\r\\n        records[0x0].owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the record for a node.\\r\\n     * @param node The node to update.\\r\\n     * @param owner The address of the new owner.\\r\\n     * @param resolver The address of the resolver.\\r\\n     * @param ttl The TTL in seconds.\\r\\n     */\\r\\n    function setRecord(\\r\\n        bytes32 node,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) external virtual override {\\r\\n        setOwner(node, owner);\\r\\n        _setResolverAndTTL(node, resolver, ttl);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the record for a subnode.\\r\\n     * @param node The parent node.\\r\\n     * @param label The hash of the label specifying the subnode.\\r\\n     * @param owner The address of the new owner.\\r\\n     * @param resolver The address of the resolver.\\r\\n     * @param ttl The TTL in seconds.\\r\\n     */\\r\\n    function setSubnodeRecord(\\r\\n        bytes32 node,\\r\\n        bytes32 label,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) external virtual override {\\r\\n        bytes32 subnode = setSubnodeOwner(node, label, owner);\\r\\n        _setResolverAndTTL(subnode, resolver, ttl);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of a node to a new address. May only be called by the current owner of the node.\\r\\n     * @param node The node to transfer ownership of.\\r\\n     * @param owner The address of the new owner.\\r\\n     */\\r\\n    function setOwner(\\r\\n        bytes32 node,\\r\\n        address owner\\r\\n    ) public virtual override authorised(node) {\\r\\n        _setOwner(node, owner);\\r\\n        emit Transfer(node, owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.\\r\\n     * @param node The parent node.\\r\\n     * @param label The hash of the label specifying the subnode.\\r\\n     * @param owner The address of the new owner.\\r\\n     */\\r\\n    function setSubnodeOwner(\\r\\n        bytes32 node,\\r\\n        bytes32 label,\\r\\n        address owner\\r\\n    ) public virtual override authorised(node) returns (bytes32) {\\r\\n        bytes32 subnode = keccak256(abi.encodePacked(node, label));\\r\\n        _setOwner(subnode, owner);\\r\\n        emit NewOwner(node, label, owner);\\r\\n        return subnode;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the resolver address for the specified node.\\r\\n     * @param node The node to update.\\r\\n     * @param resolver The address of the resolver.\\r\\n     */\\r\\n    function setResolver(\\r\\n        bytes32 node,\\r\\n        address resolver\\r\\n    ) public virtual override authorised(node) {\\r\\n        emit NewResolver(node, resolver);\\r\\n        records[node].resolver = resolver;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the TTL for the specified node.\\r\\n     * @param node The node to update.\\r\\n     * @param ttl The TTL in seconds.\\r\\n     */\\r\\n    function setTTL(\\r\\n        bytes32 node,\\r\\n        uint64 ttl\\r\\n    ) public virtual override authorised(node) {\\r\\n        emit NewTTL(node, ttl);\\r\\n        records[node].ttl = ttl;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Enable or disable approval for a third party (\\\"operator\\\") to manage\\r\\n     *  all of `msg.sender`'s ENS records. Emits the ApprovalForAll event.\\r\\n     * @param operator Address to add to the set of authorized operators.\\r\\n     * @param approved True if the operator is approved, false to revoke approval.\\r\\n     */\\r\\n    function setApprovalForAll(\\r\\n        address operator,\\r\\n        bool approved\\r\\n    ) external virtual override {\\r\\n        operators[msg.sender][operator] = approved;\\r\\n        emit ApprovalForAll(msg.sender, operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address that owns the specified node.\\r\\n     * @param node The specified node.\\r\\n     * @return address of the owner.\\r\\n     */\\r\\n    function owner(\\r\\n        bytes32 node\\r\\n    ) public view virtual override returns (address) {\\r\\n        address addr = records[node].owner;\\r\\n        if (addr == address(this)) {\\r\\n            return address(0x0);\\r\\n        }\\r\\n\\r\\n        return addr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the resolver for the specified node.\\r\\n     * @param node The specified node.\\r\\n     * @return address of the resolver.\\r\\n     */\\r\\n    function resolver(\\r\\n        bytes32 node\\r\\n    ) public view virtual override returns (address) {\\r\\n        return records[node].resolver;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the TTL of a node, and any records associated with it.\\r\\n     * @param node The specified node.\\r\\n     * @return ttl of the node.\\r\\n     */\\r\\n    function ttl(bytes32 node) public view virtual override returns (uint64) {\\r\\n        return records[node].ttl;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether a record has been imported to the registry.\\r\\n     * @param node The specified node.\\r\\n     * @return Bool if record exists\\r\\n     */\\r\\n    function recordExists(\\r\\n        bytes32 node\\r\\n    ) public view virtual override returns (bool) {\\r\\n        return records[node].owner != address(0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Query if an address is an authorized operator for another address.\\r\\n     * @param owner The address that owns the records.\\r\\n     * @param operator The address that acts on behalf of the owner.\\r\\n     * @return True if `operator` is an approved operator for `owner`, false otherwise.\\r\\n     */\\r\\n    function isApprovedForAll(\\r\\n        address owner,\\r\\n        address operator\\r\\n    ) external view virtual override returns (bool) {\\r\\n        return operators[owner][operator];\\r\\n    }\\r\\n\\r\\n    function _setOwner(bytes32 node, address owner) internal virtual {\\r\\n        records[node].owner = owner;\\r\\n    }\\r\\n\\r\\n    function _setResolverAndTTL(\\r\\n        bytes32 node,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) internal {\\r\\n        if (resolver != records[node].resolver) {\\r\\n            records[node].resolver = resolver;\\r\\n            emit NewResolver(node, resolver);\\r\\n        }\\r\\n\\r\\n        if (ttl != records[node].ttl) {\\r\\n            records[node].ttl = ttl;\\r\\n            emit NewTTL(node, ttl);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x48e70e60238d9625d131e2e1ac7c488da00856b606ff27c25e314283d69a0f44\"},\"contracts/resolvers/ResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"./profiles/IVersionableResolver.sol\\\";\\r\\n\\r\\nabstract contract ResolverBase is ERC165, IVersionableResolver {\\r\\n    mapping(bytes32 => uint64) public recordVersions;\\r\\n\\r\\n    function isAuthorised(bytes32 node) internal view virtual returns (bool);\\r\\n\\r\\n    modifier authorised(bytes32 node) {\\r\\n        require(isAuthorised(node));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Increments the record version associated with an ENS node.\\r\\n     * May only be called by the owner of that node in the ENS registry.\\r\\n     * @param node The node to update.\\r\\n     */\\r\\n    function clearRecords(bytes32 node) public virtual authorised(node) {\\r\\n        recordVersions[node]++;\\r\\n        emit VersionChanged(node, recordVersions[node]);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceID\\r\\n    ) public view virtual override returns (bool) {\\r\\n        return\\r\\n            interfaceID == type(IVersionableResolver).interfaceId ||\\r\\n            super.supportsInterface(interfaceID);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7ab26aeeb5b3b3641f570cc26fb7881759861043981801a2f52a07435583cf78\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/AddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"../ResolverBase.sol\\\";\\r\\nimport \\\"./IAddrResolver.sol\\\";\\r\\nimport \\\"./IAddressResolver.sol\\\";\\r\\n\\r\\nabstract contract AddrResolver is\\r\\n    IAddrResolver,\\r\\n    IAddressResolver,\\r\\n    ResolverBase\\r\\n{\\r\\n    uint256 private constant COIN_TYPE_ETH = 60;\\r\\n\\r\\n    mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes))) versionable_addresses;\\r\\n\\r\\n    /**\\r\\n     * Sets the address associated with an ENS node.\\r\\n     * May only be called by the owner of that node in the ENS registry.\\r\\n     * @param node The node to update.\\r\\n     * @param a The address to set.\\r\\n     */\\r\\n    function setAddr(\\r\\n        bytes32 node,\\r\\n        address a\\r\\n    ) external virtual authorised(node) {\\r\\n        setAddr(node, COIN_TYPE_ETH, addressToBytes(a));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the address associated with an ENS node.\\r\\n     * @param node The ENS node to query.\\r\\n     * @return The associated address.\\r\\n     */\\r\\n    function addr(\\r\\n        bytes32 node\\r\\n    ) public view virtual override returns (address payable) {\\r\\n        bytes memory a = addr(node, COIN_TYPE_ETH);\\r\\n        if (a.length == 0) {\\r\\n            return payable(0);\\r\\n        }\\r\\n        return bytesToAddress(a);\\r\\n    }\\r\\n\\r\\n    function setAddr(\\r\\n        bytes32 node,\\r\\n        uint256 coinType,\\r\\n        bytes memory a\\r\\n    ) public virtual authorised(node) {\\r\\n        emit AddressChanged(node, coinType, a);\\r\\n        if (coinType == COIN_TYPE_ETH) {\\r\\n            emit AddrChanged(node, bytesToAddress(a));\\r\\n        }\\r\\n        versionable_addresses[recordVersions[node]][node][coinType] = a;\\r\\n    }\\r\\n\\r\\n    function addr(\\r\\n        bytes32 node,\\r\\n        uint256 coinType\\r\\n    ) public view virtual override returns (bytes memory) {\\r\\n        return versionable_addresses[recordVersions[node]][node][coinType];\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceID\\r\\n    ) public view virtual override returns (bool) {\\r\\n        return\\r\\n            interfaceID == type(IAddrResolver).interfaceId ||\\r\\n            interfaceID == type(IAddressResolver).interfaceId ||\\r\\n            super.supportsInterface(interfaceID);\\r\\n    }\\r\\n\\r\\n    function bytesToAddress(\\r\\n        bytes memory b\\r\\n    ) internal pure returns (address payable a) {\\r\\n        require(b.length == 20);\\r\\n        assembly {\\r\\n            a := div(mload(add(b, 32)), exp(256, 12))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addressToBytes(address a) internal pure returns (bytes memory b) {\\r\\n        b = new bytes(20);\\r\\n        assembly {\\r\\n            mstore(add(b, 32), mul(a, exp(256, 12)))\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2f29923d55c19ec14c77693d0e62900df9a3c7ad5241769c755b0b45d5599e97\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\n/**\\r\\n * Interface for the legacy (ETH-only) addr function.\\r\\n */\\r\\ninterface IAddrResolver {\\r\\n    event AddrChanged(bytes32 indexed node, address a);\\r\\n\\r\\n    /**\\r\\n     * Returns the address associated with an ENS node.\\r\\n     * @param node The ENS node to query.\\r\\n     * @return The associated address.\\r\\n     */\\r\\n    function addr(bytes32 node) external view returns (address payable);\\r\\n}\\r\\n\",\"keccak256\":\"0xc28e76da1c1d807c571ad75c169fa8496a8c63f21a4955171cf36b709924de20\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\n/**\\r\\n * Interface for the new (multicoin) addr function.\\r\\n */\\r\\ninterface IAddressResolver {\\r\\n    event AddressChanged(\\r\\n        bytes32 indexed node,\\r\\n        uint256 coinType,\\r\\n        bytes newAddress\\r\\n    );\\r\\n\\r\\n    function addr(\\r\\n        bytes32 node,\\r\\n        uint256 coinType\\r\\n    ) external view returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x5040e2be35e303880581d50dbda555dd0e5f9e11f0e818e453c3bfd8b3800b95\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IVersionableResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface IVersionableResolver {\\r\\n    event VersionChanged(bytes32 indexed node, uint64 newVersion);\\r\\n\\r\\n    function recordVersions(bytes32 node) external view returns (uint64);\\r\\n}\\r\\n\",\"keccak256\":\"0x5f1b4de08824e89dd4a8e8aef8c96cfddd8579ac25e9fbb6e1efb14ba23ddea7\",\"license\":\"MIT\"},\"contracts/root/Controllable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Controllable is Ownable {\\r\\n    mapping(address => bool) public controllers;\\r\\n\\r\\n    event ControllerChanged(address indexed controller, bool enabled);\\r\\n\\r\\n    modifier onlyController() {\\r\\n        require(\\r\\n            controllers[msg.sender],\\r\\n            \\\"Controllable: Caller is not a controller\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setController(address controller, bool enabled) public onlyOwner {\\r\\n        controllers[controller] = enabled;\\r\\n        emit ControllerChanged(controller, enabled);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3447a0afba4673bd715f1f459c71831cc87e085507fb455cea97883453e63374\"},\"contracts/root/Root.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../registry/ENS.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./Controllable.sol\\\";\\r\\n\\r\\ncontract Root is Ownable, Controllable {\\r\\n    bytes32 private constant ROOT_NODE = bytes32(0);\\r\\n\\r\\n    bytes4 private constant INTERFACE_META_ID =\\r\\n        bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\r\\n\\r\\n    event TLDLocked(bytes32 indexed label);\\r\\n\\r\\n    ENS public ens;\\r\\n    mapping(bytes32 => bool) public locked;\\r\\n\\r\\n    constructor(ENS _ens) public {\\r\\n        ens = _ens;\\r\\n    }\\r\\n\\r\\n    function setSubnodeOwner(\\r\\n        bytes32 label,\\r\\n        address owner\\r\\n    ) external onlyController {\\r\\n        require(!locked[label]);\\r\\n        ens.setSubnodeOwner(ROOT_NODE, label, owner);\\r\\n    }\\r\\n\\r\\n    function setResolver(address resolver) external onlyOwner {\\r\\n        ens.setResolver(ROOT_NODE, resolver);\\r\\n    }\\r\\n\\r\\n    function lock(bytes32 label) external onlyOwner {\\r\\n        emit TLDLocked(label);\\r\\n        locked[label] = true;\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceID\\r\\n    ) external pure returns (bool) {\\r\\n        return interfaceID == INTERFACE_META_ID;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6626fc5f89b305829839c33c2f077e98f0fdb7bc75bc35d2a50aebc2a3333e29\"},\"contracts/utils/HexUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary HexUtils {\\r\\n    /**\\r\\n     * @dev Attempts to parse bytes32 from a hex string\\r\\n     * @param str The string to parse\\r\\n     * @param idx The offset to start parsing at\\r\\n     * @param lastIdx The (exclusive) last index in `str` to consider. Use `str.length` to scan the whole string.\\r\\n     */\\r\\n    function hexStringToBytes32(\\r\\n        bytes memory str,\\r\\n        uint256 idx,\\r\\n        uint256 lastIdx\\r\\n    ) internal pure returns (bytes32 r, bool valid) {\\r\\n        valid = true;\\r\\n        assembly {\\r\\n            // check that the index to read to is not past the end of the string\\r\\n            if gt(lastIdx, mload(str)) {\\r\\n                revert(0, 0)\\r\\n            }\\r\\n\\r\\n            function getHex(c) -> ascii {\\r\\n                // chars 48-57: 0-9\\r\\n                if and(gt(c, 47), lt(c, 58)) {\\r\\n                    ascii := sub(c, 48)\\r\\n                    leave\\r\\n                }\\r\\n                // chars 65-70: A-F\\r\\n                if and(gt(c, 64), lt(c, 71)) {\\r\\n                    ascii := add(sub(c, 65), 10)\\r\\n                    leave\\r\\n                }\\r\\n                // chars 97-102: a-f\\r\\n                if and(gt(c, 96), lt(c, 103)) {\\r\\n                    ascii := add(sub(c, 97), 10)\\r\\n                    leave\\r\\n                }\\r\\n                // invalid char\\r\\n                ascii := 0xff\\r\\n            }\\r\\n\\r\\n            let ptr := add(str, 32)\\r\\n            for {\\r\\n                let i := idx\\r\\n            } lt(i, lastIdx) {\\r\\n                i := add(i, 2)\\r\\n            } {\\r\\n                let byte1 := getHex(byte(0, mload(add(ptr, i))))\\r\\n                let byte2 := getHex(byte(0, mload(add(ptr, add(i, 1)))))\\r\\n                // if either byte is invalid, set invalid and break loop\\r\\n                if or(eq(byte1, 0xff), eq(byte2, 0xff)) {\\r\\n                    valid := false\\r\\n                    break\\r\\n                }\\r\\n                let combined := or(shl(4, byte1), byte2)\\r\\n                r := or(shl(8, r), combined)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Attempts to parse an address from a hex string\\r\\n     * @param str The string to parse\\r\\n     * @param idx The offset to start parsing at\\r\\n     * @param lastIdx The (exclusive) last index in `str` to consider. Use `str.length` to scan the whole string.\\r\\n     */\\r\\n    function hexToAddress(\\r\\n        bytes memory str,\\r\\n        uint256 idx,\\r\\n        uint256 lastIdx\\r\\n    ) internal pure returns (address, bool) {\\r\\n        if (lastIdx - idx < 40) return (address(0x0), false);\\r\\n        (bytes32 r, bool valid) = hexStringToBytes32(str, idx, lastIdx);\\r\\n        return (address(uint160(uint256(r))), valid);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3c88adcc0a9ffce9712f0c6ad42155bc116a4e0621baa1d661b21f4b5f6c3b16\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162002198380380620021988339810160408190526200003591620000c8565b6001600160a01b0385811660c05284811660e05283811660a052600080546001600160a01b03191691841691821790556040519081527f9176b7f47e4504df5e5516c99d90d82ac7cbd49cc77e7f22ba2ac2f2e3a3eba89060200160405180910390a16001600160a01b0316608052506200014892505050565b6001600160a01b0381168114620000c557600080fd5b50565b600080600080600060a08688031215620000e157600080fd5b8551620000ee81620000af565b60208701519095506200010181620000af565b60408701519094506200011481620000af565b60608701519093506200012781620000af565b60808701519092506200013a81620000af565b809150509295509295909350565b60805160a05160c05160e051611fca620001ce6000396000818160db01528181610b620152610c190152600081816102120152610a190152600081816101eb01526106ea0152600081816101a3015281816102fc01528181610443015281816105cd0152818161099901528181610a7001528181610b8a0152610c480152611fca6000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806329d566301161007157806329d566301461017857806330349ebe1461018b5780633f15457f1461019e5780636f951221146101c55780637dc0d1d0146101e6578063ab14ec591461020d57600080fd5b806301ffc9a7146100ae57806304f3bcec146100d657806306963218146101155780631ecfc4111461012a57806325916d411461013d575b600080fd5b6100c16100bc366004611844565b610234565b60405190151581526020015b60405180910390f35b6100fd7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100cd565b610128610123366004611a6e565b61026b565b005b610128610138366004611af7565b61042a565b61016361014b366004611b14565b60016020526000908152604090205463ffffffff1681565b60405163ffffffff90911681526020016100cd565b610128610186366004611b2d565b610589565b6000546100fd906001600160a01b031681565b6100fd7f000000000000000000000000000000000000000000000000000000000000000081565b6101d86101d3366004611b91565b610644565b6040519081526020016100cd565b6100fd7f000000000000000000000000000000000000000000000000000000000000000081565b6100fd7f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b031982166301ffc9a760e01b148061026557506001600160e01b031982166305e86a8560e31b145b92915050565b600080600061027a87876106e0565b91945092509050336001600160a01b038216146102c05760405163380fd80960e21b81523360048201526001600160a01b03821660248201526044015b60405180910390fd5b6040516305ef2c7f60e41b815260048101849052602481018390526001600160a01b0382811660448301528681166064830152600060848301527f00000000000000000000000000000000000000000000000000000000000000001690635ef2c7f09060a401600060405180830381600087803b15801561034057600080fd5b505af1158015610354573d6000803e3d6000fd5b505050506001600160a01b03841615610421576001600160a01b03851661038e57604051633c584f1360e21b815260040160405180910390fd5b604080516020810185905290810183905260009060600160408051808303601f1901815290829052805160209091012062d5fa2b60e81b8252600482018190526001600160a01b03878116602484015290925087169063d5fa2b0090604401600060405180830381600087803b15801561040757600080fd5b505af115801561041b573d6000803e3d6000fd5b50505050505b50505050505050565b6040516302571be360e01b8152600060048201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906302571be390602401602060405180830381865afa158015610492573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b69190611bc6565b90506000816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051c9190611bc6565b9050336001600160a01b0382161461053357600080fd5b600080546001600160a01b0319166001600160a01b0385169081179091556040519081527f9176b7f47e4504df5e5516c99d90d82ac7cbd49cc77e7f22ba2ac2f2e3a3eba89060200160405180910390a1505050565b600080600061059885856106e0565b6040516306ab592360e01b815260048101849052602481018390526001600160a01b03828116604483015293965091945092507f0000000000000000000000000000000000000000000000000000000000000000909116906306ab5923906064016020604051808303816000875af1158015610618573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063c9190611be3565b505050505050565b600080546040516327c482cf60e11b81526001600160a01b0390911690634f89059e90610675908590600401611c4c565b602060405180830381865afa158015610692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b69190611c5f565b6106d5578160405163072dc49760e31b81526004016102b79190611c4c565b6102658260006108eb565b60008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bdf95fef876040518263ffffffff1660e01b81526004016107349190611c81565b600060405180830381865afa158015610751573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107799190810190611d06565b9092509050600061078a8882610cdc565b60ff16905061079b88600183610d00565b945060006107ce6107ad836001611db3565b6001848c516107bc9190611dc6565b6107c69190611dc6565b8b9190610d24565b90506107d981610644565b9650600087876040516020016107f9929190918252602082015260400190565b60408051808303601f190181529181528151602092830120600081815260019093529082205490925063ffffffff16850360030b121561084c57604051632dd6a7af60e01b815260040160405180910390fd5b6000818152600160205260408120805463ffffffff191663ffffffff87161790556108778b87610da6565b90975090508061089a57604051630c4c1edf60e31b815260040160405180910390fd5b866001600160a01b0316827f87db02a0e483e2818060eddcbb3488ce44e35aff49a70d92c2aa6c8046cf01e28d886040516108d6929190611dd9565b60405180910390a35050505050509250925092565b6000806108f88484610cdc565b60ff1690508060000361090f575060009050610265565b600061092f8561091f8487611db3565b61092a906001611db3565b6108eb565b90506000610949610941866001611db3565b879085610d00565b604080516020810185905290810182905290915060600160408051601f198184030181529082905280516020909101206302571be360e01b82526004820181905294506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa1580156109e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a049190611bc6565b90506001600160a01b0381161580610a4d57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316145b15610ca95782610bee576040516302571be360e01b8152600060048201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906302571be390602401602060405180830381865afa158015610abf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae39190611bc6565b60405163232e3b3b60e21b8152600481018590523060248201529091506001600160a01b03821690638cb8ecec90604401600060405180830381600087803b158015610b2e57600080fd5b505af1158015610b42573d6000803e3d6000fd5b5050604051630c4b7b8560e11b8152600481018990526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301527f0000000000000000000000000000000000000000000000000000000000000000169250631896f70a9150604401600060405180830381600087803b158015610bd057600080fd5b505af1158015610be4573d6000803e3d6000fd5b5050505050610cd2565b6040516305ef2c7f60e41b815260048101849052602481018390523060448201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166064830152600060848301527f00000000000000000000000000000000000000000000000000000000000000001690635ef2c7f09060a401600060405180830381600087803b158015610c8c57600080fd5b505af1158015610ca0573d6000803e3d6000fd5b50505050610cd2565b6001600160a01b0381163014610cd257604051633c584f1360e21b815260040160405180910390fd5b5050505092915050565b6000828281518110610cf057610cf0611e01565b016020015160f81c905092915050565b8251600090610d0f8385611db3565b1115610d1a57600080fd5b5091016020012090565b8251606090610d338385611db3565b1115610d3e57600080fd5b60008267ffffffffffffffff811115610d5957610d5961186e565b6040519080825280601f01601f191660200182016040528015610d83576020820181803683370190505b50905060208082019086860101610d9b828287610e9c565b509095945050505050565b600080610dc6604051806040016040528060608152602001600081525090565b610dde85516005610dd79190611db3565b8290610ef2565b50604080518082019091526005815264045f656e7360d81b6020820152610e06908290610f69565b50610e118186610f69565b506000610e1e8582610f91565b90505b80515160208201511015610e8b578151610e4490610e3e83610ff2565b90611013565b600003610e7d57600080610e61878460a001518560c0015161116c565b925090508115610e7a57945060019350610e9592505050565b50505b610e86816111df565b610e21565b5060008092509250505b9250929050565b60208110610ed45781518352610eb3602084611db3565b9250610ec0602083611db3565b9150610ecd602082611dc6565b9050610e9c565b905182516020929092036101000a6000190180199091169116179052565b604080518082019091526060815260006020820152610f12602083611e17565b15610f3a57610f22602083611e17565b610f2d906020611dc6565b610f379083611db3565b91505b602080840183905260405180855260008152908184010181811015610f5e57600080fd5b604052509192915050565b604080518082019091526060815260006020820152610f8a838384516112c7565b9392505050565b610fdf6040518060e001604052806060815260200160008152602001600061ffff168152602001600061ffff168152602001600063ffffffff16815260200160008152602001600081525090565b82815260c08101829052610265816111df565b602081015181516060916102659161100a908261139d565b84519190610d24565b600061101f83836113ff565b1561102c57506000610265565b600080600080600061103f88600061141d565b9050600061104e88600061141d565b90505b8082111561107a57859350611066898761147a565b95508161107281611e39565b925050611051565b818111156110a35784925061108f888661147a565b94508061109b81611e39565b91505061107a565b6000821180156110bc57506110ba89878a8861149e565b155b156110f1578593506110ce898761147a565b95508492506110dd888661147a565b94506110ea600183611dc6565b91506110a3565b85600003611109576000199650505050505050610265565b846000036111205760019650505050505050610265565b61115f61112e856001611db3565b6111388b87610cdc565b60ff168a611147876001611db3565b6111518d89610cdc565b8e949392919060ff166114d3565b9998505050505050505050565b6000805b828410156111d05760006111848686610cdc565b60ff169050611194600186611db3565b94506000806111a4888885611651565b9250905081156111bc579350600192506111d7915050565b6111c68388611db3565b9650505050611170565b5060009050805b935093915050565b60c081015160208201819052815151116111f65750565b600061120a8260000151836020015161139d565b82602001516112199190611db3565b825190915061122890826116a5565b61ffff16604083015261123c600282611db3565b825190915061124b90826116a5565b61ffff16606083015261125f600282611db3565b825190915061126e90826116cd565b63ffffffff166080830152611284600482611db3565b825190915060009061129690836116a5565b61ffff1690506112a7600283611db3565b60a0840181905291506112ba8183611db3565b60c0909301929092525050565b60408051808201909152606081526000602082015282518211156112ea57600080fd5b83515160006112f98483611db3565b9050856020015181111561131b5761131b86611316836002611e50565b6116f7565b855180518382016020019160009180851115611335578482525b505050602086015b602086106113755780518252611354602083611db3565b9150611361602082611db3565b905061136e602087611dc6565b955061133d565b51815160001960208890036101000a0190811690199190911617905250849150509392505050565b6000815b835181106113b1576113b1611e67565b60006113bd8583610cdc565b60ff1690506113cd816001611db3565b6113d79083611db3565b9150806000036113e757506113ed565b506113a1565b6113f78382611dc6565b949350505050565b600081518351148015610f8a5750610f8a8360008460008751611714565b6000805b8351831061143157611431611e67565b600061143d8585610cdc565b60ff16905061144d816001611db3565b6114579085611db3565b9350806000036114675750610f8a565b611472600183611db3565b915050611421565b60006114868383610cdc565b60ff16611494836001611db3565b610f8a9190611db3565b60006114b783838486516114b29190611dc6565b610d00565b6114c986868789516114b29190611dc6565b1495945050505050565b85516000906114e28688611db3565b1115611516576114f28587611db3565b8751604051638a3c1cfb60e01b8152600481019290925260248201526044016102b7565b83516115228385611db3565b1115611556576115328284611db3565b8451604051638a3c1cfb60e01b8152600481019290925260248201526044016102b7565b84808310156115625750815b60208789018101908587010160005b83811015611636578251825180821461160657600060206115928589611dc6565b106115a057506000196115dc565b6001876115ae866020611db3565b6115b89190611dc6565b6115c3906008611e50565b6115ce906002611f61565b6115d89190611dc6565b1990505b60006115ec838316858416611f6d565b905080156116035797506116479650505050505050565b50505b611611602086611db3565b945061161e602085611db3565b9350505060208161162f9190611db3565b9050611571565b506116418589611f6d565b93505050505b9695505050505050565b60008061165e85856116cd565b63ffffffff1663613d307814611679575060009050806111d7565b611699611687856004611db3565b6116918587611db3565b879190611737565b91509150935093915050565b81516000906116b5836002611db3565b11156116c057600080fd5b50016002015161ffff1690565b81516000906116dd836004611db3565b11156116e857600080fd5b50016004015163ffffffff1690565b81516117038383610ef2565b5061170e8382610f69565b50505050565b6000611721848484610d00565b61172c878785610d00565b149695505050505050565b60008060286117468585611dc6565b1015611757575060009050806111d7565b600080611765878787611773565b909890975095505050505050565b825160009060019083111561178757600080fd5b6117d8565b6000603a8210602f831116156117a45750602f190190565b604782106040831116156117ba57506036190190565b606782106060831116156117d057506056190190565b5060ff919050565b60208501845b8481101561183a576117f58183015160001a61178c565b6118076001830184015160001a61178c565b60ff811460ff831417156118205760009450505061183a565b60049190911b1760089490941b93909317926002016117de565b5050935093915050565b60006020828403121561185657600080fd5b81356001600160e01b031981168114610f8a57600080fd5b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156118a7576118a761186e565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156118d6576118d661186e565b604052919050565b600067ffffffffffffffff8211156118f8576118f861186e565b50601f01601f191660200190565b600082601f83011261191757600080fd5b813561192a611925826118de565b6118ad565b81815284602083860101111561193f57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261196d57600080fd5b8135602067ffffffffffffffff8083111561198a5761198a61186e565b8260051b6119998382016118ad565b93845285810183019383810190888611156119b357600080fd5b84880192505b85831015611a4a578235848111156119d15760008081fd5b88016040818b03601f19018113156119e95760008081fd5b6119f1611884565b8783013587811115611a035760008081fd5b611a118d8a83870101611906565b825250908201359086821115611a275760008081fd5b611a358c8984860101611906565b818901528452505091840191908401906119b9565b98975050505050505050565b6001600160a01b0381168114611a6b57600080fd5b50565b60008060008060808587031215611a8457600080fd5b843567ffffffffffffffff80821115611a9c57600080fd5b611aa888838901611906565b95506020870135915080821115611abe57600080fd5b50611acb8782880161195c565b9350506040850135611adc81611a56565b91506060850135611aec81611a56565b939692955090935050565b600060208284031215611b0957600080fd5b8135610f8a81611a56565b600060208284031215611b2657600080fd5b5035919050565b60008060408385031215611b4057600080fd5b823567ffffffffffffffff80821115611b5857600080fd5b611b6486838701611906565b93506020850135915080821115611b7a57600080fd5b50611b878582860161195c565b9150509250929050565b600060208284031215611ba357600080fd5b813567ffffffffffffffff811115611bba57600080fd5b6113f784828501611906565b600060208284031215611bd857600080fd5b8151610f8a81611a56565b600060208284031215611bf557600080fd5b5051919050565b60005b83811015611c17578181015183820152602001611bff565b50506000910152565b60008151808452611c38816020860160208601611bfc565b601f01601f19169290920160200192915050565b602081526000610f8a6020830184611c20565b600060208284031215611c7157600080fd5b81518015158114610f8a57600080fd5b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015611cf857888303603f1901855281518051878552611ccc88860182611c20565b91890151858303868b0152919050611ce48183611c20565b968901969450505090860190600101611ca8565b509098975050505050505050565b60008060408385031215611d1957600080fd5b825167ffffffffffffffff811115611d3057600080fd5b8301601f81018513611d4157600080fd5b8051611d4f611925826118de565b818152866020838501011115611d6457600080fd5b611d75826020830160208601611bfc565b809450505050602083015163ffffffff81168114611d9257600080fd5b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561026557610265611d9d565b8181038181111561026557610265611d9d565b604081526000611dec6040830185611c20565b905063ffffffff831660208301529392505050565b634e487b7160e01b600052603260045260246000fd5b600082611e3457634e487b7160e01b600052601260045260246000fd5b500690565b600081611e4857611e48611d9d565b506000190190565b808202811582820484141761026557610265611d9d565b634e487b7160e01b600052600160045260246000fd5b600181815b80851115611eb8578160001904821115611e9e57611e9e611d9d565b80851615611eab57918102915b93841c9390800290611e82565b509250929050565b600082611ecf57506001610265565b81611edc57506000610265565b8160018114611ef25760028114611efc57611f18565b6001915050610265565b60ff841115611f0d57611f0d611d9d565b50506001821b610265565b5060208310610133831016604e8410600b8410161715611f3b575081810a610265565b611f458383611e7d565b8060001904821115611f5957611f59611d9d565b029392505050565b6000610f8a8383611ec0565b8181036000831280158383131683831282161715611f8d57611f8d611d9d565b509291505056fea264697066735822122077685672495bd2bac6025e69fa60c5d5426893a691a8274be25a5bc369c59af964736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c806329d566301161007157806329d566301461017857806330349ebe1461018b5780633f15457f1461019e5780636f951221146101c55780637dc0d1d0146101e6578063ab14ec591461020d57600080fd5b806301ffc9a7146100ae57806304f3bcec146100d657806306963218146101155780631ecfc4111461012a57806325916d411461013d575b600080fd5b6100c16100bc366004611844565b610234565b60405190151581526020015b60405180910390f35b6100fd7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100cd565b610128610123366004611a6e565b61026b565b005b610128610138366004611af7565b61042a565b61016361014b366004611b14565b60016020526000908152604090205463ffffffff1681565b60405163ffffffff90911681526020016100cd565b610128610186366004611b2d565b610589565b6000546100fd906001600160a01b031681565b6100fd7f000000000000000000000000000000000000000000000000000000000000000081565b6101d86101d3366004611b91565b610644565b6040519081526020016100cd565b6100fd7f000000000000000000000000000000000000000000000000000000000000000081565b6100fd7f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b031982166301ffc9a760e01b148061026557506001600160e01b031982166305e86a8560e31b145b92915050565b600080600061027a87876106e0565b91945092509050336001600160a01b038216146102c05760405163380fd80960e21b81523360048201526001600160a01b03821660248201526044015b60405180910390fd5b6040516305ef2c7f60e41b815260048101849052602481018390526001600160a01b0382811660448301528681166064830152600060848301527f00000000000000000000000000000000000000000000000000000000000000001690635ef2c7f09060a401600060405180830381600087803b15801561034057600080fd5b505af1158015610354573d6000803e3d6000fd5b505050506001600160a01b03841615610421576001600160a01b03851661038e57604051633c584f1360e21b815260040160405180910390fd5b604080516020810185905290810183905260009060600160408051808303601f1901815290829052805160209091012062d5fa2b60e81b8252600482018190526001600160a01b03878116602484015290925087169063d5fa2b0090604401600060405180830381600087803b15801561040757600080fd5b505af115801561041b573d6000803e3d6000fd5b50505050505b50505050505050565b6040516302571be360e01b8152600060048201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906302571be390602401602060405180830381865afa158015610492573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b69190611bc6565b90506000816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051c9190611bc6565b9050336001600160a01b0382161461053357600080fd5b600080546001600160a01b0319166001600160a01b0385169081179091556040519081527f9176b7f47e4504df5e5516c99d90d82ac7cbd49cc77e7f22ba2ac2f2e3a3eba89060200160405180910390a1505050565b600080600061059885856106e0565b6040516306ab592360e01b815260048101849052602481018390526001600160a01b03828116604483015293965091945092507f0000000000000000000000000000000000000000000000000000000000000000909116906306ab5923906064016020604051808303816000875af1158015610618573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063c9190611be3565b505050505050565b600080546040516327c482cf60e11b81526001600160a01b0390911690634f89059e90610675908590600401611c4c565b602060405180830381865afa158015610692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b69190611c5f565b6106d5578160405163072dc49760e31b81526004016102b79190611c4c565b6102658260006108eb565b60008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bdf95fef876040518263ffffffff1660e01b81526004016107349190611c81565b600060405180830381865afa158015610751573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107799190810190611d06565b9092509050600061078a8882610cdc565b60ff16905061079b88600183610d00565b945060006107ce6107ad836001611db3565b6001848c516107bc9190611dc6565b6107c69190611dc6565b8b9190610d24565b90506107d981610644565b9650600087876040516020016107f9929190918252602082015260400190565b60408051808303601f190181529181528151602092830120600081815260019093529082205490925063ffffffff16850360030b121561084c57604051632dd6a7af60e01b815260040160405180910390fd5b6000818152600160205260408120805463ffffffff191663ffffffff87161790556108778b87610da6565b90975090508061089a57604051630c4c1edf60e31b815260040160405180910390fd5b866001600160a01b0316827f87db02a0e483e2818060eddcbb3488ce44e35aff49a70d92c2aa6c8046cf01e28d886040516108d6929190611dd9565b60405180910390a35050505050509250925092565b6000806108f88484610cdc565b60ff1690508060000361090f575060009050610265565b600061092f8561091f8487611db3565b61092a906001611db3565b6108eb565b90506000610949610941866001611db3565b879085610d00565b604080516020810185905290810182905290915060600160408051601f198184030181529082905280516020909101206302571be360e01b82526004820181905294506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa1580156109e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a049190611bc6565b90506001600160a01b0381161580610a4d57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316145b15610ca95782610bee576040516302571be360e01b8152600060048201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906302571be390602401602060405180830381865afa158015610abf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae39190611bc6565b60405163232e3b3b60e21b8152600481018590523060248201529091506001600160a01b03821690638cb8ecec90604401600060405180830381600087803b158015610b2e57600080fd5b505af1158015610b42573d6000803e3d6000fd5b5050604051630c4b7b8560e11b8152600481018990526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301527f0000000000000000000000000000000000000000000000000000000000000000169250631896f70a9150604401600060405180830381600087803b158015610bd057600080fd5b505af1158015610be4573d6000803e3d6000fd5b5050505050610cd2565b6040516305ef2c7f60e41b815260048101849052602481018390523060448201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166064830152600060848301527f00000000000000000000000000000000000000000000000000000000000000001690635ef2c7f09060a401600060405180830381600087803b158015610c8c57600080fd5b505af1158015610ca0573d6000803e3d6000fd5b50505050610cd2565b6001600160a01b0381163014610cd257604051633c584f1360e21b815260040160405180910390fd5b5050505092915050565b6000828281518110610cf057610cf0611e01565b016020015160f81c905092915050565b8251600090610d0f8385611db3565b1115610d1a57600080fd5b5091016020012090565b8251606090610d338385611db3565b1115610d3e57600080fd5b60008267ffffffffffffffff811115610d5957610d5961186e565b6040519080825280601f01601f191660200182016040528015610d83576020820181803683370190505b50905060208082019086860101610d9b828287610e9c565b509095945050505050565b600080610dc6604051806040016040528060608152602001600081525090565b610dde85516005610dd79190611db3565b8290610ef2565b50604080518082019091526005815264045f656e7360d81b6020820152610e06908290610f69565b50610e118186610f69565b506000610e1e8582610f91565b90505b80515160208201511015610e8b578151610e4490610e3e83610ff2565b90611013565b600003610e7d57600080610e61878460a001518560c0015161116c565b925090508115610e7a57945060019350610e9592505050565b50505b610e86816111df565b610e21565b5060008092509250505b9250929050565b60208110610ed45781518352610eb3602084611db3565b9250610ec0602083611db3565b9150610ecd602082611dc6565b9050610e9c565b905182516020929092036101000a6000190180199091169116179052565b604080518082019091526060815260006020820152610f12602083611e17565b15610f3a57610f22602083611e17565b610f2d906020611dc6565b610f379083611db3565b91505b602080840183905260405180855260008152908184010181811015610f5e57600080fd5b604052509192915050565b604080518082019091526060815260006020820152610f8a838384516112c7565b9392505050565b610fdf6040518060e001604052806060815260200160008152602001600061ffff168152602001600061ffff168152602001600063ffffffff16815260200160008152602001600081525090565b82815260c08101829052610265816111df565b602081015181516060916102659161100a908261139d565b84519190610d24565b600061101f83836113ff565b1561102c57506000610265565b600080600080600061103f88600061141d565b9050600061104e88600061141d565b90505b8082111561107a57859350611066898761147a565b95508161107281611e39565b925050611051565b818111156110a35784925061108f888661147a565b94508061109b81611e39565b91505061107a565b6000821180156110bc57506110ba89878a8861149e565b155b156110f1578593506110ce898761147a565b95508492506110dd888661147a565b94506110ea600183611dc6565b91506110a3565b85600003611109576000199650505050505050610265565b846000036111205760019650505050505050610265565b61115f61112e856001611db3565b6111388b87610cdc565b60ff168a611147876001611db3565b6111518d89610cdc565b8e949392919060ff166114d3565b9998505050505050505050565b6000805b828410156111d05760006111848686610cdc565b60ff169050611194600186611db3565b94506000806111a4888885611651565b9250905081156111bc579350600192506111d7915050565b6111c68388611db3565b9650505050611170565b5060009050805b935093915050565b60c081015160208201819052815151116111f65750565b600061120a8260000151836020015161139d565b82602001516112199190611db3565b825190915061122890826116a5565b61ffff16604083015261123c600282611db3565b825190915061124b90826116a5565b61ffff16606083015261125f600282611db3565b825190915061126e90826116cd565b63ffffffff166080830152611284600482611db3565b825190915060009061129690836116a5565b61ffff1690506112a7600283611db3565b60a0840181905291506112ba8183611db3565b60c0909301929092525050565b60408051808201909152606081526000602082015282518211156112ea57600080fd5b83515160006112f98483611db3565b9050856020015181111561131b5761131b86611316836002611e50565b6116f7565b855180518382016020019160009180851115611335578482525b505050602086015b602086106113755780518252611354602083611db3565b9150611361602082611db3565b905061136e602087611dc6565b955061133d565b51815160001960208890036101000a0190811690199190911617905250849150509392505050565b6000815b835181106113b1576113b1611e67565b60006113bd8583610cdc565b60ff1690506113cd816001611db3565b6113d79083611db3565b9150806000036113e757506113ed565b506113a1565b6113f78382611dc6565b949350505050565b600081518351148015610f8a5750610f8a8360008460008751611714565b6000805b8351831061143157611431611e67565b600061143d8585610cdc565b60ff16905061144d816001611db3565b6114579085611db3565b9350806000036114675750610f8a565b611472600183611db3565b915050611421565b60006114868383610cdc565b60ff16611494836001611db3565b610f8a9190611db3565b60006114b783838486516114b29190611dc6565b610d00565b6114c986868789516114b29190611dc6565b1495945050505050565b85516000906114e28688611db3565b1115611516576114f28587611db3565b8751604051638a3c1cfb60e01b8152600481019290925260248201526044016102b7565b83516115228385611db3565b1115611556576115328284611db3565b8451604051638a3c1cfb60e01b8152600481019290925260248201526044016102b7565b84808310156115625750815b60208789018101908587010160005b83811015611636578251825180821461160657600060206115928589611dc6565b106115a057506000196115dc565b6001876115ae866020611db3565b6115b89190611dc6565b6115c3906008611e50565b6115ce906002611f61565b6115d89190611dc6565b1990505b60006115ec838316858416611f6d565b905080156116035797506116479650505050505050565b50505b611611602086611db3565b945061161e602085611db3565b9350505060208161162f9190611db3565b9050611571565b506116418589611f6d565b93505050505b9695505050505050565b60008061165e85856116cd565b63ffffffff1663613d307814611679575060009050806111d7565b611699611687856004611db3565b6116918587611db3565b879190611737565b91509150935093915050565b81516000906116b5836002611db3565b11156116c057600080fd5b50016002015161ffff1690565b81516000906116dd836004611db3565b11156116e857600080fd5b50016004015163ffffffff1690565b81516117038383610ef2565b5061170e8382610f69565b50505050565b6000611721848484610d00565b61172c878785610d00565b149695505050505050565b60008060286117468585611dc6565b1015611757575060009050806111d7565b600080611765878787611773565b909890975095505050505050565b825160009060019083111561178757600080fd5b6117d8565b6000603a8210602f831116156117a45750602f190190565b604782106040831116156117ba57506036190190565b606782106060831116156117d057506056190190565b5060ff919050565b60208501845b8481101561183a576117f58183015160001a61178c565b6118076001830184015160001a61178c565b60ff811460ff831417156118205760009450505061183a565b60049190911b1760089490941b93909317926002016117de565b5050935093915050565b60006020828403121561185657600080fd5b81356001600160e01b031981168114610f8a57600080fd5b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156118a7576118a761186e565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156118d6576118d661186e565b604052919050565b600067ffffffffffffffff8211156118f8576118f861186e565b50601f01601f191660200190565b600082601f83011261191757600080fd5b813561192a611925826118de565b6118ad565b81815284602083860101111561193f57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261196d57600080fd5b8135602067ffffffffffffffff8083111561198a5761198a61186e565b8260051b6119998382016118ad565b93845285810183019383810190888611156119b357600080fd5b84880192505b85831015611a4a578235848111156119d15760008081fd5b88016040818b03601f19018113156119e95760008081fd5b6119f1611884565b8783013587811115611a035760008081fd5b611a118d8a83870101611906565b825250908201359086821115611a275760008081fd5b611a358c8984860101611906565b818901528452505091840191908401906119b9565b98975050505050505050565b6001600160a01b0381168114611a6b57600080fd5b50565b60008060008060808587031215611a8457600080fd5b843567ffffffffffffffff80821115611a9c57600080fd5b611aa888838901611906565b95506020870135915080821115611abe57600080fd5b50611acb8782880161195c565b9350506040850135611adc81611a56565b91506060850135611aec81611a56565b939692955090935050565b600060208284031215611b0957600080fd5b8135610f8a81611a56565b600060208284031215611b2657600080fd5b5035919050565b60008060408385031215611b4057600080fd5b823567ffffffffffffffff80821115611b5857600080fd5b611b6486838701611906565b93506020850135915080821115611b7a57600080fd5b50611b878582860161195c565b9150509250929050565b600060208284031215611ba357600080fd5b813567ffffffffffffffff811115611bba57600080fd5b6113f784828501611906565b600060208284031215611bd857600080fd5b8151610f8a81611a56565b600060208284031215611bf557600080fd5b5051919050565b60005b83811015611c17578181015183820152602001611bff565b50506000910152565b60008151808452611c38816020860160208601611bfc565b601f01601f19169290920160200192915050565b602081526000610f8a6020830184611c20565b600060208284031215611c7157600080fd5b81518015158114610f8a57600080fd5b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015611cf857888303603f1901855281518051878552611ccc88860182611c20565b91890151858303868b0152919050611ce48183611c20565b968901969450505090860190600101611ca8565b509098975050505050505050565b60008060408385031215611d1957600080fd5b825167ffffffffffffffff811115611d3057600080fd5b8301601f81018513611d4157600080fd5b8051611d4f611925826118de565b818152866020838501011115611d6457600080fd5b611d75826020830160208601611bfc565b809450505050602083015163ffffffff81168114611d9257600080fd5b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561026557610265611d9d565b8181038181111561026557610265611d9d565b604081526000611dec6040830185611c20565b905063ffffffff831660208301529392505050565b634e487b7160e01b600052603260045260246000fd5b600082611e3457634e487b7160e01b600052601260045260246000fd5b500690565b600081611e4857611e48611d9d565b506000190190565b808202811582820484141761026557610265611d9d565b634e487b7160e01b600052600160045260246000fd5b600181815b80851115611eb8578160001904821115611e9e57611e9e611d9d565b80851615611eab57918102915b93841c9390800290611e82565b509250929050565b600082611ecf57506001610265565b81611edc57506000610265565b8160018114611ef25760028114611efc57611f18565b6001915050610265565b60ff841115611f0d57611f0d611d9d565b50506001821b610265565b5060208310610133831016604e8410600b8410161715611f3b575081810a610265565b611f458383611e7d565b8060001904821115611f5957611f59611d9d565b029392505050565b6000610f8a8383611ec0565b8181036000831280158383131683831282161715611f8d57611f8d611d9d565b509291505056fea264697066735822122077685672495bd2bac6025e69fa60c5d5426893a691a8274be25a5bc369c59af964736f6c63430008110033",
  "devdoc": {
    "details": "An ENS registrar that allows the owner of a DNS name to claim the      corresponding name in ENS.",
    "kind": "dev",
    "methods": {
      "proveAndClaim(bytes,(bytes,bytes)[])": {
        "details": "Submits proofs to the DNSSEC oracle, then claims a name using those proofs.",
        "params": {
          "input": "A chain of signed DNS RRSETs ending with a text record.",
          "name": "The name to claim, in DNS wire format."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4216,
        "contract": "contracts/dnsregistrar/DNSRegistrar.sol:DNSRegistrar",
        "label": "suffixes",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(PublicSuffixList)5436"
      },
      {
        "astId": 4224,
        "contract": "contracts/dnsregistrar/DNSRegistrar.sol:DNSRegistrar",
        "label": "inceptions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_uint32)"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(PublicSuffixList)5436": {
        "encoding": "inplace",
        "label": "contract PublicSuffixList",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}