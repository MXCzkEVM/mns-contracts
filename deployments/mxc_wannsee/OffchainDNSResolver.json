{
  "address": "0xDbDd6BBCc67E03862c25Aa046298Ac7CEB323189",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENS",
          "name": "_ens",
          "type": "address"
        },
        {
          "internalType": "contract DNSSEC",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_gatewayURL",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        }
      ],
      "name": "CouldNotResolve",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunction",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "OffchainLookup",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ens",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gatewayURL",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract DNSSEC",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "resolveCallback",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xec5a672ee77f1748aa9cbf4bc38ed89b7915fa8361c0cb2aa9709ac2727e458d",
  "receipt": {
    "to": null,
    "from": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
    "contractAddress": "0xDbDd6BBCc67E03862c25Aa046298Ac7CEB323189",
    "transactionIndex": 1,
    "gasUsed": "1418691",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x3057008758c23152576569cb6887e91aa5ed0bcb088bf780970c30ad17ac4105",
    "transactionHash": "0xec5a672ee77f1748aa9cbf4bc38ed89b7915fa8361c0cb2aa9709ac2727e458d",
    "logs": [],
    "blockNumber": 96,
    "cumulativeGasUsed": "1552723",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4E7984fF74569a270765EE67792386cBA77D1b01",
    "0x77938e634869Cbb6F9940fd690dbA9757328705F",
    "https://dnssec-oracle.ens.domains/"
  ],
  "numDeployments": 1,
  "solcInputHash": "b0f86eb025a2bf184421368d827bdf79",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"_ens\",\"type\":\"address\"},{\"internalType\":\"contract DNSSEC\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_gatewayURL\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"}],\"name\":\"CouldNotResolve\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"OffchainLookup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewayURL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract DNSSEC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"resolveCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dnsregistrar/OffchainDNSResolver.sol\":\"OffchainDNSResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/buffer/contracts/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\\n\",\"keccak256\":\"0xd6dd3b0b327288f8e1b711a609f4040fea602e2ad4bba9febdf2f33b4e56eb0c\",\"license\":\"BSD-2-Clause\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/dnsregistrar/OffchainDNSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../../contracts/resolvers/profiles/IAddrResolver.sol\\\";\\r\\nimport \\\"../../contracts/resolvers/profiles/IExtendedResolver.sol\\\";\\r\\nimport \\\"../../contracts/resolvers/profiles/IExtendedDNSResolver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"../dnssec-oracle/BytesUtils.sol\\\";\\r\\nimport \\\"../dnssec-oracle/DNSSEC.sol\\\";\\r\\nimport \\\"../dnssec-oracle/RRUtils.sol\\\";\\r\\nimport \\\"../registry/ENSRegistry.sol\\\";\\r\\nimport \\\"../utils/HexUtils.sol\\\";\\r\\n\\r\\nerror OffchainLookup(\\r\\n    address sender,\\r\\n    string[] urls,\\r\\n    bytes callData,\\r\\n    bytes4 callbackFunction,\\r\\n    bytes extraData\\r\\n);\\r\\n\\r\\ninterface IDNSGateway {\\r\\n    function resolve(\\r\\n        bytes memory name,\\r\\n        uint16 qtype\\r\\n    ) external returns (DNSSEC.RRSetWithSignature[] memory);\\r\\n}\\r\\n\\r\\nuint16 constant CLASS_INET = 1;\\r\\nuint16 constant TYPE_TXT = 16;\\r\\n\\r\\ncontract OffchainDNSResolver is IExtendedResolver {\\r\\n    using RRUtils for *;\\r\\n    using BytesUtils for bytes;\\r\\n    using HexUtils for bytes;\\r\\n\\r\\n    ENS public immutable ens;\\r\\n    DNSSEC public immutable oracle;\\r\\n    string public gatewayURL;\\r\\n\\r\\n    error CouldNotResolve(bytes name);\\r\\n\\r\\n    constructor(ENS _ens, DNSSEC _oracle, string memory _gatewayURL) {\\r\\n        ens = _ens;\\r\\n        oracle = _oracle;\\r\\n        gatewayURL = _gatewayURL;\\r\\n    }\\r\\n\\r\\n    function resolve(\\r\\n        bytes calldata name,\\r\\n        bytes calldata data\\r\\n    ) external view returns (bytes memory) {\\r\\n        string[] memory urls = new string[](1);\\r\\n        urls[0] = gatewayURL;\\r\\n\\r\\n        revert OffchainLookup(\\r\\n            address(this),\\r\\n            urls,\\r\\n            abi.encodeCall(IDNSGateway.resolve, (name, TYPE_TXT)),\\r\\n            OffchainDNSResolver.resolveCallback.selector,\\r\\n            abi.encode(name, data)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function resolveCallback(\\r\\n        bytes calldata response,\\r\\n        bytes calldata extraData\\r\\n    ) external view returns (bytes memory) {\\r\\n        (bytes memory name, bytes memory query) = abi.decode(\\r\\n            extraData,\\r\\n            (bytes, bytes)\\r\\n        );\\r\\n        DNSSEC.RRSetWithSignature[] memory rrsets = abi.decode(\\r\\n            response,\\r\\n            (DNSSEC.RRSetWithSignature[])\\r\\n        );\\r\\n\\r\\n        (bytes memory data, ) = oracle.verifyRRSet(rrsets);\\r\\n        for (\\r\\n            RRUtils.RRIterator memory iter = data.iterateRRs(0);\\r\\n            !iter.done();\\r\\n            iter.next()\\r\\n        ) {\\r\\n            // Ignore records with wrong name, type, or class\\r\\n            bytes memory rrname = RRUtils.readName(iter.data, iter.offset);\\r\\n            if (\\r\\n                !rrname.equals(name) ||\\r\\n                iter.class != CLASS_INET ||\\r\\n                iter.dnstype != TYPE_TXT\\r\\n            ) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            // Look for a valid ENS-DNS TXT record\\r\\n            (address dnsresolver, bytes memory context) = parseRR(\\r\\n                iter.data,\\r\\n                iter.rdataOffset,\\r\\n                iter.nextOffset\\r\\n            );\\r\\n\\r\\n            // If we found a valid record, try to resolve it\\r\\n            if (dnsresolver != address(0)) {\\r\\n                if (\\r\\n                    IERC165(dnsresolver).supportsInterface(\\r\\n                        IExtendedDNSResolver.resolve.selector\\r\\n                    )\\r\\n                ) {\\r\\n                    return\\r\\n                        IExtendedDNSResolver(dnsresolver).resolve(\\r\\n                            name,\\r\\n                            query,\\r\\n                            context\\r\\n                        );\\r\\n                } else if (\\r\\n                    IERC165(dnsresolver).supportsInterface(\\r\\n                        IExtendedResolver.resolve.selector\\r\\n                    )\\r\\n                ) {\\r\\n                    return IExtendedResolver(dnsresolver).resolve(name, query);\\r\\n                } else {\\r\\n                    (bool ok, bytes memory ret) = address(dnsresolver)\\r\\n                        .staticcall(query);\\r\\n                    if (ok) {\\r\\n                        return ret;\\r\\n                    } else {\\r\\n                        revert CouldNotResolve(name);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // No valid records; revert.\\r\\n        revert CouldNotResolve(name);\\r\\n    }\\r\\n\\r\\n    function parseRR(\\r\\n        bytes memory data,\\r\\n        uint256 idx,\\r\\n        uint256 lastIdx\\r\\n    ) internal view returns (address, bytes memory) {\\r\\n        bytes memory txt = readTXT(data, idx, lastIdx);\\r\\n\\r\\n        // Must start with the magic word\\r\\n        if (txt.length < 5 || !txt.equals(0, \\\"ENS1 \\\", 0, 5)) {\\r\\n            return (address(0), \\\"\\\");\\r\\n        }\\r\\n\\r\\n        // Parse the name or address\\r\\n        uint256 lastTxtIdx = txt.find(5, txt.length - 5, \\\" \\\");\\r\\n        if (lastTxtIdx > txt.length) {\\r\\n            address dnsResolver = parseAndResolve(txt, 5, txt.length);\\r\\n            return (dnsResolver, \\\"\\\");\\r\\n        } else {\\r\\n            address dnsResolver = parseAndResolve(txt, 5, lastTxtIdx);\\r\\n            return (\\r\\n                dnsResolver,\\r\\n                txt.substring(lastTxtIdx + 1, txt.length - lastTxtIdx - 1)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function readTXT(\\r\\n        bytes memory data,\\r\\n        uint256 startIdx,\\r\\n        uint256 lastIdx\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        // TODO: Concatenate multiple text fields\\r\\n        uint256 fieldLength = data.readUint8(startIdx);\\r\\n        assert(startIdx + fieldLength < lastIdx);\\r\\n        return data.substring(startIdx + 1, fieldLength);\\r\\n    }\\r\\n\\r\\n    function parseAndResolve(\\r\\n        bytes memory nameOrAddress,\\r\\n        uint256 idx,\\r\\n        uint256 lastIdx\\r\\n    ) internal view returns (address) {\\r\\n        if (nameOrAddress[idx] == \\\"0\\\" && nameOrAddress[idx + 1] == \\\"x\\\") {\\r\\n            (address ret, bool valid) = nameOrAddress.hexToAddress(\\r\\n                idx + 2,\\r\\n                lastIdx\\r\\n            );\\r\\n            if (valid) {\\r\\n                return ret;\\r\\n            }\\r\\n        }\\r\\n        return resolveName(nameOrAddress, idx, lastIdx);\\r\\n    }\\r\\n\\r\\n    function resolveName(\\r\\n        bytes memory name,\\r\\n        uint256 idx,\\r\\n        uint256 lastIdx\\r\\n    ) internal view returns (address) {\\r\\n        bytes32 node = textNamehash(name, idx, lastIdx);\\r\\n        address resolver = ens.resolver(node);\\r\\n        if (resolver == address(0)) {\\r\\n            return address(0);\\r\\n        }\\r\\n        return IAddrResolver(resolver).addr(node);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Namehash function that operates on dot-separated names (not dns-encoded names)\\r\\n     * @param name Name to hash\\r\\n     * @param idx Index to start at\\r\\n     * @param lastIdx Index to end at\\r\\n     */\\r\\n    function textNamehash(\\r\\n        bytes memory name,\\r\\n        uint256 idx,\\r\\n        uint256 lastIdx\\r\\n    ) internal view returns (bytes32) {\\r\\n        uint256 separator = name.find(idx, name.length - idx, bytes1(\\\".\\\"));\\r\\n        bytes32 parentNode = bytes32(0);\\r\\n        if (separator < lastIdx) {\\r\\n            parentNode = textNamehash(name, separator + 1, lastIdx);\\r\\n        } else {\\r\\n            separator = lastIdx;\\r\\n        }\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encodePacked(parentNode, name.keccak(idx, separator - idx))\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6802a9167e7b1e931dbd594576afe8f5f5e1da6788e7329b50c3f0d1d43ce746\",\"license\":\"MIT\"},\"contracts/dnssec-oracle/BytesUtils.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\nlibrary BytesUtils {\\r\\n    error OffsetOutOfBoundsError(uint256 offset, uint256 length);\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the keccak-256 hash of a byte range.\\r\\n     * @param self The byte string to hash.\\r\\n     * @param offset The position to start hashing at.\\r\\n     * @param len The number of bytes to hash.\\r\\n     * @return The hash of the byte range.\\r\\n     */\\r\\n    function keccak(\\r\\n        bytes memory self,\\r\\n        uint256 offset,\\r\\n        uint256 len\\r\\n    ) internal pure returns (bytes32 ret) {\\r\\n        require(offset + len <= self.length);\\r\\n        assembly {\\r\\n            ret := keccak256(add(add(self, 32), offset), len)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns a positive number if `other` comes lexicographically after\\r\\n     *      `self`, a negative number if it comes before, or zero if the\\r\\n     *      contents of the two bytes are equal.\\r\\n     * @param self The first bytes to compare.\\r\\n     * @param other The second bytes to compare.\\r\\n     * @return The result of the comparison.\\r\\n     */\\r\\n    function compare(\\r\\n        bytes memory self,\\r\\n        bytes memory other\\r\\n    ) internal pure returns (int256) {\\r\\n        return compare(self, 0, self.length, other, 0, other.length);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns a positive number if `other` comes lexicographically after\\r\\n     *      `self`, a negative number if it comes before, or zero if the\\r\\n     *      contents of the two bytes are equal. Comparison is done per-rune,\\r\\n     *      on unicode codepoints.\\r\\n     * @param self The first bytes to compare.\\r\\n     * @param offset The offset of self.\\r\\n     * @param len    The length of self.\\r\\n     * @param other The second bytes to compare.\\r\\n     * @param otheroffset The offset of the other string.\\r\\n     * @param otherlen    The length of the other string.\\r\\n     * @return The result of the comparison.\\r\\n     */\\r\\n    function compare(\\r\\n        bytes memory self,\\r\\n        uint256 offset,\\r\\n        uint256 len,\\r\\n        bytes memory other,\\r\\n        uint256 otheroffset,\\r\\n        uint256 otherlen\\r\\n    ) internal pure returns (int256) {\\r\\n        if (offset + len > self.length) {\\r\\n            revert OffsetOutOfBoundsError(offset + len, self.length);\\r\\n        }\\r\\n        if (otheroffset + otherlen > other.length) {\\r\\n            revert OffsetOutOfBoundsError(otheroffset + otherlen, other.length);\\r\\n        }\\r\\n\\r\\n        uint256 shortest = len;\\r\\n        if (otherlen < len) shortest = otherlen;\\r\\n\\r\\n        uint256 selfptr;\\r\\n        uint256 otherptr;\\r\\n\\r\\n        assembly {\\r\\n            selfptr := add(self, add(offset, 32))\\r\\n            otherptr := add(other, add(otheroffset, 32))\\r\\n        }\\r\\n        for (uint256 idx = 0; idx < shortest; idx += 32) {\\r\\n            uint256 a;\\r\\n            uint256 b;\\r\\n            assembly {\\r\\n                a := mload(selfptr)\\r\\n                b := mload(otherptr)\\r\\n            }\\r\\n            if (a != b) {\\r\\n                // Mask out irrelevant bytes and check again\\r\\n                uint256 mask;\\r\\n                if (shortest - idx >= 32) {\\r\\n                    mask = type(uint256).max;\\r\\n                } else {\\r\\n                    mask = ~(2 ** (8 * (idx + 32 - shortest)) - 1);\\r\\n                }\\r\\n                int256 diff = int256(a & mask) - int256(b & mask);\\r\\n                if (diff != 0) return diff;\\r\\n            }\\r\\n            selfptr += 32;\\r\\n            otherptr += 32;\\r\\n        }\\r\\n\\r\\n        return int256(len) - int256(otherlen);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns true if the two byte ranges are equal.\\r\\n     * @param self The first byte range to compare.\\r\\n     * @param offset The offset into the first byte range.\\r\\n     * @param other The second byte range to compare.\\r\\n     * @param otherOffset The offset into the second byte range.\\r\\n     * @param len The number of bytes to compare\\r\\n     * @return True if the byte ranges are equal, false otherwise.\\r\\n     */\\r\\n    function equals(\\r\\n        bytes memory self,\\r\\n        uint256 offset,\\r\\n        bytes memory other,\\r\\n        uint256 otherOffset,\\r\\n        uint256 len\\r\\n    ) internal pure returns (bool) {\\r\\n        return keccak(self, offset, len) == keccak(other, otherOffset, len);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns true if the two byte ranges are equal with offsets.\\r\\n     * @param self The first byte range to compare.\\r\\n     * @param offset The offset into the first byte range.\\r\\n     * @param other The second byte range to compare.\\r\\n     * @param otherOffset The offset into the second byte range.\\r\\n     * @return True if the byte ranges are equal, false otherwise.\\r\\n     */\\r\\n    function equals(\\r\\n        bytes memory self,\\r\\n        uint256 offset,\\r\\n        bytes memory other,\\r\\n        uint256 otherOffset\\r\\n    ) internal pure returns (bool) {\\r\\n        return\\r\\n            keccak(self, offset, self.length - offset) ==\\r\\n            keccak(other, otherOffset, other.length - otherOffset);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Compares a range of 'self' to all of 'other' and returns True iff\\r\\n     *      they are equal.\\r\\n     * @param self The first byte range to compare.\\r\\n     * @param offset The offset into the first byte range.\\r\\n     * @param other The second byte range to compare.\\r\\n     * @return True if the byte ranges are equal, false otherwise.\\r\\n     */\\r\\n    function equals(\\r\\n        bytes memory self,\\r\\n        uint256 offset,\\r\\n        bytes memory other\\r\\n    ) internal pure returns (bool) {\\r\\n        return\\r\\n            self.length == offset + other.length &&\\r\\n            equals(self, offset, other, 0, other.length);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns true if the two byte ranges are equal.\\r\\n     * @param self The first byte range to compare.\\r\\n     * @param other The second byte range to compare.\\r\\n     * @return True if the byte ranges are equal, false otherwise.\\r\\n     */\\r\\n    function equals(\\r\\n        bytes memory self,\\r\\n        bytes memory other\\r\\n    ) internal pure returns (bool) {\\r\\n        return\\r\\n            self.length == other.length &&\\r\\n            equals(self, 0, other, 0, self.length);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the 8-bit number at the specified index of self.\\r\\n     * @param self The byte string.\\r\\n     * @param idx The index into the bytes\\r\\n     * @return The specified 8 bits of the string, interpreted as an integer.\\r\\n     */\\r\\n    function readUint8(\\r\\n        bytes memory self,\\r\\n        uint256 idx\\r\\n    ) internal pure returns (uint8 ret) {\\r\\n        return uint8(self[idx]);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the 16-bit number at the specified index of self.\\r\\n     * @param self The byte string.\\r\\n     * @param idx The index into the bytes\\r\\n     * @return The specified 16 bits of the string, interpreted as an integer.\\r\\n     */\\r\\n    function readUint16(\\r\\n        bytes memory self,\\r\\n        uint256 idx\\r\\n    ) internal pure returns (uint16 ret) {\\r\\n        require(idx + 2 <= self.length);\\r\\n        assembly {\\r\\n            ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the 32-bit number at the specified index of self.\\r\\n     * @param self The byte string.\\r\\n     * @param idx The index into the bytes\\r\\n     * @return The specified 32 bits of the string, interpreted as an integer.\\r\\n     */\\r\\n    function readUint32(\\r\\n        bytes memory self,\\r\\n        uint256 idx\\r\\n    ) internal pure returns (uint32 ret) {\\r\\n        require(idx + 4 <= self.length);\\r\\n        assembly {\\r\\n            ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the 32 byte value at the specified index of self.\\r\\n     * @param self The byte string.\\r\\n     * @param idx The index into the bytes\\r\\n     * @return The specified 32 bytes of the string.\\r\\n     */\\r\\n    function readBytes32(\\r\\n        bytes memory self,\\r\\n        uint256 idx\\r\\n    ) internal pure returns (bytes32 ret) {\\r\\n        require(idx + 32 <= self.length);\\r\\n        assembly {\\r\\n            ret := mload(add(add(self, 32), idx))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the 32 byte value at the specified index of self.\\r\\n     * @param self The byte string.\\r\\n     * @param idx The index into the bytes\\r\\n     * @return The specified 32 bytes of the string.\\r\\n     */\\r\\n    function readBytes20(\\r\\n        bytes memory self,\\r\\n        uint256 idx\\r\\n    ) internal pure returns (bytes20 ret) {\\r\\n        require(idx + 20 <= self.length);\\r\\n        assembly {\\r\\n            ret := and(\\r\\n                mload(add(add(self, 32), idx)),\\r\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the n byte value at the specified index of self.\\r\\n     * @param self The byte string.\\r\\n     * @param idx The index into the bytes.\\r\\n     * @param len The number of bytes.\\r\\n     * @return The specified 32 bytes of the string.\\r\\n     */\\r\\n    function readBytesN(\\r\\n        bytes memory self,\\r\\n        uint256 idx,\\r\\n        uint256 len\\r\\n    ) internal pure returns (bytes32 ret) {\\r\\n        require(len <= 32);\\r\\n        require(idx + len <= self.length);\\r\\n        assembly {\\r\\n            let mask := not(sub(exp(256, sub(32, len)), 1))\\r\\n            ret := and(mload(add(add(self, 32), idx)), mask)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function memcpy(uint256 dest, uint256 src, uint256 len) private pure {\\r\\n        // Copy word-length chunks while possible\\r\\n        for (; len >= 32; len -= 32) {\\r\\n            assembly {\\r\\n                mstore(dest, mload(src))\\r\\n            }\\r\\n            dest += 32;\\r\\n            src += 32;\\r\\n        }\\r\\n\\r\\n        // Copy remaining bytes\\r\\n        unchecked {\\r\\n            uint256 mask = (256 ** (32 - len)) - 1;\\r\\n            assembly {\\r\\n                let srcpart := and(mload(src), not(mask))\\r\\n                let destpart := and(mload(dest), mask)\\r\\n                mstore(dest, or(destpart, srcpart))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Copies a substring into a new byte string.\\r\\n     * @param self The byte string to copy from.\\r\\n     * @param offset The offset to start copying at.\\r\\n     * @param len The number of bytes to copy.\\r\\n     */\\r\\n    function substring(\\r\\n        bytes memory self,\\r\\n        uint256 offset,\\r\\n        uint256 len\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        require(offset + len <= self.length);\\r\\n\\r\\n        bytes memory ret = new bytes(len);\\r\\n        uint256 dest;\\r\\n        uint256 src;\\r\\n\\r\\n        assembly {\\r\\n            dest := add(ret, 32)\\r\\n            src := add(add(self, 32), offset)\\r\\n        }\\r\\n        memcpy(dest, src, len);\\r\\n\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    // Maps characters from 0x30 to 0x7A to their base32 values.\\r\\n    // 0xFF represents invalid characters in that range.\\r\\n    bytes constant base32HexTable =\\r\\n        hex\\\"00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Decodes unpadded base32 data of up to one word in length.\\r\\n     * @param self The data to decode.\\r\\n     * @param off Offset into the string to start at.\\r\\n     * @param len Number of characters to decode.\\r\\n     * @return The decoded data, left aligned.\\r\\n     */\\r\\n    function base32HexDecodeWord(\\r\\n        bytes memory self,\\r\\n        uint256 off,\\r\\n        uint256 len\\r\\n    ) internal pure returns (bytes32) {\\r\\n        require(len <= 52);\\r\\n\\r\\n        uint256 ret = 0;\\r\\n        uint8 decoded;\\r\\n        for (uint256 i = 0; i < len; i++) {\\r\\n            bytes1 char = self[off + i];\\r\\n            require(char >= 0x30 && char <= 0x7A);\\r\\n            decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\r\\n            require(decoded <= 0x20);\\r\\n            if (i == len - 1) {\\r\\n                break;\\r\\n            }\\r\\n            ret = (ret << 5) | decoded;\\r\\n        }\\r\\n\\r\\n        uint256 bitlen = len * 5;\\r\\n        if (len % 8 == 0) {\\r\\n            // Multiple of 8 characters, no padding\\r\\n            ret = (ret << 5) | decoded;\\r\\n        } else if (len % 8 == 2) {\\r\\n            // Two extra characters - 1 byte\\r\\n            ret = (ret << 3) | (decoded >> 2);\\r\\n            bitlen -= 2;\\r\\n        } else if (len % 8 == 4) {\\r\\n            // Four extra characters - 2 bytes\\r\\n            ret = (ret << 1) | (decoded >> 4);\\r\\n            bitlen -= 4;\\r\\n        } else if (len % 8 == 5) {\\r\\n            // Five extra characters - 3 bytes\\r\\n            ret = (ret << 4) | (decoded >> 1);\\r\\n            bitlen -= 1;\\r\\n        } else if (len % 8 == 7) {\\r\\n            // Seven extra characters - 4 bytes\\r\\n            ret = (ret << 2) | (decoded >> 3);\\r\\n            bitlen -= 3;\\r\\n        } else {\\r\\n            revert();\\r\\n        }\\r\\n\\r\\n        return bytes32(ret << (256 - bitlen));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Finds the first occurrence of the byte `needle` in `self`.\\r\\n     * @param self The string to search\\r\\n     * @param off The offset to start searching at\\r\\n     * @param len The number of bytes to search\\r\\n     * @param needle The byte to search for\\r\\n     * @return The offset of `needle` in `self`, or 2**256-1 if it was not found.\\r\\n     */\\r\\n    function find(\\r\\n        bytes memory self,\\r\\n        uint256 off,\\r\\n        uint256 len,\\r\\n        bytes1 needle\\r\\n    ) internal pure returns (uint256) {\\r\\n        for (uint256 idx = off; idx < off + len; idx++) {\\r\\n            if (self[idx] == needle) {\\r\\n                return idx;\\r\\n            }\\r\\n        }\\r\\n        return type(uint256).max;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb464edb8f5dc9369cb1ab2cb1c8af5e217d2fe11b32ef7288e37e2838b89dc59\"},\"contracts/dnssec-oracle/DNSSEC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nabstract contract DNSSEC {\\r\\n    bytes public anchors;\\r\\n\\r\\n    struct RRSetWithSignature {\\r\\n        bytes rrset;\\r\\n        bytes sig;\\r\\n    }\\r\\n\\r\\n    event AlgorithmUpdated(uint8 id, address addr);\\r\\n    event DigestUpdated(uint8 id, address addr);\\r\\n\\r\\n    function verifyRRSet(\\r\\n        RRSetWithSignature[] memory input\\r\\n    ) external view virtual returns (bytes memory rrs, uint32 inception);\\r\\n\\r\\n    function verifyRRSet(\\r\\n        RRSetWithSignature[] memory input,\\r\\n        uint256 now\\r\\n    ) public view virtual returns (bytes memory rrs, uint32 inception);\\r\\n}\\r\\n\",\"keccak256\":\"0x2fc67aef2359ab521c6c84d706df5d246d49bb1f6a605fb605272a7e976a61a2\",\"license\":\"MIT\"},\"contracts/dnssec-oracle/RRUtils.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BytesUtils.sol\\\";\\r\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev RRUtils is a library that provides utilities for parsing DNS resource records.\\r\\n */\\r\\nlibrary RRUtils {\\r\\n    using BytesUtils for *;\\r\\n    using Buffer for *;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\\r\\n     * @param self The byte array to read a name from.\\r\\n     * @param offset The offset to start reading at.\\r\\n     * @return The length of the DNS name at 'offset', in bytes.\\r\\n     */\\r\\n    function nameLength(\\r\\n        bytes memory self,\\r\\n        uint256 offset\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 idx = offset;\\r\\n        while (true) {\\r\\n            assert(idx < self.length);\\r\\n            uint256 labelLen = self.readUint8(idx);\\r\\n            idx += labelLen + 1;\\r\\n            if (labelLen == 0) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        return idx - offset;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a DNS format name at the specified offset of self.\\r\\n     * @param self The byte array to read a name from.\\r\\n     * @param offset The offset to start reading at.\\r\\n     * @return ret The name.\\r\\n     */\\r\\n    function readName(\\r\\n        bytes memory self,\\r\\n        uint256 offset\\r\\n    ) internal pure returns (bytes memory ret) {\\r\\n        uint256 len = nameLength(self, offset);\\r\\n        return self.substring(offset, len);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\\r\\n     * @param self The byte array to read a name from.\\r\\n     * @param offset The offset to start reading at.\\r\\n     * @return The number of labels in the DNS name at 'offset', in bytes.\\r\\n     */\\r\\n    function labelCount(\\r\\n        bytes memory self,\\r\\n        uint256 offset\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 count = 0;\\r\\n        while (true) {\\r\\n            assert(offset < self.length);\\r\\n            uint256 labelLen = self.readUint8(offset);\\r\\n            offset += labelLen + 1;\\r\\n            if (labelLen == 0) {\\r\\n                break;\\r\\n            }\\r\\n            count += 1;\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    uint256 constant RRSIG_TYPE = 0;\\r\\n    uint256 constant RRSIG_ALGORITHM = 2;\\r\\n    uint256 constant RRSIG_LABELS = 3;\\r\\n    uint256 constant RRSIG_TTL = 4;\\r\\n    uint256 constant RRSIG_EXPIRATION = 8;\\r\\n    uint256 constant RRSIG_INCEPTION = 12;\\r\\n    uint256 constant RRSIG_KEY_TAG = 16;\\r\\n    uint256 constant RRSIG_SIGNER_NAME = 18;\\r\\n\\r\\n    struct SignedSet {\\r\\n        uint16 typeCovered;\\r\\n        uint8 algorithm;\\r\\n        uint8 labels;\\r\\n        uint32 ttl;\\r\\n        uint32 expiration;\\r\\n        uint32 inception;\\r\\n        uint16 keytag;\\r\\n        bytes signerName;\\r\\n        bytes data;\\r\\n        bytes name;\\r\\n    }\\r\\n\\r\\n    function readSignedSet(\\r\\n        bytes memory data\\r\\n    ) internal pure returns (SignedSet memory self) {\\r\\n        self.typeCovered = data.readUint16(RRSIG_TYPE);\\r\\n        self.algorithm = data.readUint8(RRSIG_ALGORITHM);\\r\\n        self.labels = data.readUint8(RRSIG_LABELS);\\r\\n        self.ttl = data.readUint32(RRSIG_TTL);\\r\\n        self.expiration = data.readUint32(RRSIG_EXPIRATION);\\r\\n        self.inception = data.readUint32(RRSIG_INCEPTION);\\r\\n        self.keytag = data.readUint16(RRSIG_KEY_TAG);\\r\\n        self.signerName = readName(data, RRSIG_SIGNER_NAME);\\r\\n        self.data = data.substring(\\r\\n            RRSIG_SIGNER_NAME + self.signerName.length,\\r\\n            data.length - RRSIG_SIGNER_NAME - self.signerName.length\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function rrs(\\r\\n        SignedSet memory rrset\\r\\n    ) internal pure returns (RRIterator memory) {\\r\\n        return iterateRRs(rrset.data, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev An iterator over resource records.\\r\\n     */\\r\\n    struct RRIterator {\\r\\n        bytes data;\\r\\n        uint256 offset;\\r\\n        uint16 dnstype;\\r\\n        uint16 class;\\r\\n        uint32 ttl;\\r\\n        uint256 rdataOffset;\\r\\n        uint256 nextOffset;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Begins iterating over resource records.\\r\\n     * @param self The byte string to read from.\\r\\n     * @param offset The offset to start reading at.\\r\\n     * @return ret An iterator object.\\r\\n     */\\r\\n    function iterateRRs(\\r\\n        bytes memory self,\\r\\n        uint256 offset\\r\\n    ) internal pure returns (RRIterator memory ret) {\\r\\n        ret.data = self;\\r\\n        ret.nextOffset = offset;\\r\\n        next(ret);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true iff there are more RRs to iterate.\\r\\n     * @param iter The iterator to check.\\r\\n     * @return True iff the iterator has finished.\\r\\n     */\\r\\n    function done(RRIterator memory iter) internal pure returns (bool) {\\r\\n        return iter.offset >= iter.data.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves the iterator to the next resource record.\\r\\n     * @param iter The iterator to advance.\\r\\n     */\\r\\n    function next(RRIterator memory iter) internal pure {\\r\\n        iter.offset = iter.nextOffset;\\r\\n        if (iter.offset >= iter.data.length) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // Skip the name\\r\\n        uint256 off = iter.offset + nameLength(iter.data, iter.offset);\\r\\n\\r\\n        // Read type, class, and ttl\\r\\n        iter.dnstype = iter.data.readUint16(off);\\r\\n        off += 2;\\r\\n        iter.class = iter.data.readUint16(off);\\r\\n        off += 2;\\r\\n        iter.ttl = iter.data.readUint32(off);\\r\\n        off += 4;\\r\\n\\r\\n        // Read the rdata\\r\\n        uint256 rdataLength = iter.data.readUint16(off);\\r\\n        off += 2;\\r\\n        iter.rdataOffset = off;\\r\\n        iter.nextOffset = off + rdataLength;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the current record.\\r\\n     * @param iter The iterator.\\r\\n     * @return A new bytes object containing the owner name from the RR.\\r\\n     */\\r\\n    function name(RRIterator memory iter) internal pure returns (bytes memory) {\\r\\n        return\\r\\n            iter.data.substring(\\r\\n                iter.offset,\\r\\n                nameLength(iter.data, iter.offset)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the rdata portion of the current record.\\r\\n     * @param iter The iterator.\\r\\n     * @return A new bytes object containing the RR's RDATA.\\r\\n     */\\r\\n    function rdata(\\r\\n        RRIterator memory iter\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        return\\r\\n            iter.data.substring(\\r\\n                iter.rdataOffset,\\r\\n                iter.nextOffset - iter.rdataOffset\\r\\n            );\\r\\n    }\\r\\n\\r\\n    uint256 constant DNSKEY_FLAGS = 0;\\r\\n    uint256 constant DNSKEY_PROTOCOL = 2;\\r\\n    uint256 constant DNSKEY_ALGORITHM = 3;\\r\\n    uint256 constant DNSKEY_PUBKEY = 4;\\r\\n\\r\\n    struct DNSKEY {\\r\\n        uint16 flags;\\r\\n        uint8 protocol;\\r\\n        uint8 algorithm;\\r\\n        bytes publicKey;\\r\\n    }\\r\\n\\r\\n    function readDNSKEY(\\r\\n        bytes memory data,\\r\\n        uint256 offset,\\r\\n        uint256 length\\r\\n    ) internal pure returns (DNSKEY memory self) {\\r\\n        self.flags = data.readUint16(offset + DNSKEY_FLAGS);\\r\\n        self.protocol = data.readUint8(offset + DNSKEY_PROTOCOL);\\r\\n        self.algorithm = data.readUint8(offset + DNSKEY_ALGORITHM);\\r\\n        self.publicKey = data.substring(\\r\\n            offset + DNSKEY_PUBKEY,\\r\\n            length - DNSKEY_PUBKEY\\r\\n        );\\r\\n    }\\r\\n\\r\\n    uint256 constant DS_KEY_TAG = 0;\\r\\n    uint256 constant DS_ALGORITHM = 2;\\r\\n    uint256 constant DS_DIGEST_TYPE = 3;\\r\\n    uint256 constant DS_DIGEST = 4;\\r\\n\\r\\n    struct DS {\\r\\n        uint16 keytag;\\r\\n        uint8 algorithm;\\r\\n        uint8 digestType;\\r\\n        bytes digest;\\r\\n    }\\r\\n\\r\\n    function readDS(\\r\\n        bytes memory data,\\r\\n        uint256 offset,\\r\\n        uint256 length\\r\\n    ) internal pure returns (DS memory self) {\\r\\n        self.keytag = data.readUint16(offset + DS_KEY_TAG);\\r\\n        self.algorithm = data.readUint8(offset + DS_ALGORITHM);\\r\\n        self.digestType = data.readUint8(offset + DS_DIGEST_TYPE);\\r\\n        self.digest = data.substring(offset + DS_DIGEST, length - DS_DIGEST);\\r\\n    }\\r\\n\\r\\n    function isSubdomainOf(\\r\\n        bytes memory self,\\r\\n        bytes memory other\\r\\n    ) internal pure returns (bool) {\\r\\n        uint256 off = 0;\\r\\n        uint256 counts = labelCount(self, 0);\\r\\n        uint256 othercounts = labelCount(other, 0);\\r\\n\\r\\n        while (counts > othercounts) {\\r\\n            off = progress(self, off);\\r\\n            counts--;\\r\\n        }\\r\\n\\r\\n        return self.equals(off, other, 0);\\r\\n    }\\r\\n\\r\\n    function compareNames(\\r\\n        bytes memory self,\\r\\n        bytes memory other\\r\\n    ) internal pure returns (int256) {\\r\\n        if (self.equals(other)) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 off;\\r\\n        uint256 otheroff;\\r\\n        uint256 prevoff;\\r\\n        uint256 otherprevoff;\\r\\n        uint256 counts = labelCount(self, 0);\\r\\n        uint256 othercounts = labelCount(other, 0);\\r\\n\\r\\n        // Keep removing labels from the front of the name until both names are equal length\\r\\n        while (counts > othercounts) {\\r\\n            prevoff = off;\\r\\n            off = progress(self, off);\\r\\n            counts--;\\r\\n        }\\r\\n\\r\\n        while (othercounts > counts) {\\r\\n            otherprevoff = otheroff;\\r\\n            otheroff = progress(other, otheroff);\\r\\n            othercounts--;\\r\\n        }\\r\\n\\r\\n        // Compare the last nonequal labels to each other\\r\\n        while (counts > 0 && !self.equals(off, other, otheroff)) {\\r\\n            prevoff = off;\\r\\n            off = progress(self, off);\\r\\n            otherprevoff = otheroff;\\r\\n            otheroff = progress(other, otheroff);\\r\\n            counts -= 1;\\r\\n        }\\r\\n\\r\\n        if (off == 0) {\\r\\n            return -1;\\r\\n        }\\r\\n        if (otheroff == 0) {\\r\\n            return 1;\\r\\n        }\\r\\n\\r\\n        return\\r\\n            self.compare(\\r\\n                prevoff + 1,\\r\\n                self.readUint8(prevoff),\\r\\n                other,\\r\\n                otherprevoff + 1,\\r\\n                other.readUint8(otherprevoff)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Compares two serial numbers using RFC1982 serial number math.\\r\\n     */\\r\\n    function serialNumberGte(\\r\\n        uint32 i1,\\r\\n        uint32 i2\\r\\n    ) internal pure returns (bool) {\\r\\n        unchecked {\\r\\n            return int32(i1) - int32(i2) >= 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function progress(\\r\\n        bytes memory body,\\r\\n        uint256 off\\r\\n    ) internal pure returns (uint256) {\\r\\n        return off + 1 + body.readUint8(off);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Computes the keytag for a chunk of data.\\r\\n     * @param data The data to compute a keytag for.\\r\\n     * @return The computed key tag.\\r\\n     */\\r\\n    function computeKeytag(bytes memory data) internal pure returns (uint16) {\\r\\n        /* This function probably deserves some explanation.\\r\\n         * The DNSSEC keytag function is a checksum that relies on summing up individual bytes\\r\\n         * from the input string, with some mild bitshifting. Here's a Naive solidity implementation:\\r\\n         *\\r\\n         *     function computeKeytag(bytes memory data) internal pure returns (uint16) {\\r\\n         *         uint ac;\\r\\n         *         for (uint i = 0; i < data.length; i++) {\\r\\n         *             ac += i & 1 == 0 ? uint16(data.readUint8(i)) << 8 : data.readUint8(i);\\r\\n         *         }\\r\\n         *         return uint16(ac + (ac >> 16));\\r\\n         *     }\\r\\n         *\\r\\n         * The EVM, with its 256 bit words, is exceedingly inefficient at doing byte-by-byte operations;\\r\\n         * the code above, on reasonable length inputs, consumes over 100k gas. But we can make the EVM's\\r\\n         * large words work in our favour.\\r\\n         *\\r\\n         * The code below works by treating the input as a series of 256 bit words. It first masks out\\r\\n         * even and odd bytes from each input word, adding them to two separate accumulators `ac1` and `ac2`.\\r\\n         * The bytes are separated by empty bytes, so as long as no individual sum exceeds 2^16-1, we're\\r\\n         * effectively summing 16 different numbers with each EVM ADD opcode.\\r\\n         *\\r\\n         * Once it's added up all the inputs, it has to add all the 16 bit values in `ac1` and `ac2` together.\\r\\n         * It does this using the same trick - mask out every other value, shift to align them, add them together.\\r\\n         * After the first addition on both accumulators, there's enough room to add the two accumulators together,\\r\\n         * and the remaining sums can be done just on ac1.\\r\\n         */\\r\\n        unchecked {\\r\\n            require(data.length <= 8192, \\\"Long keys not permitted\\\");\\r\\n            uint256 ac1;\\r\\n            uint256 ac2;\\r\\n            for (uint256 i = 0; i < data.length + 31; i += 32) {\\r\\n                uint256 word;\\r\\n                assembly {\\r\\n                    word := mload(add(add(data, 32), i))\\r\\n                }\\r\\n                if (i + 32 > data.length) {\\r\\n                    uint256 unused = 256 - (data.length - i) * 8;\\r\\n                    word = (word >> unused) << unused;\\r\\n                }\\r\\n                ac1 +=\\r\\n                    (word &\\r\\n                        0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >>\\r\\n                    8;\\r\\n                ac2 += (word &\\r\\n                    0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF);\\r\\n            }\\r\\n            ac1 =\\r\\n                (ac1 &\\r\\n                    0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) +\\r\\n                ((ac1 &\\r\\n                    0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >>\\r\\n                    16);\\r\\n            ac2 =\\r\\n                (ac2 &\\r\\n                    0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) +\\r\\n                ((ac2 &\\r\\n                    0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >>\\r\\n                    16);\\r\\n            ac1 = (ac1 << 8) + ac2;\\r\\n            ac1 =\\r\\n                (ac1 &\\r\\n                    0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) +\\r\\n                ((ac1 &\\r\\n                    0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >>\\r\\n                    32);\\r\\n            ac1 =\\r\\n                (ac1 &\\r\\n                    0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) +\\r\\n                ((ac1 &\\r\\n                    0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >>\\r\\n                    64);\\r\\n            ac1 =\\r\\n                (ac1 &\\r\\n                    0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) +\\r\\n                (ac1 >> 128);\\r\\n            ac1 += (ac1 >> 16) & 0xFFFF;\\r\\n            return uint16(ac1);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2a03e8ba552ffd48bc87c9c7c49de7f34ee1da5e5cc09458280f5fedeb7e8d96\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\ninterface ENS {\\r\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\r\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\r\\n\\r\\n    // Logged when the owner of a node transfers ownership to a new account.\\r\\n    event Transfer(bytes32 indexed node, address owner);\\r\\n\\r\\n    // Logged when the resolver for a node changes.\\r\\n    event NewResolver(bytes32 indexed node, address resolver);\\r\\n\\r\\n    // Logged when the TTL of a node changes\\r\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\r\\n\\r\\n    // Logged when an operator is added or removed.\\r\\n    event ApprovalForAll(\\r\\n        address indexed owner,\\r\\n        address indexed operator,\\r\\n        bool approved\\r\\n    );\\r\\n\\r\\n    function setRecord(\\r\\n        bytes32 node,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) external;\\r\\n\\r\\n    function setSubnodeRecord(\\r\\n        bytes32 node,\\r\\n        bytes32 label,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) external;\\r\\n\\r\\n    function setSubnodeOwner(\\r\\n        bytes32 node,\\r\\n        bytes32 label,\\r\\n        address owner\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function setResolver(bytes32 node, address resolver) external;\\r\\n\\r\\n    function setOwner(bytes32 node, address owner) external;\\r\\n\\r\\n    function setTTL(bytes32 node, uint64 ttl) external;\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    function owner(bytes32 node) external view returns (address);\\r\\n\\r\\n    function resolver(bytes32 node) external view returns (address);\\r\\n\\r\\n    function ttl(bytes32 node) external view returns (uint64);\\r\\n\\r\\n    function recordExists(bytes32 node) external view returns (bool);\\r\\n\\r\\n    function isApprovedForAll(\\r\\n        address owner,\\r\\n        address operator\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xb1fece691daf62005e0103e7699d25a2a9e0853b1eb59fd0a43042db6d43b081\"},\"contracts/registry/ENSRegistry.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"./ENS.sol\\\";\\r\\n\\r\\n/**\\r\\n * The ENS registry contract.\\r\\n */\\r\\ncontract ENSRegistry is ENS {\\r\\n    struct Record {\\r\\n        address owner;\\r\\n        address resolver;\\r\\n        uint64 ttl;\\r\\n    }\\r\\n\\r\\n    mapping(bytes32 => Record) records;\\r\\n    mapping(address => mapping(address => bool)) operators;\\r\\n\\r\\n    // Permits modifications only by the owner of the specified node.\\r\\n    modifier authorised(bytes32 node) {\\r\\n        address owner = records[node].owner;\\r\\n        require(owner == msg.sender || operators[owner][msg.sender]);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Constructs a new ENS registry.\\r\\n     */\\r\\n    constructor() public {\\r\\n        records[0x0].owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the record for a node.\\r\\n     * @param node The node to update.\\r\\n     * @param owner The address of the new owner.\\r\\n     * @param resolver The address of the resolver.\\r\\n     * @param ttl The TTL in seconds.\\r\\n     */\\r\\n    function setRecord(\\r\\n        bytes32 node,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) external virtual override {\\r\\n        setOwner(node, owner);\\r\\n        _setResolverAndTTL(node, resolver, ttl);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the record for a subnode.\\r\\n     * @param node The parent node.\\r\\n     * @param label The hash of the label specifying the subnode.\\r\\n     * @param owner The address of the new owner.\\r\\n     * @param resolver The address of the resolver.\\r\\n     * @param ttl The TTL in seconds.\\r\\n     */\\r\\n    function setSubnodeRecord(\\r\\n        bytes32 node,\\r\\n        bytes32 label,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) external virtual override {\\r\\n        bytes32 subnode = setSubnodeOwner(node, label, owner);\\r\\n        _setResolverAndTTL(subnode, resolver, ttl);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of a node to a new address. May only be called by the current owner of the node.\\r\\n     * @param node The node to transfer ownership of.\\r\\n     * @param owner The address of the new owner.\\r\\n     */\\r\\n    function setOwner(\\r\\n        bytes32 node,\\r\\n        address owner\\r\\n    ) public virtual override authorised(node) {\\r\\n        _setOwner(node, owner);\\r\\n        emit Transfer(node, owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.\\r\\n     * @param node The parent node.\\r\\n     * @param label The hash of the label specifying the subnode.\\r\\n     * @param owner The address of the new owner.\\r\\n     */\\r\\n    function setSubnodeOwner(\\r\\n        bytes32 node,\\r\\n        bytes32 label,\\r\\n        address owner\\r\\n    ) public virtual override authorised(node) returns (bytes32) {\\r\\n        bytes32 subnode = keccak256(abi.encodePacked(node, label));\\r\\n        _setOwner(subnode, owner);\\r\\n        emit NewOwner(node, label, owner);\\r\\n        return subnode;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the resolver address for the specified node.\\r\\n     * @param node The node to update.\\r\\n     * @param resolver The address of the resolver.\\r\\n     */\\r\\n    function setResolver(\\r\\n        bytes32 node,\\r\\n        address resolver\\r\\n    ) public virtual override authorised(node) {\\r\\n        emit NewResolver(node, resolver);\\r\\n        records[node].resolver = resolver;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the TTL for the specified node.\\r\\n     * @param node The node to update.\\r\\n     * @param ttl The TTL in seconds.\\r\\n     */\\r\\n    function setTTL(\\r\\n        bytes32 node,\\r\\n        uint64 ttl\\r\\n    ) public virtual override authorised(node) {\\r\\n        emit NewTTL(node, ttl);\\r\\n        records[node].ttl = ttl;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Enable or disable approval for a third party (\\\"operator\\\") to manage\\r\\n     *  all of `msg.sender`'s ENS records. Emits the ApprovalForAll event.\\r\\n     * @param operator Address to add to the set of authorized operators.\\r\\n     * @param approved True if the operator is approved, false to revoke approval.\\r\\n     */\\r\\n    function setApprovalForAll(\\r\\n        address operator,\\r\\n        bool approved\\r\\n    ) external virtual override {\\r\\n        operators[msg.sender][operator] = approved;\\r\\n        emit ApprovalForAll(msg.sender, operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address that owns the specified node.\\r\\n     * @param node The specified node.\\r\\n     * @return address of the owner.\\r\\n     */\\r\\n    function owner(\\r\\n        bytes32 node\\r\\n    ) public view virtual override returns (address) {\\r\\n        address addr = records[node].owner;\\r\\n        if (addr == address(this)) {\\r\\n            return address(0x0);\\r\\n        }\\r\\n\\r\\n        return addr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the resolver for the specified node.\\r\\n     * @param node The specified node.\\r\\n     * @return address of the resolver.\\r\\n     */\\r\\n    function resolver(\\r\\n        bytes32 node\\r\\n    ) public view virtual override returns (address) {\\r\\n        return records[node].resolver;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the TTL of a node, and any records associated with it.\\r\\n     * @param node The specified node.\\r\\n     * @return ttl of the node.\\r\\n     */\\r\\n    function ttl(bytes32 node) public view virtual override returns (uint64) {\\r\\n        return records[node].ttl;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether a record has been imported to the registry.\\r\\n     * @param node The specified node.\\r\\n     * @return Bool if record exists\\r\\n     */\\r\\n    function recordExists(\\r\\n        bytes32 node\\r\\n    ) public view virtual override returns (bool) {\\r\\n        return records[node].owner != address(0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Query if an address is an authorized operator for another address.\\r\\n     * @param owner The address that owns the records.\\r\\n     * @param operator The address that acts on behalf of the owner.\\r\\n     * @return True if `operator` is an approved operator for `owner`, false otherwise.\\r\\n     */\\r\\n    function isApprovedForAll(\\r\\n        address owner,\\r\\n        address operator\\r\\n    ) external view virtual override returns (bool) {\\r\\n        return operators[owner][operator];\\r\\n    }\\r\\n\\r\\n    function _setOwner(bytes32 node, address owner) internal virtual {\\r\\n        records[node].owner = owner;\\r\\n    }\\r\\n\\r\\n    function _setResolverAndTTL(\\r\\n        bytes32 node,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) internal {\\r\\n        if (resolver != records[node].resolver) {\\r\\n            records[node].resolver = resolver;\\r\\n            emit NewResolver(node, resolver);\\r\\n        }\\r\\n\\r\\n        if (ttl != records[node].ttl) {\\r\\n            records[node].ttl = ttl;\\r\\n            emit NewTTL(node, ttl);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x48e70e60238d9625d131e2e1ac7c488da00856b606ff27c25e314283d69a0f44\"},\"contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\n/**\\r\\n * Interface for the legacy (ETH-only) addr function.\\r\\n */\\r\\ninterface IAddrResolver {\\r\\n    event AddrChanged(bytes32 indexed node, address a);\\r\\n\\r\\n    /**\\r\\n     * Returns the address associated with an ENS node.\\r\\n     * @param node The ENS node to query.\\r\\n     * @return The associated address.\\r\\n     */\\r\\n    function addr(bytes32 node) external view returns (address payable);\\r\\n}\\r\\n\",\"keccak256\":\"0xc28e76da1c1d807c571ad75c169fa8496a8c63f21a4955171cf36b709924de20\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IExtendedDNSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IExtendedDNSResolver {\\r\\n    function resolve(\\r\\n        bytes memory name,\\r\\n        bytes memory data,\\r\\n        bytes memory context\\r\\n    ) external view returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x0cccaa04f7a79c8ce2ec6f5152fabb14be445a3de548010263bd0fd1aab32b14\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IExtendedResolver {\\r\\n    function resolve(\\r\\n        bytes memory name,\\r\\n        bytes memory data\\r\\n    ) external view returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x0e783e816c0c96e1a51cce9be020ab8c07d5aef2840b3a583c75e75f609544ce\",\"license\":\"MIT\"},\"contracts/utils/HexUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary HexUtils {\\r\\n    /**\\r\\n     * @dev Attempts to parse bytes32 from a hex string\\r\\n     * @param str The string to parse\\r\\n     * @param idx The offset to start parsing at\\r\\n     * @param lastIdx The (exclusive) last index in `str` to consider. Use `str.length` to scan the whole string.\\r\\n     */\\r\\n    function hexStringToBytes32(\\r\\n        bytes memory str,\\r\\n        uint256 idx,\\r\\n        uint256 lastIdx\\r\\n    ) internal pure returns (bytes32 r, bool valid) {\\r\\n        valid = true;\\r\\n        assembly {\\r\\n            // check that the index to read to is not past the end of the string\\r\\n            if gt(lastIdx, mload(str)) {\\r\\n                revert(0, 0)\\r\\n            }\\r\\n\\r\\n            function getHex(c) -> ascii {\\r\\n                // chars 48-57: 0-9\\r\\n                if and(gt(c, 47), lt(c, 58)) {\\r\\n                    ascii := sub(c, 48)\\r\\n                    leave\\r\\n                }\\r\\n                // chars 65-70: A-F\\r\\n                if and(gt(c, 64), lt(c, 71)) {\\r\\n                    ascii := add(sub(c, 65), 10)\\r\\n                    leave\\r\\n                }\\r\\n                // chars 97-102: a-f\\r\\n                if and(gt(c, 96), lt(c, 103)) {\\r\\n                    ascii := add(sub(c, 97), 10)\\r\\n                    leave\\r\\n                }\\r\\n                // invalid char\\r\\n                ascii := 0xff\\r\\n            }\\r\\n\\r\\n            let ptr := add(str, 32)\\r\\n            for {\\r\\n                let i := idx\\r\\n            } lt(i, lastIdx) {\\r\\n                i := add(i, 2)\\r\\n            } {\\r\\n                let byte1 := getHex(byte(0, mload(add(ptr, i))))\\r\\n                let byte2 := getHex(byte(0, mload(add(ptr, add(i, 1)))))\\r\\n                // if either byte is invalid, set invalid and break loop\\r\\n                if or(eq(byte1, 0xff), eq(byte2, 0xff)) {\\r\\n                    valid := false\\r\\n                    break\\r\\n                }\\r\\n                let combined := or(shl(4, byte1), byte2)\\r\\n                r := or(shl(8, r), combined)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Attempts to parse an address from a hex string\\r\\n     * @param str The string to parse\\r\\n     * @param idx The offset to start parsing at\\r\\n     * @param lastIdx The (exclusive) last index in `str` to consider. Use `str.length` to scan the whole string.\\r\\n     */\\r\\n    function hexToAddress(\\r\\n        bytes memory str,\\r\\n        uint256 idx,\\r\\n        uint256 lastIdx\\r\\n    ) internal pure returns (address, bool) {\\r\\n        if (lastIdx - idx < 40) return (address(0x0), false);\\r\\n        (bytes32 r, bool valid) = hexStringToBytes32(str, idx, lastIdx);\\r\\n        return (address(uint160(uint256(r))), valid);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3c88adcc0a9ffce9712f0c6ad42155bc116a4e0621baa1d661b21f4b5f6c3b16\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001a5f38038062001a5f83398101604081905262000034916200008e565b6001600160a01b03808416608052821660a05260006200005582826200021d565b50505050620002e9565b6001600160a01b03811681146200007557600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215620000a457600080fd5b8351620000b1816200005f565b80935050602080850151620000c6816200005f565b60408601519093506001600160401b0380821115620000e457600080fd5b818701915087601f830112620000f957600080fd5b8151818111156200010e576200010e62000078565b604051601f8201601f19908116603f0116810190838211818310171562000139576200013962000078565b816040528281528a868487010111156200015257600080fd5b600093505b8284101562000176578484018601518185018701529285019262000157565b60008684830101528096505050505050509250925092565b600181811c90821680620001a357607f821691505b602082108103620001c457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021857600081815260208120601f850160051c81016020861015620001f35750805b601f850160051c820191505b818110156200021457828155600101620001ff565b5050505b505050565b81516001600160401b0381111562000239576200023962000078565b62000251816200024a84546200018e565b84620001ca565b602080601f831160018114620002895760008415620002705750858301515b600019600386901b1c1916600185901b17855562000214565b600085815260208120601f198616915b82811015620002ba5788860151825594840194600190910190840162000299565b5085821015620002d95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a0516117446200031b6000396000818160ba015261032901526000818160610152610d1b01526117446000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633f15457f1461005c57806352539968146100a05780637dc0d1d0146100b55780639061b923146100dc578063b4a85801146100ef575b600080fd5b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a8610102565b6040516100979190610fc2565b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6100a86100ea36600461101e565b610190565b6100a86100fd36600461101e565b6102ff565b6000805461010f9061108a565b80601f016020809104026020016040519081016040528092919081815260200182805461013b9061108a565b80156101885780601f1061015d57610100808354040283529160200191610188565b820191906000526020600020905b81548152906001019060200180831161016b57829003601f168201915b505050505081565b60408051600180825281830190925260609160009190816020015b60608152602001906001900390816101ab579050509050600080546101cf9061108a565b80601f01602080910402602001604051908101604052809291908181526020018280546101fb9061108a565b80156102485780601f1061021d57610100808354040283529160200191610248565b820191906000526020600020905b81548152906001019060200180831161022b57829003601f168201915b505050505081600081518110610260576102606110da565b602002602001018190525030818787601060405160240161028393929190611119565b60408051601f19818403018152918152602080830180516001600160e01b03166331b137b960e01b179052905163b4a8580160e01b916102cb918c918c918c918c9101611141565b60408051601f1981840301815290829052630556f18360e41b82526102f69594939291600401611173565b60405180910390fd5b6060600080610310848601866112f6565b909250905060006103238789018961135a565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bdf95fef836040518263ffffffff1660e01b81526004016103739190611478565b600060405180830381865afa158015610390573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103b89190810190611542565b50905060006103c782826106bc565b90505b805151602082015110156106985760006103ec82600001518360200151610723565b90506103f8818761073e565b158061040d5750606082015161ffff16600114155b806104215750604082015161ffff16601014155b1561042c575061068a565b60008061044684600001518560a001518660c00151610763565b90925090506001600160a01b03821615610686576040516301ffc9a760e01b815263477cc53f60e11b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa1580156104a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c9919061159d565b156105525760405163477cc53f60e11b81526001600160a01b03831690638ef98a7e906104fe908b908b9086906004016115bf565b600060405180830381865afa15801561051b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261054391908101906115f8565b985050505050505050506106b4565b6040516301ffc9a760e01b8152639061b92360e01b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa15801561059d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c1919061159d565b156105f457604051639061b92360e01b81526001600160a01b03831690639061b923906104fe908b908b9060040161162d565b600080836001600160a01b03168960405161060f9190611652565b600060405180830381855afa9150503d806000811461064a576040519150601f19603f3d011682016040523d82523d6000602084013e61064f565b606091505b5091509150811561066b5799506106b498505050505050505050565b896040516314d3b60360e11b81526004016102f69190610fc2565b5050505b6106938161087e565b6103ca565b50836040516314d3b60360e11b81526004016102f69190610fc2565b949350505050565b61070a6040518060e001604052806060815260200160008152602001600061ffff168152602001600061ffff168152602001600063ffffffff16815260200160008152602001600081525090565b82815260c0810182905261071d8161087e565b92915050565b606060006107318484610966565b90506106b48484836109c0565b60008151835114801561075c575061075c8360008460008751610a42565b9392505050565b600060606000610774868686610a65565b90506005815110806107b1575060408051808201909152600580825264022a72998960dd1b60208301526107af918391600091908290610a42565b155b156107cf575050604080516020810190915260008082529150610876565b60006107f060058084516107e39190611684565b849190600160fd1b610aaf565b9050815181111561082757600061080a8360058551610b1b565b604080516020810190915260008152909550935061087692505050565b600061083583600584610b1b565b905080610867610846846001611697565b60018587516108559190611684565b61085f9190611684565b8691906109c0565b94509450505050610876565b50505b935093915050565b60c081015160208201819052815151116108955750565b60006108a982600001518360200151610966565b82602001516108b89190611697565b82519091506108c79082610bbd565b61ffff1660408301526108db600282611697565b82519091506108ea9082610bbd565b61ffff1660608301526108fe600282611697565b825190915061090d9082610be5565b63ffffffff166080830152610923600482611697565b82519091506000906109359083610bbd565b61ffff169050610946600283611697565b60a0840181905291506109598183611697565b60c0909301929092525050565b6000815b8351811061097a5761097a6116aa565b60006109868583610c0f565b60ff169050610996816001611697565b6109a09083611697565b9150806000036109b057506109b6565b5061096a565b6106b48382611684565b82516060906109cf8385611697565b11156109da57600080fd5b60008267ffffffffffffffff8111156109f5576109f56110c4565b6040519080825280601f01601f191660200182016040528015610a1f576020820181803683370190505b50905060208082019086860101610a37828287610c33565b509095945050505050565b6000610a4f848484610c89565b610a5a878785610c89565b149695505050505050565b60606000610a738585610c0f565b60ff16905082610a838286611697565b10610a9057610a906116aa565b610aa6610a9e856001611697565b8690836109c0565b95945050505050565b6000835b610abd8486611697565b811015610b0e57826001600160f81b031916868281518110610ae157610ae16110da565b01602001516001600160f81b03191603610afc5790506106b4565b80610b06816116c0565b915050610ab3565b5060001995945050505050565b6000838381518110610b2f57610b2f6110da565b6020910101516001600160f81b031916600360fc1b148015610b7f575083610b58846001611697565b81518110610b6857610b686110da565b6020910101516001600160f81b031916600f60fb1b145b15610bb257600080610b9d610b95866002611697565b879086610cad565b915091508015610baf5750905061075c565b50505b6106b4848484610ce9565b8151600090610bcd836002611697565b1115610bd857600080fd5b50016002015161ffff1690565b8151600090610bf5836004611697565b1115610c0057600080fd5b50016004015163ffffffff1690565b6000828281518110610c2357610c236110da565b016020015160f81c905092915050565b60208110610c6b5781518352610c4a602084611697565b9250610c57602083611697565b9150610c64602082611684565b9050610c33565b905182516020929092036101000a6000190180199091169116179052565b8251600090610c988385611697565b1115610ca357600080fd5b5091016020012090565b6000806028610cbc8585611684565b1015610ccd57506000905080610876565b600080610cdb878787610e14565b909890975095505050505050565b600080610cf7858585610edb565b604051630178b8bf60e01b8152600481018290529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630178b8bf90602401602060405180830381865afa158015610d62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8691906116f1565b90506001600160a01b038116610da15760009250505061075c565b604051631d9dabef60e11b8152600481018390526001600160a01b03821690633b3b57de90602401602060405180830381865afa158015610de6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0a91906116f1565b9695505050505050565b8251600090600190831115610e2857600080fd5b610e79565b6000603a8210602f83111615610e455750602f190190565b60478210604083111615610e5b57506036190190565b60678210606083111615610e7157506056190190565b5060ff919050565b60208501845b8481101561087357610e968183015160001a610e2d565b610ea86001830184015160001a610e2d565b60ff811460ff83141715610ec157600094505050610873565b60049190911b1760089490941b9390931792600201610e7f565b600080610efc84858751610eef9190611684565b879190601760f91b610aaf565b9050600083821015610f2457610f1d86610f17846001611697565b86610edb565b9050610f28565b8391505b80610f3f86610f378186611684565b899190610c89565b60408051602081019390935282015260600160405160208183030381529060405280519060200120925050509392505050565b60005b83811015610f8d578181015183820152602001610f75565b50506000910152565b60008151808452610fae816020860160208601610f72565b601f01601f19169290920160200192915050565b60208152600061075c6020830184610f96565b60008083601f840112610fe757600080fd5b50813567ffffffffffffffff811115610fff57600080fd5b60208301915083602082850101111561101757600080fd5b9250929050565b6000806000806040858703121561103457600080fd5b843567ffffffffffffffff8082111561104c57600080fd5b61105888838901610fd5565b9096509450602087013591508082111561107157600080fd5b5061107e87828801610fd5565b95989497509550505050565b600181811c9082168061109e57607f821691505b6020821081036110be57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60408152600061112d6040830185876110f0565b905061ffff83166020830152949350505050565b6040815260006111556040830186886110f0565b82810360208401526111688185876110f0565b979650505050505050565b600060a0820160018060a01b0388168352602060a08185015281885180845260c08601915060c08160051b8701019350828a0160005b828110156111d75760bf198887030184526111c5868351610f96565b955092840192908401906001016111a9565b505050505082810360408401526111ee8187610f96565b6001600160e01b031986166060850152905082810360808401526112128185610f96565b98975050505050505050565b6040805190810167ffffffffffffffff81118282101715611241576112416110c4565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611270576112706110c4565b604052919050565b600067ffffffffffffffff821115611292576112926110c4565b50601f01601f191660200190565b600082601f8301126112b157600080fd5b81356112c46112bf82611278565b611247565b8181528460208386010111156112d957600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561130957600080fd5b823567ffffffffffffffff8082111561132157600080fd5b61132d868387016112a0565b9350602085013591508082111561134357600080fd5b50611350858286016112a0565b9150509250929050565b6000602080838503121561136d57600080fd5b823567ffffffffffffffff8082111561138557600080fd5b818501915085601f83011261139957600080fd5b8135818111156113ab576113ab6110c4565b8060051b6113ba858201611247565b91825283810185019185810190898411156113d457600080fd5b86860192505b8383101561146b578235858111156113f25760008081fd5b86016040818c03601f190181131561140a5760008081fd5b61141261121e565b89830135888111156114245760008081fd5b6114328e8c838701016112a0565b8252509082013590878211156114485760008081fd5b6114568d8b848601016112a0565b818b01528452505091860191908601906113da565b9998505050505050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156114ef57888303603f19018552815180518785526114c388860182610f96565b91890151858303868b01529190506114db8183610f96565b96890196945050509086019060010161149f565b509098975050505050505050565b600082601f83011261150e57600080fd5b815161151c6112bf82611278565b81815284602083860101111561153157600080fd5b6106b4826020830160208701610f72565b6000806040838503121561155557600080fd5b825167ffffffffffffffff81111561156c57600080fd5b611578858286016114fd565b925050602083015163ffffffff8116811461159257600080fd5b809150509250929050565b6000602082840312156115af57600080fd5b8151801515811461075c57600080fd5b6060815260006115d26060830186610f96565b82810360208401526115e48186610f96565b90508281036040840152610e0a8185610f96565b60006020828403121561160a57600080fd5b815167ffffffffffffffff81111561162157600080fd5b6106b4848285016114fd565b6040815260006116406040830185610f96565b8281036020840152610aa68185610f96565b60008251611664818460208701610f72565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561071d5761071d61166e565b8082018082111561071d5761071d61166e565b634e487b7160e01b600052600160045260246000fd5b6000600182016116d2576116d261166e565b5060010190565b6001600160a01b03811681146116ee57600080fd5b50565b60006020828403121561170357600080fd5b815161075c816116d956fea26469706673582212201e2ca3758b497d13a921a1b2a58d025be9609f1d0d09f414265011052c187a3a64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80633f15457f1461005c57806352539968146100a05780637dc0d1d0146100b55780639061b923146100dc578063b4a85801146100ef575b600080fd5b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a8610102565b6040516100979190610fc2565b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6100a86100ea36600461101e565b610190565b6100a86100fd36600461101e565b6102ff565b6000805461010f9061108a565b80601f016020809104026020016040519081016040528092919081815260200182805461013b9061108a565b80156101885780601f1061015d57610100808354040283529160200191610188565b820191906000526020600020905b81548152906001019060200180831161016b57829003601f168201915b505050505081565b60408051600180825281830190925260609160009190816020015b60608152602001906001900390816101ab579050509050600080546101cf9061108a565b80601f01602080910402602001604051908101604052809291908181526020018280546101fb9061108a565b80156102485780601f1061021d57610100808354040283529160200191610248565b820191906000526020600020905b81548152906001019060200180831161022b57829003601f168201915b505050505081600081518110610260576102606110da565b602002602001018190525030818787601060405160240161028393929190611119565b60408051601f19818403018152918152602080830180516001600160e01b03166331b137b960e01b179052905163b4a8580160e01b916102cb918c918c918c918c9101611141565b60408051601f1981840301815290829052630556f18360e41b82526102f69594939291600401611173565b60405180910390fd5b6060600080610310848601866112f6565b909250905060006103238789018961135a565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bdf95fef836040518263ffffffff1660e01b81526004016103739190611478565b600060405180830381865afa158015610390573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103b89190810190611542565b50905060006103c782826106bc565b90505b805151602082015110156106985760006103ec82600001518360200151610723565b90506103f8818761073e565b158061040d5750606082015161ffff16600114155b806104215750604082015161ffff16601014155b1561042c575061068a565b60008061044684600001518560a001518660c00151610763565b90925090506001600160a01b03821615610686576040516301ffc9a760e01b815263477cc53f60e11b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa1580156104a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c9919061159d565b156105525760405163477cc53f60e11b81526001600160a01b03831690638ef98a7e906104fe908b908b9086906004016115bf565b600060405180830381865afa15801561051b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261054391908101906115f8565b985050505050505050506106b4565b6040516301ffc9a760e01b8152639061b92360e01b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa15801561059d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c1919061159d565b156105f457604051639061b92360e01b81526001600160a01b03831690639061b923906104fe908b908b9060040161162d565b600080836001600160a01b03168960405161060f9190611652565b600060405180830381855afa9150503d806000811461064a576040519150601f19603f3d011682016040523d82523d6000602084013e61064f565b606091505b5091509150811561066b5799506106b498505050505050505050565b896040516314d3b60360e11b81526004016102f69190610fc2565b5050505b6106938161087e565b6103ca565b50836040516314d3b60360e11b81526004016102f69190610fc2565b949350505050565b61070a6040518060e001604052806060815260200160008152602001600061ffff168152602001600061ffff168152602001600063ffffffff16815260200160008152602001600081525090565b82815260c0810182905261071d8161087e565b92915050565b606060006107318484610966565b90506106b48484836109c0565b60008151835114801561075c575061075c8360008460008751610a42565b9392505050565b600060606000610774868686610a65565b90506005815110806107b1575060408051808201909152600580825264022a72998960dd1b60208301526107af918391600091908290610a42565b155b156107cf575050604080516020810190915260008082529150610876565b60006107f060058084516107e39190611684565b849190600160fd1b610aaf565b9050815181111561082757600061080a8360058551610b1b565b604080516020810190915260008152909550935061087692505050565b600061083583600584610b1b565b905080610867610846846001611697565b60018587516108559190611684565b61085f9190611684565b8691906109c0565b94509450505050610876565b50505b935093915050565b60c081015160208201819052815151116108955750565b60006108a982600001518360200151610966565b82602001516108b89190611697565b82519091506108c79082610bbd565b61ffff1660408301526108db600282611697565b82519091506108ea9082610bbd565b61ffff1660608301526108fe600282611697565b825190915061090d9082610be5565b63ffffffff166080830152610923600482611697565b82519091506000906109359083610bbd565b61ffff169050610946600283611697565b60a0840181905291506109598183611697565b60c0909301929092525050565b6000815b8351811061097a5761097a6116aa565b60006109868583610c0f565b60ff169050610996816001611697565b6109a09083611697565b9150806000036109b057506109b6565b5061096a565b6106b48382611684565b82516060906109cf8385611697565b11156109da57600080fd5b60008267ffffffffffffffff8111156109f5576109f56110c4565b6040519080825280601f01601f191660200182016040528015610a1f576020820181803683370190505b50905060208082019086860101610a37828287610c33565b509095945050505050565b6000610a4f848484610c89565b610a5a878785610c89565b149695505050505050565b60606000610a738585610c0f565b60ff16905082610a838286611697565b10610a9057610a906116aa565b610aa6610a9e856001611697565b8690836109c0565b95945050505050565b6000835b610abd8486611697565b811015610b0e57826001600160f81b031916868281518110610ae157610ae16110da565b01602001516001600160f81b03191603610afc5790506106b4565b80610b06816116c0565b915050610ab3565b5060001995945050505050565b6000838381518110610b2f57610b2f6110da565b6020910101516001600160f81b031916600360fc1b148015610b7f575083610b58846001611697565b81518110610b6857610b686110da565b6020910101516001600160f81b031916600f60fb1b145b15610bb257600080610b9d610b95866002611697565b879086610cad565b915091508015610baf5750905061075c565b50505b6106b4848484610ce9565b8151600090610bcd836002611697565b1115610bd857600080fd5b50016002015161ffff1690565b8151600090610bf5836004611697565b1115610c0057600080fd5b50016004015163ffffffff1690565b6000828281518110610c2357610c236110da565b016020015160f81c905092915050565b60208110610c6b5781518352610c4a602084611697565b9250610c57602083611697565b9150610c64602082611684565b9050610c33565b905182516020929092036101000a6000190180199091169116179052565b8251600090610c988385611697565b1115610ca357600080fd5b5091016020012090565b6000806028610cbc8585611684565b1015610ccd57506000905080610876565b600080610cdb878787610e14565b909890975095505050505050565b600080610cf7858585610edb565b604051630178b8bf60e01b8152600481018290529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630178b8bf90602401602060405180830381865afa158015610d62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8691906116f1565b90506001600160a01b038116610da15760009250505061075c565b604051631d9dabef60e11b8152600481018390526001600160a01b03821690633b3b57de90602401602060405180830381865afa158015610de6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0a91906116f1565b9695505050505050565b8251600090600190831115610e2857600080fd5b610e79565b6000603a8210602f83111615610e455750602f190190565b60478210604083111615610e5b57506036190190565b60678210606083111615610e7157506056190190565b5060ff919050565b60208501845b8481101561087357610e968183015160001a610e2d565b610ea86001830184015160001a610e2d565b60ff811460ff83141715610ec157600094505050610873565b60049190911b1760089490941b9390931792600201610e7f565b600080610efc84858751610eef9190611684565b879190601760f91b610aaf565b9050600083821015610f2457610f1d86610f17846001611697565b86610edb565b9050610f28565b8391505b80610f3f86610f378186611684565b899190610c89565b60408051602081019390935282015260600160405160208183030381529060405280519060200120925050509392505050565b60005b83811015610f8d578181015183820152602001610f75565b50506000910152565b60008151808452610fae816020860160208601610f72565b601f01601f19169290920160200192915050565b60208152600061075c6020830184610f96565b60008083601f840112610fe757600080fd5b50813567ffffffffffffffff811115610fff57600080fd5b60208301915083602082850101111561101757600080fd5b9250929050565b6000806000806040858703121561103457600080fd5b843567ffffffffffffffff8082111561104c57600080fd5b61105888838901610fd5565b9096509450602087013591508082111561107157600080fd5b5061107e87828801610fd5565b95989497509550505050565b600181811c9082168061109e57607f821691505b6020821081036110be57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60408152600061112d6040830185876110f0565b905061ffff83166020830152949350505050565b6040815260006111556040830186886110f0565b82810360208401526111688185876110f0565b979650505050505050565b600060a0820160018060a01b0388168352602060a08185015281885180845260c08601915060c08160051b8701019350828a0160005b828110156111d75760bf198887030184526111c5868351610f96565b955092840192908401906001016111a9565b505050505082810360408401526111ee8187610f96565b6001600160e01b031986166060850152905082810360808401526112128185610f96565b98975050505050505050565b6040805190810167ffffffffffffffff81118282101715611241576112416110c4565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611270576112706110c4565b604052919050565b600067ffffffffffffffff821115611292576112926110c4565b50601f01601f191660200190565b600082601f8301126112b157600080fd5b81356112c46112bf82611278565b611247565b8181528460208386010111156112d957600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561130957600080fd5b823567ffffffffffffffff8082111561132157600080fd5b61132d868387016112a0565b9350602085013591508082111561134357600080fd5b50611350858286016112a0565b9150509250929050565b6000602080838503121561136d57600080fd5b823567ffffffffffffffff8082111561138557600080fd5b818501915085601f83011261139957600080fd5b8135818111156113ab576113ab6110c4565b8060051b6113ba858201611247565b91825283810185019185810190898411156113d457600080fd5b86860192505b8383101561146b578235858111156113f25760008081fd5b86016040818c03601f190181131561140a5760008081fd5b61141261121e565b89830135888111156114245760008081fd5b6114328e8c838701016112a0565b8252509082013590878211156114485760008081fd5b6114568d8b848601016112a0565b818b01528452505091860191908601906113da565b9998505050505050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156114ef57888303603f19018552815180518785526114c388860182610f96565b91890151858303868b01529190506114db8183610f96565b96890196945050509086019060010161149f565b509098975050505050505050565b600082601f83011261150e57600080fd5b815161151c6112bf82611278565b81815284602083860101111561153157600080fd5b6106b4826020830160208701610f72565b6000806040838503121561155557600080fd5b825167ffffffffffffffff81111561156c57600080fd5b611578858286016114fd565b925050602083015163ffffffff8116811461159257600080fd5b809150509250929050565b6000602082840312156115af57600080fd5b8151801515811461075c57600080fd5b6060815260006115d26060830186610f96565b82810360208401526115e48186610f96565b90508281036040840152610e0a8185610f96565b60006020828403121561160a57600080fd5b815167ffffffffffffffff81111561162157600080fd5b6106b4848285016114fd565b6040815260006116406040830185610f96565b8281036020840152610aa68185610f96565b60008251611664818460208701610f72565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561071d5761071d61166e565b8082018082111561071d5761071d61166e565b634e487b7160e01b600052600160045260246000fd5b6000600182016116d2576116d261166e565b5060010190565b6001600160a01b03811681146116ee57600080fd5b50565b60006020828403121561170357600080fd5b815161075c816116d956fea26469706673582212201e2ca3758b497d13a921a1b2a58d025be9609f1d0d09f414265011052c187a3a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4867,
        "contract": "contracts/dnsregistrar/OffchainDNSResolver.sol:OffchainDNSResolver",
        "label": "gatewayURL",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}