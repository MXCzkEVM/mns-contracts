{
  "address": "0x7Dc05E83A98aD9B6B9f1d961D2BFDf61d1f16B5E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENS",
          "name": "_ens",
          "type": "address"
        },
        {
          "internalType": "contract INameWrapper",
          "name": "wrapperAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedETHController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedReverseRegistrar",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "contentType",
          "type": "uint256"
        }
      ],
      "name": "ABIChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "AddrChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "newAddress",
          "type": "bytes"
        }
      ],
      "name": "AddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "Approved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "hash",
          "type": "bytes"
        }
      ],
      "name": "ContenthashChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "resource",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "record",
          "type": "bytes"
        }
      ],
      "name": "DNSRecordChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "resource",
          "type": "uint16"
        }
      ],
      "name": "DNSRecordDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "lastzonehash",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "zonehash",
          "type": "bytes"
        }
      ],
      "name": "DNSZonehashChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        }
      ],
      "name": "InterfaceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "NameChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "x",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "y",
          "type": "bytes32"
        }
      ],
      "name": "PubkeyChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "indexedKey",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "TextChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newVersion",
          "type": "uint64"
        }
      ],
      "name": "VersionChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "contentTypes",
          "type": "uint256"
        }
      ],
      "name": "ABI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "addr",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        }
      ],
      "name": "addr",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "clearRecords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "contenthash",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "resource",
          "type": "uint16"
        }
      ],
      "name": "dnsRecord",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        }
      ],
      "name": "hasDNSRecords",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "interfaceImplementer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "isApprovedFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "nodehash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicallWithNodeCheck",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "pubkey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "x",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "y",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "recordVersions",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "contentType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "setABI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "a",
          "type": "bytes"
        }
      ],
      "name": "setAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "setAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "hash",
          "type": "bytes"
        }
      ],
      "name": "setContenthash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "setDNSRecords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        }
      ],
      "name": "setInterface",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "setName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "x",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "y",
          "type": "bytes32"
        }
      ],
      "name": "setPubkey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "setText",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "hash",
          "type": "bytes"
        }
      ],
      "name": "setZonehash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        }
      ],
      "name": "text",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "zonehash",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9c30ea73369770d31557aee3a2811f26a00811b6ad2a83ae1b9caa930f506a30",
  "receipt": {
    "to": null,
    "from": "0x1Ea0de0ae730d5D12ED7cB429e220Bf4e1D0e234",
    "contractAddress": "0x7Dc05E83A98aD9B6B9f1d961D2BFDf61d1f16B5E",
    "transactionIndex": 1,
    "gasUsed": "2650520",
    "logsBloom": "0x
    "blockHash": "0xa8bfab25cbbd502ebcfc8d76c124da3879e0cb7acc101f17965dc25258bf0552",
    "transactionHash": "0x9c30ea73369770d31557aee3a2811f26a00811b6ad2a83ae1b9caa930f506a30",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 983,
        "transactionHash": "0x9c30ea73369770d31557aee3a2811f26a00811b6ad2a83ae1b9caa930f506a30",
        "address": "0x8D2c11A9B05CCd051d46AbA0d10a94ddE4381197",
        "topics": [
          "0x6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e92",
          "0x0000000000000000000000007dc05e83a98ad9b6b9f1d961d2bfdf61d1f16b5e",
          "0xb8a16d9ecf07dd67db46ab84b4e3129951c483ffe7d1f99c519e177b1cdc3a00"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xa8bfab25cbbd502ebcfc8d76c124da3879e0cb7acc101f17965dc25258bf0552"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 983,
        "transactionHash": "0x9c30ea73369770d31557aee3a2811f26a00811b6ad2a83ae1b9caa930f506a30",
        "address": "0x1Ee5F6b9083af19Ea13D4B0665aa3896DC262565",
        "topics": [
          "0xce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e82",
          "0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2",
          "0x0d5f7a63d024b6f687340948cb8997154001197db321345e980eef70aa9959d3"
        ],
        "data": "0x0000000000000000000000001ea0de0ae730d5d12ed7cb429e220bf4e1d0e234",
        "logIndex": 3,
        "blockHash": "0xa8bfab25cbbd502ebcfc8d76c124da3879e0cb7acc101f17965dc25258bf0552"
      }
    ],
    "blockNumber": 983,
    "cumulativeGasUsed": "2812944",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1Ee5F6b9083af19Ea13D4B0665aa3896DC262565",
    "0x31009FAa16100FC01746E86D3e2c136499484125",
    "0xbDf831c61e7Af1c4Fe691230056F7B2eb0565aA0",
    "0x8D2c11A9B05CCd051d46AbA0d10a94ddE4381197"
  ],
  "numDeployments": 1,
  "solcInputHash": "b0f86eb025a2bf184421368d827bdf79",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"_ens\",\"type\":\"address\"},{\"internalType\":\"contract INameWrapper\",\"name\":\"wrapperAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedETHController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedReverseRegistrar\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"}],\"name\":\"ABIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newAddress\",\"type\":\"bytes\"}],\"name\":\"AddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"ContenthashChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"record\",\"type\":\"bytes\"}],\"name\":\"DNSRecordChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"}],\"name\":\"DNSRecordDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lastzonehash\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"zonehash\",\"type\":\"bytes\"}],\"name\":\"DNSZonehashChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"InterfaceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"PubkeyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"TextChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newVersion\",\"type\":\"uint64\"}],\"name\":\"VersionChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentTypes\",\"type\":\"uint256\"}],\"name\":\"ABI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"clearRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"contenthash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"}],\"name\":\"dnsRecord\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"hasDNSRecords\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"interfaceImplementer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"isApprovedFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nodehash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicallWithNodeCheck\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"pubkey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"recordVersions\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setABI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"a\",\"type\":\"bytes\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"setContenthash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setDNSRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"setInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"setPubkey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"setZonehash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"zonehash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"ABI(bytes32,uint256)\":{\"params\":{\"contentTypes\":\"A bitwise OR of the ABI formats accepted by the caller.\",\"node\":\"The ENS node to query\"},\"returns\":{\"_0\":\"contentType The content type of the return value\",\"_1\":\"data The ABI data\"}},\"addr(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated address.\"}},\"approve(bytes32,address,bool)\":{\"details\":\"Approve a delegate to be able to updated records on a node.\"},\"clearRecords(bytes32)\":{\"params\":{\"node\":\"The node to update.\"}},\"contenthash(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated contenthash.\"}},\"dnsRecord(bytes32,bytes32,uint16)\":{\"params\":{\"name\":\"the keccak-256 hash of the fully-qualified name for which to fetch the record\",\"node\":\"the namehash of the node for which to fetch the record\",\"resource\":\"the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\"},\"returns\":{\"_0\":\"the DNS record in wire format if present, otherwise empty\"}},\"hasDNSRecords(bytes32,bytes32)\":{\"params\":{\"name\":\"the namehash of the node for which to check the records\",\"node\":\"the namehash of the node for which to check the records\"}},\"interfaceImplementer(bytes32,bytes4)\":{\"params\":{\"interfaceID\":\"The EIP 165 interface ID to check for.\",\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The address that implements this interface, or 0 if the interface is unsupported.\"}},\"isApprovedFor(address,bytes32,address)\":{\"details\":\"Check to see if the delegate has been approved by the owner for the node.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"name(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated name.\"}},\"pubkey(bytes32)\":{\"params\":{\"node\":\"The ENS node to query\"},\"returns\":{\"x\":\"The X coordinate of the curve point for the public key.\",\"y\":\"The Y coordinate of the curve point for the public key.\"}},\"setABI(bytes32,uint256,bytes)\":{\"params\":{\"contentType\":\"The content type of the ABI\",\"data\":\"The ABI data.\",\"node\":\"The node to update.\"}},\"setAddr(bytes32,address)\":{\"params\":{\"a\":\"The address to set.\",\"node\":\"The node to update.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setContenthash(bytes32,bytes)\":{\"params\":{\"hash\":\"The contenthash to set\",\"node\":\"The node to update.\"}},\"setDNSRecords(bytes32,bytes)\":{\"params\":{\"data\":\"the DNS wire format records to set\",\"node\":\"the namehash of the node for which to set the records\"}},\"setInterface(bytes32,bytes4,address)\":{\"params\":{\"implementer\":\"The address of a contract that implements this interface for this node.\",\"interfaceID\":\"The EIP 165 interface ID.\",\"node\":\"The node to update.\"}},\"setName(bytes32,string)\":{\"params\":{\"node\":\"The node to update.\"}},\"setPubkey(bytes32,bytes32,bytes32)\":{\"params\":{\"node\":\"The ENS node to query\",\"x\":\"the X coordinate of the curve point for the public key.\",\"y\":\"the Y coordinate of the curve point for the public key.\"}},\"setText(bytes32,string,string)\":{\"params\":{\"key\":\"The key to set.\",\"node\":\"The node to update.\",\"value\":\"The text data value to set.\"}},\"setZonehash(bytes32,bytes)\":{\"params\":{\"hash\":\"The zonehash to set\",\"node\":\"The node to update.\"}},\"text(bytes32,string)\":{\"params\":{\"key\":\"The text data key to query.\",\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated text data.\"}},\"zonehash(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated contenthash.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ABI(bytes32,uint256)\":{\"notice\":\"Returns the ABI associated with an ENS node. Defined in EIP205.\"},\"addr(bytes32)\":{\"notice\":\"Returns the address associated with an ENS node.\"},\"clearRecords(bytes32)\":{\"notice\":\"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"},\"contenthash(bytes32)\":{\"notice\":\"Returns the contenthash associated with an ENS node.\"},\"dnsRecord(bytes32,bytes32,uint16)\":{\"notice\":\"Obtain a DNS record.\"},\"hasDNSRecords(bytes32,bytes32)\":{\"notice\":\"Check if a given node has records.\"},\"interfaceImplementer(bytes32,bytes4)\":{\"notice\":\"Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP165 and returns `true` for the specified interfaceID, its address will be returned.\"},\"name(bytes32)\":{\"notice\":\"Returns the name associated with an ENS node, for reverse records. Defined in EIP181.\"},\"pubkey(bytes32)\":{\"notice\":\"Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619.\"},\"setABI(bytes32,uint256,bytes)\":{\"notice\":\"Sets the ABI associated with an ENS node. Nodes may have one ABI of each content type. To remove an ABI, set it to the empty string.\"},\"setAddr(bytes32,address)\":{\"notice\":\"Sets the address associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"},\"setContenthash(bytes32,bytes)\":{\"notice\":\"Sets the contenthash associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"},\"setDNSRecords(bytes32,bytes)\":{\"notice\":\"Set one or more DNS records.  Records are supplied in wire-format. Records with the same node/name/resource must be supplied one after the other to ensure the data is updated correctly. For example, if the data was supplied:     a.example.com IN A 1.2.3.4     a.example.com IN A 5.6.7.8     www.example.com IN CNAME a.example.com. then this would store the two A records for a.example.com correctly as a single RRSET, however if the data was supplied:     a.example.com IN A 1.2.3.4     www.example.com IN CNAME a.example.com.     a.example.com IN A 5.6.7.8 then this would store the first A record, the CNAME, then the second A record which would overwrite the first.\"},\"setInterface(bytes32,bytes4,address)\":{\"notice\":\"Sets an interface associated with a name. Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\"},\"setName(bytes32,string)\":{\"notice\":\"Sets the name associated with an ENS node, for reverse records. May only be called by the owner of that node in the ENS registry.\"},\"setPubkey(bytes32,bytes32,bytes32)\":{\"notice\":\"Sets the SECP256k1 public key associated with an ENS node.\"},\"setText(bytes32,string,string)\":{\"notice\":\"Sets the text data associated with an ENS node and key. May only be called by the owner of that node in the ENS registry.\"},\"setZonehash(bytes32,bytes)\":{\"notice\":\"setZonehash sets the hash for the zone. May only be called by the owner of that node in the ENS registry.\"},\"text(bytes32,string)\":{\"notice\":\"Returns the text data associated with an ENS node and key.\"},\"zonehash(bytes32)\":{\"notice\":\"zonehash obtains the hash for the zone.\"}},\"notice\":\"A simple resolver anyone can use; only allows the owner of a node to set its address.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/PublicResolver.sol\":\"PublicResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/buffer/contracts/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\\n\",\"keccak256\":\"0xd6dd3b0b327288f8e1b711a609f4040fea602e2ad4bba9febdf2f33b4e56eb0c\",\"license\":\"BSD-2-Clause\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/dnssec-oracle/BytesUtils.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\nlibrary BytesUtils {\\r\\n    error OffsetOutOfBoundsError(uint256 offset, uint256 length);\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the keccak-256 hash of a byte range.\\r\\n     * @param self The byte string to hash.\\r\\n     * @param offset The position to start hashing at.\\r\\n     * @param len The number of bytes to hash.\\r\\n     * @return The hash of the byte range.\\r\\n     */\\r\\n    function keccak(\\r\\n        bytes memory self,\\r\\n        uint256 offset,\\r\\n        uint256 len\\r\\n    ) internal pure returns (bytes32 ret) {\\r\\n        require(offset + len <= self.length);\\r\\n        assembly {\\r\\n            ret := keccak256(add(add(self, 32), offset), len)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns a positive number if `other` comes lexicographically after\\r\\n     *      `self`, a negative number if it comes before, or zero if the\\r\\n     *      contents of the two bytes are equal.\\r\\n     * @param self The first bytes to compare.\\r\\n     * @param other The second bytes to compare.\\r\\n     * @return The result of the comparison.\\r\\n     */\\r\\n    function compare(\\r\\n        bytes memory self,\\r\\n        bytes memory other\\r\\n    ) internal pure returns (int256) {\\r\\n        return compare(self, 0, self.length, other, 0, other.length);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns a positive number if `other` comes lexicographically after\\r\\n     *      `self`, a negative number if it comes before, or zero if the\\r\\n     *      contents of the two bytes are equal. Comparison is done per-rune,\\r\\n     *      on unicode codepoints.\\r\\n     * @param self The first bytes to compare.\\r\\n     * @param offset The offset of self.\\r\\n     * @param len    The length of self.\\r\\n     * @param other The second bytes to compare.\\r\\n     * @param otheroffset The offset of the other string.\\r\\n     * @param otherlen    The length of the other string.\\r\\n     * @return The result of the comparison.\\r\\n     */\\r\\n    function compare(\\r\\n        bytes memory self,\\r\\n        uint256 offset,\\r\\n        uint256 len,\\r\\n        bytes memory other,\\r\\n        uint256 otheroffset,\\r\\n        uint256 otherlen\\r\\n    ) internal pure returns (int256) {\\r\\n        if (offset + len > self.length) {\\r\\n            revert OffsetOutOfBoundsError(offset + len, self.length);\\r\\n        }\\r\\n        if (otheroffset + otherlen > other.length) {\\r\\n            revert OffsetOutOfBoundsError(otheroffset + otherlen, other.length);\\r\\n        }\\r\\n\\r\\n        uint256 shortest = len;\\r\\n        if (otherlen < len) shortest = otherlen;\\r\\n\\r\\n        uint256 selfptr;\\r\\n        uint256 otherptr;\\r\\n\\r\\n        assembly {\\r\\n            selfptr := add(self, add(offset, 32))\\r\\n            otherptr := add(other, add(otheroffset, 32))\\r\\n        }\\r\\n        for (uint256 idx = 0; idx < shortest; idx += 32) {\\r\\n            uint256 a;\\r\\n            uint256 b;\\r\\n            assembly {\\r\\n                a := mload(selfptr)\\r\\n                b := mload(otherptr)\\r\\n            }\\r\\n            if (a != b) {\\r\\n                // Mask out irrelevant bytes and check again\\r\\n                uint256 mask;\\r\\n                if (shortest - idx >= 32) {\\r\\n                    mask = type(uint256).max;\\r\\n                } else {\\r\\n                    mask = ~(2 ** (8 * (idx + 32 - shortest)) - 1);\\r\\n                }\\r\\n                int256 diff = int256(a & mask) - int256(b & mask);\\r\\n                if (diff != 0) return diff;\\r\\n            }\\r\\n            selfptr += 32;\\r\\n            otherptr += 32;\\r\\n        }\\r\\n\\r\\n        return int256(len) - int256(otherlen);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns true if the two byte ranges are equal.\\r\\n     * @param self The first byte range to compare.\\r\\n     * @param offset The offset into the first byte range.\\r\\n     * @param other The second byte range to compare.\\r\\n     * @param otherOffset The offset into the second byte range.\\r\\n     * @param len The number of bytes to compare\\r\\n     * @return True if the byte ranges are equal, false otherwise.\\r\\n     */\\r\\n    function equals(\\r\\n        bytes memory self,\\r\\n        uint256 offset,\\r\\n        bytes memory other,\\r\\n        uint256 otherOffset,\\r\\n        uint256 len\\r\\n    ) internal pure returns (bool) {\\r\\n        return keccak(self, offset, len) == keccak(other, otherOffset, len);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns true if the two byte ranges are equal with offsets.\\r\\n     * @param self The first byte range to compare.\\r\\n     * @param offset The offset into the first byte range.\\r\\n     * @param other The second byte range to compare.\\r\\n     * @param otherOffset The offset into the second byte range.\\r\\n     * @return True if the byte ranges are equal, false otherwise.\\r\\n     */\\r\\n    function equals(\\r\\n        bytes memory self,\\r\\n        uint256 offset,\\r\\n        bytes memory other,\\r\\n        uint256 otherOffset\\r\\n    ) internal pure returns (bool) {\\r\\n        return\\r\\n            keccak(self, offset, self.length - offset) ==\\r\\n            keccak(other, otherOffset, other.length - otherOffset);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Compares a range of 'self' to all of 'other' and returns True iff\\r\\n     *      they are equal.\\r\\n     * @param self The first byte range to compare.\\r\\n     * @param offset The offset into the first byte range.\\r\\n     * @param other The second byte range to compare.\\r\\n     * @return True if the byte ranges are equal, false otherwise.\\r\\n     */\\r\\n    function equals(\\r\\n        bytes memory self,\\r\\n        uint256 offset,\\r\\n        bytes memory other\\r\\n    ) internal pure returns (bool) {\\r\\n        return\\r\\n            self.length == offset + other.length &&\\r\\n            equals(self, offset, other, 0, other.length);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns true if the two byte ranges are equal.\\r\\n     * @param self The first byte range to compare.\\r\\n     * @param other The second byte range to compare.\\r\\n     * @return True if the byte ranges are equal, false otherwise.\\r\\n     */\\r\\n    function equals(\\r\\n        bytes memory self,\\r\\n        bytes memory other\\r\\n    ) internal pure returns (bool) {\\r\\n        return\\r\\n            self.length == other.length &&\\r\\n            equals(self, 0, other, 0, self.length);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the 8-bit number at the specified index of self.\\r\\n     * @param self The byte string.\\r\\n     * @param idx The index into the bytes\\r\\n     * @return The specified 8 bits of the string, interpreted as an integer.\\r\\n     */\\r\\n    function readUint8(\\r\\n        bytes memory self,\\r\\n        uint256 idx\\r\\n    ) internal pure returns (uint8 ret) {\\r\\n        return uint8(self[idx]);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the 16-bit number at the specified index of self.\\r\\n     * @param self The byte string.\\r\\n     * @param idx The index into the bytes\\r\\n     * @return The specified 16 bits of the string, interpreted as an integer.\\r\\n     */\\r\\n    function readUint16(\\r\\n        bytes memory self,\\r\\n        uint256 idx\\r\\n    ) internal pure returns (uint16 ret) {\\r\\n        require(idx + 2 <= self.length);\\r\\n        assembly {\\r\\n            ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the 32-bit number at the specified index of self.\\r\\n     * @param self The byte string.\\r\\n     * @param idx The index into the bytes\\r\\n     * @return The specified 32 bits of the string, interpreted as an integer.\\r\\n     */\\r\\n    function readUint32(\\r\\n        bytes memory self,\\r\\n        uint256 idx\\r\\n    ) internal pure returns (uint32 ret) {\\r\\n        require(idx + 4 <= self.length);\\r\\n        assembly {\\r\\n            ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the 32 byte value at the specified index of self.\\r\\n     * @param self The byte string.\\r\\n     * @param idx The index into the bytes\\r\\n     * @return The specified 32 bytes of the string.\\r\\n     */\\r\\n    function readBytes32(\\r\\n        bytes memory self,\\r\\n        uint256 idx\\r\\n    ) internal pure returns (bytes32 ret) {\\r\\n        require(idx + 32 <= self.length);\\r\\n        assembly {\\r\\n            ret := mload(add(add(self, 32), idx))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the 32 byte value at the specified index of self.\\r\\n     * @param self The byte string.\\r\\n     * @param idx The index into the bytes\\r\\n     * @return The specified 32 bytes of the string.\\r\\n     */\\r\\n    function readBytes20(\\r\\n        bytes memory self,\\r\\n        uint256 idx\\r\\n    ) internal pure returns (bytes20 ret) {\\r\\n        require(idx + 20 <= self.length);\\r\\n        assembly {\\r\\n            ret := and(\\r\\n                mload(add(add(self, 32), idx)),\\r\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the n byte value at the specified index of self.\\r\\n     * @param self The byte string.\\r\\n     * @param idx The index into the bytes.\\r\\n     * @param len The number of bytes.\\r\\n     * @return The specified 32 bytes of the string.\\r\\n     */\\r\\n    function readBytesN(\\r\\n        bytes memory self,\\r\\n        uint256 idx,\\r\\n        uint256 len\\r\\n    ) internal pure returns (bytes32 ret) {\\r\\n        require(len <= 32);\\r\\n        require(idx + len <= self.length);\\r\\n        assembly {\\r\\n            let mask := not(sub(exp(256, sub(32, len)), 1))\\r\\n            ret := and(mload(add(add(self, 32), idx)), mask)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function memcpy(uint256 dest, uint256 src, uint256 len) private pure {\\r\\n        // Copy word-length chunks while possible\\r\\n        for (; len >= 32; len -= 32) {\\r\\n            assembly {\\r\\n                mstore(dest, mload(src))\\r\\n            }\\r\\n            dest += 32;\\r\\n            src += 32;\\r\\n        }\\r\\n\\r\\n        // Copy remaining bytes\\r\\n        unchecked {\\r\\n            uint256 mask = (256 ** (32 - len)) - 1;\\r\\n            assembly {\\r\\n                let srcpart := and(mload(src), not(mask))\\r\\n                let destpart := and(mload(dest), mask)\\r\\n                mstore(dest, or(destpart, srcpart))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Copies a substring into a new byte string.\\r\\n     * @param self The byte string to copy from.\\r\\n     * @param offset The offset to start copying at.\\r\\n     * @param len The number of bytes to copy.\\r\\n     */\\r\\n    function substring(\\r\\n        bytes memory self,\\r\\n        uint256 offset,\\r\\n        uint256 len\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        require(offset + len <= self.length);\\r\\n\\r\\n        bytes memory ret = new bytes(len);\\r\\n        uint256 dest;\\r\\n        uint256 src;\\r\\n\\r\\n        assembly {\\r\\n            dest := add(ret, 32)\\r\\n            src := add(add(self, 32), offset)\\r\\n        }\\r\\n        memcpy(dest, src, len);\\r\\n\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    // Maps characters from 0x30 to 0x7A to their base32 values.\\r\\n    // 0xFF represents invalid characters in that range.\\r\\n    bytes constant base32HexTable =\\r\\n        hex\\\"00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Decodes unpadded base32 data of up to one word in length.\\r\\n     * @param self The data to decode.\\r\\n     * @param off Offset into the string to start at.\\r\\n     * @param len Number of characters to decode.\\r\\n     * @return The decoded data, left aligned.\\r\\n     */\\r\\n    function base32HexDecodeWord(\\r\\n        bytes memory self,\\r\\n        uint256 off,\\r\\n        uint256 len\\r\\n    ) internal pure returns (bytes32) {\\r\\n        require(len <= 52);\\r\\n\\r\\n        uint256 ret = 0;\\r\\n        uint8 decoded;\\r\\n        for (uint256 i = 0; i < len; i++) {\\r\\n            bytes1 char = self[off + i];\\r\\n            require(char >= 0x30 && char <= 0x7A);\\r\\n            decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\r\\n            require(decoded <= 0x20);\\r\\n            if (i == len - 1) {\\r\\n                break;\\r\\n            }\\r\\n            ret = (ret << 5) | decoded;\\r\\n        }\\r\\n\\r\\n        uint256 bitlen = len * 5;\\r\\n        if (len % 8 == 0) {\\r\\n            // Multiple of 8 characters, no padding\\r\\n            ret = (ret << 5) | decoded;\\r\\n        } else if (len % 8 == 2) {\\r\\n            // Two extra characters - 1 byte\\r\\n            ret = (ret << 3) | (decoded >> 2);\\r\\n            bitlen -= 2;\\r\\n        } else if (len % 8 == 4) {\\r\\n            // Four extra characters - 2 bytes\\r\\n            ret = (ret << 1) | (decoded >> 4);\\r\\n            bitlen -= 4;\\r\\n        } else if (len % 8 == 5) {\\r\\n            // Five extra characters - 3 bytes\\r\\n            ret = (ret << 4) | (decoded >> 1);\\r\\n            bitlen -= 1;\\r\\n        } else if (len % 8 == 7) {\\r\\n            // Seven extra characters - 4 bytes\\r\\n            ret = (ret << 2) | (decoded >> 3);\\r\\n            bitlen -= 3;\\r\\n        } else {\\r\\n            revert();\\r\\n        }\\r\\n\\r\\n        return bytes32(ret << (256 - bitlen));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Finds the first occurrence of the byte `needle` in `self`.\\r\\n     * @param self The string to search\\r\\n     * @param off The offset to start searching at\\r\\n     * @param len The number of bytes to search\\r\\n     * @param needle The byte to search for\\r\\n     * @return The offset of `needle` in `self`, or 2**256-1 if it was not found.\\r\\n     */\\r\\n    function find(\\r\\n        bytes memory self,\\r\\n        uint256 off,\\r\\n        uint256 len,\\r\\n        bytes1 needle\\r\\n    ) internal pure returns (uint256) {\\r\\n        for (uint256 idx = off; idx < off + len; idx++) {\\r\\n            if (self[idx] == needle) {\\r\\n                return idx;\\r\\n            }\\r\\n        }\\r\\n        return type(uint256).max;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb464edb8f5dc9369cb1ab2cb1c8af5e217d2fe11b32ef7288e37e2838b89dc59\"},\"contracts/dnssec-oracle/RRUtils.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BytesUtils.sol\\\";\\r\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev RRUtils is a library that provides utilities for parsing DNS resource records.\\r\\n */\\r\\nlibrary RRUtils {\\r\\n    using BytesUtils for *;\\r\\n    using Buffer for *;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\\r\\n     * @param self The byte array to read a name from.\\r\\n     * @param offset The offset to start reading at.\\r\\n     * @return The length of the DNS name at 'offset', in bytes.\\r\\n     */\\r\\n    function nameLength(\\r\\n        bytes memory self,\\r\\n        uint256 offset\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 idx = offset;\\r\\n        while (true) {\\r\\n            assert(idx < self.length);\\r\\n            uint256 labelLen = self.readUint8(idx);\\r\\n            idx += labelLen + 1;\\r\\n            if (labelLen == 0) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        return idx - offset;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a DNS format name at the specified offset of self.\\r\\n     * @param self The byte array to read a name from.\\r\\n     * @param offset The offset to start reading at.\\r\\n     * @return ret The name.\\r\\n     */\\r\\n    function readName(\\r\\n        bytes memory self,\\r\\n        uint256 offset\\r\\n    ) internal pure returns (bytes memory ret) {\\r\\n        uint256 len = nameLength(self, offset);\\r\\n        return self.substring(offset, len);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\\r\\n     * @param self The byte array to read a name from.\\r\\n     * @param offset The offset to start reading at.\\r\\n     * @return The number of labels in the DNS name at 'offset', in bytes.\\r\\n     */\\r\\n    function labelCount(\\r\\n        bytes memory self,\\r\\n        uint256 offset\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 count = 0;\\r\\n        while (true) {\\r\\n            assert(offset < self.length);\\r\\n            uint256 labelLen = self.readUint8(offset);\\r\\n            offset += labelLen + 1;\\r\\n            if (labelLen == 0) {\\r\\n                break;\\r\\n            }\\r\\n            count += 1;\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    uint256 constant RRSIG_TYPE = 0;\\r\\n    uint256 constant RRSIG_ALGORITHM = 2;\\r\\n    uint256 constant RRSIG_LABELS = 3;\\r\\n    uint256 constant RRSIG_TTL = 4;\\r\\n    uint256 constant RRSIG_EXPIRATION = 8;\\r\\n    uint256 constant RRSIG_INCEPTION = 12;\\r\\n    uint256 constant RRSIG_KEY_TAG = 16;\\r\\n    uint256 constant RRSIG_SIGNER_NAME = 18;\\r\\n\\r\\n    struct SignedSet {\\r\\n        uint16 typeCovered;\\r\\n        uint8 algorithm;\\r\\n        uint8 labels;\\r\\n        uint32 ttl;\\r\\n        uint32 expiration;\\r\\n        uint32 inception;\\r\\n        uint16 keytag;\\r\\n        bytes signerName;\\r\\n        bytes data;\\r\\n        bytes name;\\r\\n    }\\r\\n\\r\\n    function readSignedSet(\\r\\n        bytes memory data\\r\\n    ) internal pure returns (SignedSet memory self) {\\r\\n        self.typeCovered = data.readUint16(RRSIG_TYPE);\\r\\n        self.algorithm = data.readUint8(RRSIG_ALGORITHM);\\r\\n        self.labels = data.readUint8(RRSIG_LABELS);\\r\\n        self.ttl = data.readUint32(RRSIG_TTL);\\r\\n        self.expiration = data.readUint32(RRSIG_EXPIRATION);\\r\\n        self.inception = data.readUint32(RRSIG_INCEPTION);\\r\\n        self.keytag = data.readUint16(RRSIG_KEY_TAG);\\r\\n        self.signerName = readName(data, RRSIG_SIGNER_NAME);\\r\\n        self.data = data.substring(\\r\\n            RRSIG_SIGNER_NAME + self.signerName.length,\\r\\n            data.length - RRSIG_SIGNER_NAME - self.signerName.length\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function rrs(\\r\\n        SignedSet memory rrset\\r\\n    ) internal pure returns (RRIterator memory) {\\r\\n        return iterateRRs(rrset.data, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev An iterator over resource records.\\r\\n     */\\r\\n    struct RRIterator {\\r\\n        bytes data;\\r\\n        uint256 offset;\\r\\n        uint16 dnstype;\\r\\n        uint16 class;\\r\\n        uint32 ttl;\\r\\n        uint256 rdataOffset;\\r\\n        uint256 nextOffset;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Begins iterating over resource records.\\r\\n     * @param self The byte string to read from.\\r\\n     * @param offset The offset to start reading at.\\r\\n     * @return ret An iterator object.\\r\\n     */\\r\\n    function iterateRRs(\\r\\n        bytes memory self,\\r\\n        uint256 offset\\r\\n    ) internal pure returns (RRIterator memory ret) {\\r\\n        ret.data = self;\\r\\n        ret.nextOffset = offset;\\r\\n        next(ret);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true iff there are more RRs to iterate.\\r\\n     * @param iter The iterator to check.\\r\\n     * @return True iff the iterator has finished.\\r\\n     */\\r\\n    function done(RRIterator memory iter) internal pure returns (bool) {\\r\\n        return iter.offset >= iter.data.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves the iterator to the next resource record.\\r\\n     * @param iter The iterator to advance.\\r\\n     */\\r\\n    function next(RRIterator memory iter) internal pure {\\r\\n        iter.offset = iter.nextOffset;\\r\\n        if (iter.offset >= iter.data.length) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // Skip the name\\r\\n        uint256 off = iter.offset + nameLength(iter.data, iter.offset);\\r\\n\\r\\n        // Read type, class, and ttl\\r\\n        iter.dnstype = iter.data.readUint16(off);\\r\\n        off += 2;\\r\\n        iter.class = iter.data.readUint16(off);\\r\\n        off += 2;\\r\\n        iter.ttl = iter.data.readUint32(off);\\r\\n        off += 4;\\r\\n\\r\\n        // Read the rdata\\r\\n        uint256 rdataLength = iter.data.readUint16(off);\\r\\n        off += 2;\\r\\n        iter.rdataOffset = off;\\r\\n        iter.nextOffset = off + rdataLength;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the current record.\\r\\n     * @param iter The iterator.\\r\\n     * @return A new bytes object containing the owner name from the RR.\\r\\n     */\\r\\n    function name(RRIterator memory iter) internal pure returns (bytes memory) {\\r\\n        return\\r\\n            iter.data.substring(\\r\\n                iter.offset,\\r\\n                nameLength(iter.data, iter.offset)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the rdata portion of the current record.\\r\\n     * @param iter The iterator.\\r\\n     * @return A new bytes object containing the RR's RDATA.\\r\\n     */\\r\\n    function rdata(\\r\\n        RRIterator memory iter\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        return\\r\\n            iter.data.substring(\\r\\n                iter.rdataOffset,\\r\\n                iter.nextOffset - iter.rdataOffset\\r\\n            );\\r\\n    }\\r\\n\\r\\n    uint256 constant DNSKEY_FLAGS = 0;\\r\\n    uint256 constant DNSKEY_PROTOCOL = 2;\\r\\n    uint256 constant DNSKEY_ALGORITHM = 3;\\r\\n    uint256 constant DNSKEY_PUBKEY = 4;\\r\\n\\r\\n    struct DNSKEY {\\r\\n        uint16 flags;\\r\\n        uint8 protocol;\\r\\n        uint8 algorithm;\\r\\n        bytes publicKey;\\r\\n    }\\r\\n\\r\\n    function readDNSKEY(\\r\\n        bytes memory data,\\r\\n        uint256 offset,\\r\\n        uint256 length\\r\\n    ) internal pure returns (DNSKEY memory self) {\\r\\n        self.flags = data.readUint16(offset + DNSKEY_FLAGS);\\r\\n        self.protocol = data.readUint8(offset + DNSKEY_PROTOCOL);\\r\\n        self.algorithm = data.readUint8(offset + DNSKEY_ALGORITHM);\\r\\n        self.publicKey = data.substring(\\r\\n            offset + DNSKEY_PUBKEY,\\r\\n            length - DNSKEY_PUBKEY\\r\\n        );\\r\\n    }\\r\\n\\r\\n    uint256 constant DS_KEY_TAG = 0;\\r\\n    uint256 constant DS_ALGORITHM = 2;\\r\\n    uint256 constant DS_DIGEST_TYPE = 3;\\r\\n    uint256 constant DS_DIGEST = 4;\\r\\n\\r\\n    struct DS {\\r\\n        uint16 keytag;\\r\\n        uint8 algorithm;\\r\\n        uint8 digestType;\\r\\n        bytes digest;\\r\\n    }\\r\\n\\r\\n    function readDS(\\r\\n        bytes memory data,\\r\\n        uint256 offset,\\r\\n        uint256 length\\r\\n    ) internal pure returns (DS memory self) {\\r\\n        self.keytag = data.readUint16(offset + DS_KEY_TAG);\\r\\n        self.algorithm = data.readUint8(offset + DS_ALGORITHM);\\r\\n        self.digestType = data.readUint8(offset + DS_DIGEST_TYPE);\\r\\n        self.digest = data.substring(offset + DS_DIGEST, length - DS_DIGEST);\\r\\n    }\\r\\n\\r\\n    function isSubdomainOf(\\r\\n        bytes memory self,\\r\\n        bytes memory other\\r\\n    ) internal pure returns (bool) {\\r\\n        uint256 off = 0;\\r\\n        uint256 counts = labelCount(self, 0);\\r\\n        uint256 othercounts = labelCount(other, 0);\\r\\n\\r\\n        while (counts > othercounts) {\\r\\n            off = progress(self, off);\\r\\n            counts--;\\r\\n        }\\r\\n\\r\\n        return self.equals(off, other, 0);\\r\\n    }\\r\\n\\r\\n    function compareNames(\\r\\n        bytes memory self,\\r\\n        bytes memory other\\r\\n    ) internal pure returns (int256) {\\r\\n        if (self.equals(other)) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 off;\\r\\n        uint256 otheroff;\\r\\n        uint256 prevoff;\\r\\n        uint256 otherprevoff;\\r\\n        uint256 counts = labelCount(self, 0);\\r\\n        uint256 othercounts = labelCount(other, 0);\\r\\n\\r\\n        // Keep removing labels from the front of the name until both names are equal length\\r\\n        while (counts > othercounts) {\\r\\n            prevoff = off;\\r\\n            off = progress(self, off);\\r\\n            counts--;\\r\\n        }\\r\\n\\r\\n        while (othercounts > counts) {\\r\\n            otherprevoff = otheroff;\\r\\n            otheroff = progress(other, otheroff);\\r\\n            othercounts--;\\r\\n        }\\r\\n\\r\\n        // Compare the last nonequal labels to each other\\r\\n        while (counts > 0 && !self.equals(off, other, otheroff)) {\\r\\n            prevoff = off;\\r\\n            off = progress(self, off);\\r\\n            otherprevoff = otheroff;\\r\\n            otheroff = progress(other, otheroff);\\r\\n            counts -= 1;\\r\\n        }\\r\\n\\r\\n        if (off == 0) {\\r\\n            return -1;\\r\\n        }\\r\\n        if (otheroff == 0) {\\r\\n            return 1;\\r\\n        }\\r\\n\\r\\n        return\\r\\n            self.compare(\\r\\n                prevoff + 1,\\r\\n                self.readUint8(prevoff),\\r\\n                other,\\r\\n                otherprevoff + 1,\\r\\n                other.readUint8(otherprevoff)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Compares two serial numbers using RFC1982 serial number math.\\r\\n     */\\r\\n    function serialNumberGte(\\r\\n        uint32 i1,\\r\\n        uint32 i2\\r\\n    ) internal pure returns (bool) {\\r\\n        unchecked {\\r\\n            return int32(i1) - int32(i2) >= 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function progress(\\r\\n        bytes memory body,\\r\\n        uint256 off\\r\\n    ) internal pure returns (uint256) {\\r\\n        return off + 1 + body.readUint8(off);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Computes the keytag for a chunk of data.\\r\\n     * @param data The data to compute a keytag for.\\r\\n     * @return The computed key tag.\\r\\n     */\\r\\n    function computeKeytag(bytes memory data) internal pure returns (uint16) {\\r\\n        /* This function probably deserves some explanation.\\r\\n         * The DNSSEC keytag function is a checksum that relies on summing up individual bytes\\r\\n         * from the input string, with some mild bitshifting. Here's a Naive solidity implementation:\\r\\n         *\\r\\n         *     function computeKeytag(bytes memory data) internal pure returns (uint16) {\\r\\n         *         uint ac;\\r\\n         *         for (uint i = 0; i < data.length; i++) {\\r\\n         *             ac += i & 1 == 0 ? uint16(data.readUint8(i)) << 8 : data.readUint8(i);\\r\\n         *         }\\r\\n         *         return uint16(ac + (ac >> 16));\\r\\n         *     }\\r\\n         *\\r\\n         * The EVM, with its 256 bit words, is exceedingly inefficient at doing byte-by-byte operations;\\r\\n         * the code above, on reasonable length inputs, consumes over 100k gas. But we can make the EVM's\\r\\n         * large words work in our favour.\\r\\n         *\\r\\n         * The code below works by treating the input as a series of 256 bit words. It first masks out\\r\\n         * even and odd bytes from each input word, adding them to two separate accumulators `ac1` and `ac2`.\\r\\n         * The bytes are separated by empty bytes, so as long as no individual sum exceeds 2^16-1, we're\\r\\n         * effectively summing 16 different numbers with each EVM ADD opcode.\\r\\n         *\\r\\n         * Once it's added up all the inputs, it has to add all the 16 bit values in `ac1` and `ac2` together.\\r\\n         * It does this using the same trick - mask out every other value, shift to align them, add them together.\\r\\n         * After the first addition on both accumulators, there's enough room to add the two accumulators together,\\r\\n         * and the remaining sums can be done just on ac1.\\r\\n         */\\r\\n        unchecked {\\r\\n            require(data.length <= 8192, \\\"Long keys not permitted\\\");\\r\\n            uint256 ac1;\\r\\n            uint256 ac2;\\r\\n            for (uint256 i = 0; i < data.length + 31; i += 32) {\\r\\n                uint256 word;\\r\\n                assembly {\\r\\n                    word := mload(add(add(data, 32), i))\\r\\n                }\\r\\n                if (i + 32 > data.length) {\\r\\n                    uint256 unused = 256 - (data.length - i) * 8;\\r\\n                    word = (word >> unused) << unused;\\r\\n                }\\r\\n                ac1 +=\\r\\n                    (word &\\r\\n                        0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >>\\r\\n                    8;\\r\\n                ac2 += (word &\\r\\n                    0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF);\\r\\n            }\\r\\n            ac1 =\\r\\n                (ac1 &\\r\\n                    0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) +\\r\\n                ((ac1 &\\r\\n                    0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >>\\r\\n                    16);\\r\\n            ac2 =\\r\\n                (ac2 &\\r\\n                    0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) +\\r\\n                ((ac2 &\\r\\n                    0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >>\\r\\n                    16);\\r\\n            ac1 = (ac1 << 8) + ac2;\\r\\n            ac1 =\\r\\n                (ac1 &\\r\\n                    0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) +\\r\\n                ((ac1 &\\r\\n                    0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >>\\r\\n                    32);\\r\\n            ac1 =\\r\\n                (ac1 &\\r\\n                    0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) +\\r\\n                ((ac1 &\\r\\n                    0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >>\\r\\n                    64);\\r\\n            ac1 =\\r\\n                (ac1 &\\r\\n                    0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) +\\r\\n                (ac1 >> 128);\\r\\n            ac1 += (ac1 >> 16) & 0xFFFF;\\r\\n            return uint16(ac1);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2a03e8ba552ffd48bc87c9c7c49de7f34ee1da5e5cc09458280f5fedeb7e8d96\"},\"contracts/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\r\\nimport \\\"./IBaseRegistrar.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ninterface IBaseRegistrar is IERC721 {\\r\\n    event ControllerAdded(address indexed controller);\\r\\n    event ControllerRemoved(address indexed controller);\\r\\n    event NameMigrated(\\r\\n        uint256 indexed id,\\r\\n        address indexed owner,\\r\\n        uint256 expires\\r\\n    );\\r\\n    event NameRegistered(\\r\\n        uint256 indexed id,\\r\\n        address indexed owner,\\r\\n        uint256 expires\\r\\n    );\\r\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\r\\n\\r\\n    // Authorises a controller, who can register and renew domains.\\r\\n    function addController(address controller) external;\\r\\n\\r\\n    // Revoke controller permission for an address.\\r\\n    function removeController(address controller) external;\\r\\n\\r\\n    // Set the resolver for the TLD this registrar manages.\\r\\n    function setResolver(address resolver) external;\\r\\n\\r\\n    // Returns the expiration timestamp of the specified label hash.\\r\\n    function nameExpires(uint256 id) external view returns (uint256);\\r\\n\\r\\n    // Returns true if the specified name is available for registration.\\r\\n    function available(uint256 id) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Register a name.\\r\\n     */\\r\\n    function register(\\r\\n        uint256 id,\\r\\n        address owner,\\r\\n        uint256 duration\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\r\\n     */\\r\\n    function reclaim(uint256 id, address owner) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xaf6ba1e70a10caf590da42bdeac7a2b10463cc6928dc06dbea4881677b3f9610\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\ninterface ENS {\\r\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\r\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\r\\n\\r\\n    // Logged when the owner of a node transfers ownership to a new account.\\r\\n    event Transfer(bytes32 indexed node, address owner);\\r\\n\\r\\n    // Logged when the resolver for a node changes.\\r\\n    event NewResolver(bytes32 indexed node, address resolver);\\r\\n\\r\\n    // Logged when the TTL of a node changes\\r\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\r\\n\\r\\n    // Logged when an operator is added or removed.\\r\\n    event ApprovalForAll(\\r\\n        address indexed owner,\\r\\n        address indexed operator,\\r\\n        bool approved\\r\\n    );\\r\\n\\r\\n    function setRecord(\\r\\n        bytes32 node,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) external;\\r\\n\\r\\n    function setSubnodeRecord(\\r\\n        bytes32 node,\\r\\n        bytes32 label,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) external;\\r\\n\\r\\n    function setSubnodeOwner(\\r\\n        bytes32 node,\\r\\n        bytes32 label,\\r\\n        address owner\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function setResolver(bytes32 node, address resolver) external;\\r\\n\\r\\n    function setOwner(bytes32 node, address owner) external;\\r\\n\\r\\n    function setTTL(bytes32 node, uint64 ttl) external;\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    function owner(bytes32 node) external view returns (address);\\r\\n\\r\\n    function resolver(bytes32 node) external view returns (address);\\r\\n\\r\\n    function ttl(bytes32 node) external view returns (uint64);\\r\\n\\r\\n    function recordExists(bytes32 node) external view returns (bool);\\r\\n\\r\\n    function isApprovedForAll(\\r\\n        address owner,\\r\\n        address operator\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xb1fece691daf62005e0103e7699d25a2a9e0853b1eb59fd0a43042db6d43b081\"},\"contracts/resolvers/IMulticallable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IMulticallable {\\r\\n    function multicall(\\r\\n        bytes[] calldata data\\r\\n    ) external returns (bytes[] memory results);\\r\\n\\r\\n    function multicallWithNodeCheck(\\r\\n        bytes32,\\r\\n        bytes[] calldata data\\r\\n    ) external returns (bytes[] memory results);\\r\\n}\\r\\n\",\"keccak256\":\"0xc3221a84a0c50f9f0045ba207fa70defa6269c1fcd66add8ecf6ec9f0eace3f3\",\"license\":\"MIT\"},\"contracts/resolvers/Multicallable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./IMulticallable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\n\\r\\nabstract contract Multicallable is IMulticallable, ERC165 {\\r\\n    function _multicall(\\r\\n        bytes32 nodehash,\\r\\n        bytes[] calldata data\\r\\n    ) internal returns (bytes[] memory results) {\\r\\n        results = new bytes[](data.length);\\r\\n        for (uint256 i = 0; i < data.length; i++) {\\r\\n            if (nodehash != bytes32(0)) {\\r\\n                bytes32 txNamehash = bytes32(data[i][4:36]);\\r\\n                require(\\r\\n                    txNamehash == nodehash,\\r\\n                    \\\"multicall: All records must have a matching namehash\\\"\\r\\n                );\\r\\n            }\\r\\n            (bool success, bytes memory result) = address(this).delegatecall(\\r\\n                data[i]\\r\\n            );\\r\\n            require(success);\\r\\n            results[i] = result;\\r\\n        }\\r\\n        return results;\\r\\n    }\\r\\n\\r\\n    // This function provides an extra security check when called\\r\\n    // from priviledged contracts (such as EthRegistrarController)\\r\\n    // that can set records on behalf of the node owners\\r\\n    function multicallWithNodeCheck(\\r\\n        bytes32 nodehash,\\r\\n        bytes[] calldata data\\r\\n    ) external returns (bytes[] memory results) {\\r\\n        return _multicall(nodehash, data);\\r\\n    }\\r\\n\\r\\n    function multicall(\\r\\n        bytes[] calldata data\\r\\n    ) public override returns (bytes[] memory results) {\\r\\n        return _multicall(bytes32(0), data);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceID\\r\\n    ) public view virtual override returns (bool) {\\r\\n        return\\r\\n            interfaceID == type(IMulticallable).interfaceId ||\\r\\n            super.supportsInterface(interfaceID);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeeb8dad2e385a40f75ef6a86bf2a8268778f8b7cfaaec8c5204dd88f09df26af\",\"license\":\"MIT\"},\"contracts/resolvers/PublicResolver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.17 <0.9.0;\\r\\n\\r\\nimport \\\"../registry/ENS.sol\\\";\\r\\nimport \\\"./profiles/ABIResolver.sol\\\";\\r\\nimport \\\"./profiles/AddrResolver.sol\\\";\\r\\nimport \\\"./profiles/ContentHashResolver.sol\\\";\\r\\nimport \\\"./profiles/DNSResolver.sol\\\";\\r\\nimport \\\"./profiles/InterfaceResolver.sol\\\";\\r\\nimport \\\"./profiles/NameResolver.sol\\\";\\r\\nimport \\\"./profiles/PubkeyResolver.sol\\\";\\r\\nimport \\\"./profiles/TextResolver.sol\\\";\\r\\nimport \\\"./Multicallable.sol\\\";\\r\\nimport {ReverseClaimer} from \\\"../reverseRegistrar/ReverseClaimer.sol\\\";\\r\\nimport {INameWrapper} from \\\"../wrapper/INameWrapper.sol\\\";\\r\\n\\r\\n/**\\r\\n * A simple resolver anyone can use; only allows the owner of a node to set its\\r\\n * address.\\r\\n */\\r\\ncontract PublicResolver is\\r\\n    Multicallable,\\r\\n    ABIResolver,\\r\\n    AddrResolver,\\r\\n    ContentHashResolver,\\r\\n    DNSResolver,\\r\\n    InterfaceResolver,\\r\\n    NameResolver,\\r\\n    PubkeyResolver,\\r\\n    TextResolver,\\r\\n    ReverseClaimer\\r\\n{\\r\\n    ENS immutable ens;\\r\\n    INameWrapper immutable nameWrapper;\\r\\n    address immutable trustedETHController;\\r\\n    address immutable trustedReverseRegistrar;\\r\\n\\r\\n    /**\\r\\n     * A mapping of operators. An address that is authorised for an address\\r\\n     * may make any changes to the name that the owner could, but may not update\\r\\n     * the set of authorisations.\\r\\n     * (owner, operator) => approved\\r\\n     */\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    /**\\r\\n     * A mapping of delegates. A delegate that is authorised by an owner\\r\\n     * for a name may make changes to the name's resolver, but may not update\\r\\n     * the set of token approvals.\\r\\n     * (owner, name, delegate) => approved\\r\\n     */\\r\\n    mapping(address => mapping(bytes32 => mapping(address => bool)))\\r\\n        private _tokenApprovals;\\r\\n\\r\\n    // Logged when an operator is added or removed.\\r\\n    event ApprovalForAll(\\r\\n        address indexed owner,\\r\\n        address indexed operator,\\r\\n        bool approved\\r\\n    );\\r\\n\\r\\n    // Logged when a delegate is approved or  an approval is revoked.\\r\\n    event Approved(\\r\\n        address owner,\\r\\n        bytes32 indexed node,\\r\\n        address indexed delegate,\\r\\n        bool indexed approved\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        ENS _ens,\\r\\n        INameWrapper wrapperAddress,\\r\\n        address _trustedETHController,\\r\\n        address _trustedReverseRegistrar\\r\\n    ) ReverseClaimer(_ens, msg.sender) {\\r\\n        ens = _ens;\\r\\n        nameWrapper = wrapperAddress;\\r\\n        trustedETHController = _trustedETHController;\\r\\n        trustedReverseRegistrar = _trustedReverseRegistrar;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) external {\\r\\n        require(\\r\\n            msg.sender != operator,\\r\\n            \\\"ERC1155: setting approval status for self\\\"\\r\\n        );\\r\\n\\r\\n        _operatorApprovals[msg.sender][operator] = approved;\\r\\n        emit ApprovalForAll(msg.sender, operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(\\r\\n        address account,\\r\\n        address operator\\r\\n    ) public view returns (bool) {\\r\\n        return _operatorApprovals[account][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve a delegate to be able to updated records on a node.\\r\\n     */\\r\\n    function approve(bytes32 node, address delegate, bool approved) external {\\r\\n        require(msg.sender != delegate, \\\"Setting delegate status for self\\\");\\r\\n\\r\\n        _tokenApprovals[msg.sender][node][delegate] = approved;\\r\\n        emit Approved(msg.sender, node, delegate, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check to see if the delegate has been approved by the owner for the node.\\r\\n     */\\r\\n    function isApprovedFor(\\r\\n        address owner,\\r\\n        bytes32 node,\\r\\n        address delegate\\r\\n    ) public view returns (bool) {\\r\\n        return _tokenApprovals[owner][node][delegate];\\r\\n    }\\r\\n\\r\\n    function isAuthorised(bytes32 node) internal view override returns (bool) {\\r\\n        if (\\r\\n            msg.sender == trustedETHController ||\\r\\n            msg.sender == trustedReverseRegistrar\\r\\n        ) {\\r\\n            return true;\\r\\n        }\\r\\n        address owner = ens.owner(node);\\r\\n        if (owner == address(nameWrapper)) {\\r\\n            owner = nameWrapper.ownerOf(uint256(node));\\r\\n        }\\r\\n        return\\r\\n            owner == msg.sender ||\\r\\n            isApprovedForAll(owner, msg.sender) ||\\r\\n            isApprovedFor(owner, node, msg.sender);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceID\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        override(\\r\\n            Multicallable,\\r\\n            ABIResolver,\\r\\n            AddrResolver,\\r\\n            ContentHashResolver,\\r\\n            DNSResolver,\\r\\n            InterfaceResolver,\\r\\n            NameResolver,\\r\\n            PubkeyResolver,\\r\\n            TextResolver\\r\\n        )\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceID);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa71e8cd935a9ee978db80ffd7b311d5f9ca450878aef80354a5654d457ff975a\",\"license\":\"MIT\"},\"contracts/resolvers/ResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"./profiles/IVersionableResolver.sol\\\";\\r\\n\\r\\nabstract contract ResolverBase is ERC165, IVersionableResolver {\\r\\n    mapping(bytes32 => uint64) public recordVersions;\\r\\n\\r\\n    function isAuthorised(bytes32 node) internal view virtual returns (bool);\\r\\n\\r\\n    modifier authorised(bytes32 node) {\\r\\n        require(isAuthorised(node));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Increments the record version associated with an ENS node.\\r\\n     * May only be called by the owner of that node in the ENS registry.\\r\\n     * @param node The node to update.\\r\\n     */\\r\\n    function clearRecords(bytes32 node) public virtual authorised(node) {\\r\\n        recordVersions[node]++;\\r\\n        emit VersionChanged(node, recordVersions[node]);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceID\\r\\n    ) public view virtual override returns (bool) {\\r\\n        return\\r\\n            interfaceID == type(IVersionableResolver).interfaceId ||\\r\\n            super.supportsInterface(interfaceID);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7ab26aeeb5b3b3641f570cc26fb7881759861043981801a2f52a07435583cf78\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/ABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"./IABIResolver.sol\\\";\\r\\nimport \\\"../ResolverBase.sol\\\";\\r\\n\\r\\nabstract contract ABIResolver is IABIResolver, ResolverBase {\\r\\n    mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes))) versionable_abis;\\r\\n\\r\\n    /**\\r\\n     * Sets the ABI associated with an ENS node.\\r\\n     * Nodes may have one ABI of each content type. To remove an ABI, set it to\\r\\n     * the empty string.\\r\\n     * @param node The node to update.\\r\\n     * @param contentType The content type of the ABI\\r\\n     * @param data The ABI data.\\r\\n     */\\r\\n    function setABI(\\r\\n        bytes32 node,\\r\\n        uint256 contentType,\\r\\n        bytes calldata data\\r\\n    ) external virtual authorised(node) {\\r\\n        // Content types must be powers of 2\\r\\n        require(((contentType - 1) & contentType) == 0);\\r\\n\\r\\n        versionable_abis[recordVersions[node]][node][contentType] = data;\\r\\n        emit ABIChanged(node, contentType);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the ABI associated with an ENS node.\\r\\n     * Defined in EIP205.\\r\\n     * @param node The ENS node to query\\r\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\r\\n     * @return contentType The content type of the return value\\r\\n     * @return data The ABI data\\r\\n     */\\r\\n    function ABI(\\r\\n        bytes32 node,\\r\\n        uint256 contentTypes\\r\\n    ) external view virtual override returns (uint256, bytes memory) {\\r\\n        mapping(uint256 => bytes) storage abiset = versionable_abis[\\r\\n            recordVersions[node]\\r\\n        ][node];\\r\\n\\r\\n        for (\\r\\n            uint256 contentType = 1;\\r\\n            contentType <= contentTypes;\\r\\n            contentType <<= 1\\r\\n        ) {\\r\\n            if (\\r\\n                (contentType & contentTypes) != 0 &&\\r\\n                abiset[contentType].length > 0\\r\\n            ) {\\r\\n                return (contentType, abiset[contentType]);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (0, bytes(\\\"\\\"));\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceID\\r\\n    ) public view virtual override returns (bool) {\\r\\n        return\\r\\n            interfaceID == type(IABIResolver).interfaceId ||\\r\\n            super.supportsInterface(interfaceID);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb683ea73b5b9b0d7bb4a01daba51850cc1e17b192aa813cbd6719281f9853f56\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/AddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"../ResolverBase.sol\\\";\\r\\nimport \\\"./IAddrResolver.sol\\\";\\r\\nimport \\\"./IAddressResolver.sol\\\";\\r\\n\\r\\nabstract contract AddrResolver is\\r\\n    IAddrResolver,\\r\\n    IAddressResolver,\\r\\n    ResolverBase\\r\\n{\\r\\n    uint256 private constant COIN_TYPE_ETH = 60;\\r\\n\\r\\n    mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes))) versionable_addresses;\\r\\n\\r\\n    /**\\r\\n     * Sets the address associated with an ENS node.\\r\\n     * May only be called by the owner of that node in the ENS registry.\\r\\n     * @param node The node to update.\\r\\n     * @param a The address to set.\\r\\n     */\\r\\n    function setAddr(\\r\\n        bytes32 node,\\r\\n        address a\\r\\n    ) external virtual authorised(node) {\\r\\n        setAddr(node, COIN_TYPE_ETH, addressToBytes(a));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the address associated with an ENS node.\\r\\n     * @param node The ENS node to query.\\r\\n     * @return The associated address.\\r\\n     */\\r\\n    function addr(\\r\\n        bytes32 node\\r\\n    ) public view virtual override returns (address payable) {\\r\\n        bytes memory a = addr(node, COIN_TYPE_ETH);\\r\\n        if (a.length == 0) {\\r\\n            return payable(0);\\r\\n        }\\r\\n        return bytesToAddress(a);\\r\\n    }\\r\\n\\r\\n    function setAddr(\\r\\n        bytes32 node,\\r\\n        uint256 coinType,\\r\\n        bytes memory a\\r\\n    ) public virtual authorised(node) {\\r\\n        emit AddressChanged(node, coinType, a);\\r\\n        if (coinType == COIN_TYPE_ETH) {\\r\\n            emit AddrChanged(node, bytesToAddress(a));\\r\\n        }\\r\\n        versionable_addresses[recordVersions[node]][node][coinType] = a;\\r\\n    }\\r\\n\\r\\n    function addr(\\r\\n        bytes32 node,\\r\\n        uint256 coinType\\r\\n    ) public view virtual override returns (bytes memory) {\\r\\n        return versionable_addresses[recordVersions[node]][node][coinType];\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceID\\r\\n    ) public view virtual override returns (bool) {\\r\\n        return\\r\\n            interfaceID == type(IAddrResolver).interfaceId ||\\r\\n            interfaceID == type(IAddressResolver).interfaceId ||\\r\\n            super.supportsInterface(interfaceID);\\r\\n    }\\r\\n\\r\\n    function bytesToAddress(\\r\\n        bytes memory b\\r\\n    ) internal pure returns (address payable a) {\\r\\n        require(b.length == 20);\\r\\n        assembly {\\r\\n            a := div(mload(add(b, 32)), exp(256, 12))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addressToBytes(address a) internal pure returns (bytes memory b) {\\r\\n        b = new bytes(20);\\r\\n        assembly {\\r\\n            mstore(add(b, 32), mul(a, exp(256, 12)))\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2f29923d55c19ec14c77693d0e62900df9a3c7ad5241769c755b0b45d5599e97\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/ContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"../ResolverBase.sol\\\";\\r\\nimport \\\"./IContentHashResolver.sol\\\";\\r\\n\\r\\nabstract contract ContentHashResolver is IContentHashResolver, ResolverBase {\\r\\n    mapping(uint64 => mapping(bytes32 => bytes)) versionable_hashes;\\r\\n\\r\\n    /**\\r\\n     * Sets the contenthash associated with an ENS node.\\r\\n     * May only be called by the owner of that node in the ENS registry.\\r\\n     * @param node The node to update.\\r\\n     * @param hash The contenthash to set\\r\\n     */\\r\\n    function setContenthash(\\r\\n        bytes32 node,\\r\\n        bytes calldata hash\\r\\n    ) external virtual authorised(node) {\\r\\n        versionable_hashes[recordVersions[node]][node] = hash;\\r\\n        emit ContenthashChanged(node, hash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the contenthash associated with an ENS node.\\r\\n     * @param node The ENS node to query.\\r\\n     * @return The associated contenthash.\\r\\n     */\\r\\n    function contenthash(\\r\\n        bytes32 node\\r\\n    ) external view virtual override returns (bytes memory) {\\r\\n        return versionable_hashes[recordVersions[node]][node];\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceID\\r\\n    ) public view virtual override returns (bool) {\\r\\n        return\\r\\n            interfaceID == type(IContentHashResolver).interfaceId ||\\r\\n            super.supportsInterface(interfaceID);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4715a1c7f27d7de6082b5cc04e807a1385429650e0e87e12f0cad8aaba0f3e65\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/DNSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"../ResolverBase.sol\\\";\\r\\nimport \\\"../../dnssec-oracle/RRUtils.sol\\\";\\r\\nimport \\\"./IDNSRecordResolver.sol\\\";\\r\\nimport \\\"./IDNSZoneResolver.sol\\\";\\r\\n\\r\\nabstract contract DNSResolver is\\r\\n    IDNSRecordResolver,\\r\\n    IDNSZoneResolver,\\r\\n    ResolverBase\\r\\n{\\r\\n    using RRUtils for *;\\r\\n    using BytesUtils for bytes;\\r\\n\\r\\n    // Zone hashes for the domains.\\r\\n    // A zone hash is an EIP-1577 content hash in binary format that should point to a\\r\\n    // resource containing a single zonefile.\\r\\n    // node => contenthash\\r\\n    mapping(uint64 => mapping(bytes32 => bytes)) private versionable_zonehashes;\\r\\n\\r\\n    // The records themselves.  Stored as binary RRSETs\\r\\n    // node => version => name => resource => data\\r\\n    mapping(uint64 => mapping(bytes32 => mapping(bytes32 => mapping(uint16 => bytes))))\\r\\n        private versionable_records;\\r\\n\\r\\n    // Count of number of entries for a given name.  Required for DNS resolvers\\r\\n    // when resolving wildcards.\\r\\n    // node => version => name => number of records\\r\\n    mapping(uint64 => mapping(bytes32 => mapping(bytes32 => uint16)))\\r\\n        private versionable_nameEntriesCount;\\r\\n\\r\\n    /**\\r\\n     * Set one or more DNS records.  Records are supplied in wire-format.\\r\\n     * Records with the same node/name/resource must be supplied one after the\\r\\n     * other to ensure the data is updated correctly. For example, if the data\\r\\n     * was supplied:\\r\\n     *     a.example.com IN A 1.2.3.4\\r\\n     *     a.example.com IN A 5.6.7.8\\r\\n     *     www.example.com IN CNAME a.example.com.\\r\\n     * then this would store the two A records for a.example.com correctly as a\\r\\n     * single RRSET, however if the data was supplied:\\r\\n     *     a.example.com IN A 1.2.3.4\\r\\n     *     www.example.com IN CNAME a.example.com.\\r\\n     *     a.example.com IN A 5.6.7.8\\r\\n     * then this would store the first A record, the CNAME, then the second A\\r\\n     * record which would overwrite the first.\\r\\n     *\\r\\n     * @param node the namehash of the node for which to set the records\\r\\n     * @param data the DNS wire format records to set\\r\\n     */\\r\\n    function setDNSRecords(\\r\\n        bytes32 node,\\r\\n        bytes calldata data\\r\\n    ) external virtual authorised(node) {\\r\\n        uint16 resource = 0;\\r\\n        uint256 offset = 0;\\r\\n        bytes memory name;\\r\\n        bytes memory value;\\r\\n        bytes32 nameHash;\\r\\n        uint64 version = recordVersions[node];\\r\\n        // Iterate over the data to add the resource records\\r\\n        for (\\r\\n            RRUtils.RRIterator memory iter = data.iterateRRs(0);\\r\\n            !iter.done();\\r\\n            iter.next()\\r\\n        ) {\\r\\n            if (resource == 0) {\\r\\n                resource = iter.dnstype;\\r\\n                name = iter.name();\\r\\n                nameHash = keccak256(abi.encodePacked(name));\\r\\n                value = bytes(iter.rdata());\\r\\n            } else {\\r\\n                bytes memory newName = iter.name();\\r\\n                if (resource != iter.dnstype || !name.equals(newName)) {\\r\\n                    setDNSRRSet(\\r\\n                        node,\\r\\n                        name,\\r\\n                        resource,\\r\\n                        data,\\r\\n                        offset,\\r\\n                        iter.offset - offset,\\r\\n                        value.length == 0,\\r\\n                        version\\r\\n                    );\\r\\n                    resource = iter.dnstype;\\r\\n                    offset = iter.offset;\\r\\n                    name = newName;\\r\\n                    nameHash = keccak256(name);\\r\\n                    value = bytes(iter.rdata());\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        if (name.length > 0) {\\r\\n            setDNSRRSet(\\r\\n                node,\\r\\n                name,\\r\\n                resource,\\r\\n                data,\\r\\n                offset,\\r\\n                data.length - offset,\\r\\n                value.length == 0,\\r\\n                version\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Obtain a DNS record.\\r\\n     * @param node the namehash of the node for which to fetch the record\\r\\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\r\\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\r\\n     * @return the DNS record in wire format if present, otherwise empty\\r\\n     */\\r\\n    function dnsRecord(\\r\\n        bytes32 node,\\r\\n        bytes32 name,\\r\\n        uint16 resource\\r\\n    ) public view virtual override returns (bytes memory) {\\r\\n        return versionable_records[recordVersions[node]][node][name][resource];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Check if a given node has records.\\r\\n     * @param node the namehash of the node for which to check the records\\r\\n     * @param name the namehash of the node for which to check the records\\r\\n     */\\r\\n    function hasDNSRecords(\\r\\n        bytes32 node,\\r\\n        bytes32 name\\r\\n    ) public view virtual returns (bool) {\\r\\n        return (versionable_nameEntriesCount[recordVersions[node]][node][\\r\\n            name\\r\\n        ] != 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * setZonehash sets the hash for the zone.\\r\\n     * May only be called by the owner of that node in the ENS registry.\\r\\n     * @param node The node to update.\\r\\n     * @param hash The zonehash to set\\r\\n     */\\r\\n    function setZonehash(\\r\\n        bytes32 node,\\r\\n        bytes calldata hash\\r\\n    ) external virtual authorised(node) {\\r\\n        uint64 currentRecordVersion = recordVersions[node];\\r\\n        bytes memory oldhash = versionable_zonehashes[currentRecordVersion][\\r\\n            node\\r\\n        ];\\r\\n        versionable_zonehashes[currentRecordVersion][node] = hash;\\r\\n        emit DNSZonehashChanged(node, oldhash, hash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * zonehash obtains the hash for the zone.\\r\\n     * @param node The ENS node to query.\\r\\n     * @return The associated contenthash.\\r\\n     */\\r\\n    function zonehash(\\r\\n        bytes32 node\\r\\n    ) external view virtual override returns (bytes memory) {\\r\\n        return versionable_zonehashes[recordVersions[node]][node];\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceID\\r\\n    ) public view virtual override returns (bool) {\\r\\n        return\\r\\n            interfaceID == type(IDNSRecordResolver).interfaceId ||\\r\\n            interfaceID == type(IDNSZoneResolver).interfaceId ||\\r\\n            super.supportsInterface(interfaceID);\\r\\n    }\\r\\n\\r\\n    function setDNSRRSet(\\r\\n        bytes32 node,\\r\\n        bytes memory name,\\r\\n        uint16 resource,\\r\\n        bytes memory data,\\r\\n        uint256 offset,\\r\\n        uint256 size,\\r\\n        bool deleteRecord,\\r\\n        uint64 version\\r\\n    ) private {\\r\\n        bytes32 nameHash = keccak256(name);\\r\\n        bytes memory rrData = data.substring(offset, size);\\r\\n        if (deleteRecord) {\\r\\n            if (\\r\\n                versionable_records[version][node][nameHash][resource].length !=\\r\\n                0\\r\\n            ) {\\r\\n                versionable_nameEntriesCount[version][node][nameHash]--;\\r\\n            }\\r\\n            delete (versionable_records[version][node][nameHash][resource]);\\r\\n            emit DNSRecordDeleted(node, name, resource);\\r\\n        } else {\\r\\n            if (\\r\\n                versionable_records[version][node][nameHash][resource].length ==\\r\\n                0\\r\\n            ) {\\r\\n                versionable_nameEntriesCount[version][node][nameHash]++;\\r\\n            }\\r\\n            versionable_records[version][node][nameHash][resource] = rrData;\\r\\n            emit DNSRecordChanged(node, name, resource, rrData);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x044df513ed3526989b579b16c4f66a19a2893af8bb012cf169381d453b74edbb\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface IABIResolver {\\r\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\r\\n\\r\\n    /**\\r\\n     * Returns the ABI associated with an ENS node.\\r\\n     * Defined in EIP205.\\r\\n     * @param node The ENS node to query\\r\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\r\\n     * @return contentType The content type of the return value\\r\\n     * @return data The ABI data\\r\\n     */\\r\\n    function ABI(\\r\\n        bytes32 node,\\r\\n        uint256 contentTypes\\r\\n    ) external view returns (uint256, bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xae06aa52e52dd52ba12242c331662eaf85a25f39406242bab046578a08a10d64\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\n/**\\r\\n * Interface for the legacy (ETH-only) addr function.\\r\\n */\\r\\ninterface IAddrResolver {\\r\\n    event AddrChanged(bytes32 indexed node, address a);\\r\\n\\r\\n    /**\\r\\n     * Returns the address associated with an ENS node.\\r\\n     * @param node The ENS node to query.\\r\\n     * @return The associated address.\\r\\n     */\\r\\n    function addr(bytes32 node) external view returns (address payable);\\r\\n}\\r\\n\",\"keccak256\":\"0xc28e76da1c1d807c571ad75c169fa8496a8c63f21a4955171cf36b709924de20\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\n/**\\r\\n * Interface for the new (multicoin) addr function.\\r\\n */\\r\\ninterface IAddressResolver {\\r\\n    event AddressChanged(\\r\\n        bytes32 indexed node,\\r\\n        uint256 coinType,\\r\\n        bytes newAddress\\r\\n    );\\r\\n\\r\\n    function addr(\\r\\n        bytes32 node,\\r\\n        uint256 coinType\\r\\n    ) external view returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x5040e2be35e303880581d50dbda555dd0e5f9e11f0e818e453c3bfd8b3800b95\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface IContentHashResolver {\\r\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\r\\n\\r\\n    /**\\r\\n     * Returns the contenthash associated with an ENS node.\\r\\n     * @param node The ENS node to query.\\r\\n     * @return The associated contenthash.\\r\\n     */\\r\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x6e849ab5f033476fe52662ac7540630f42fdb79f772adf279a2a377f8f7d07d3\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IDNSRecordResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface IDNSRecordResolver {\\r\\n    // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\r\\n    event DNSRecordChanged(\\r\\n        bytes32 indexed node,\\r\\n        bytes name,\\r\\n        uint16 resource,\\r\\n        bytes record\\r\\n    );\\r\\n    // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\r\\n    event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\r\\n\\r\\n    /**\\r\\n     * Obtain a DNS record.\\r\\n     * @param node the namehash of the node for which to fetch the record\\r\\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\r\\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\r\\n     * @return the DNS record in wire format if present, otherwise empty\\r\\n     */\\r\\n    function dnsRecord(\\r\\n        bytes32 node,\\r\\n        bytes32 name,\\r\\n        uint16 resource\\r\\n    ) external view returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xd08097a7b1fb907dd8a031fffbb964ee392639d40f00a83a499f16b8ef03fe11\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IDNSZoneResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface IDNSZoneResolver {\\r\\n    // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\\r\\n    event DNSZonehashChanged(\\r\\n        bytes32 indexed node,\\r\\n        bytes lastzonehash,\\r\\n        bytes zonehash\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * zonehash obtains the hash for the zone.\\r\\n     * @param node The ENS node to query.\\r\\n     * @return The associated contenthash.\\r\\n     */\\r\\n    function zonehash(bytes32 node) external view returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xb7f766cf8c0c6c0589c0a2ecb6e15fb7d67cff9c0277be93f20440fd318a5cf9\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IInterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface IInterfaceResolver {\\r\\n    event InterfaceChanged(\\r\\n        bytes32 indexed node,\\r\\n        bytes4 indexed interfaceID,\\r\\n        address implementer\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * Returns the address of a contract that implements the specified interface for this name.\\r\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\r\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\r\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\r\\n     * will be returned.\\r\\n     * @param node The ENS node to query.\\r\\n     * @param interfaceID The EIP 165 interface ID to check for.\\r\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\r\\n     */\\r\\n    function interfaceImplementer(\\r\\n        bytes32 node,\\r\\n        bytes4 interfaceID\\r\\n    ) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xeb9380e62d4a71e2d1c1d210796641bc5a5e85d076883c69a01cc2b35dd8f2a4\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface INameResolver {\\r\\n    event NameChanged(bytes32 indexed node, string name);\\r\\n\\r\\n    /**\\r\\n     * Returns the name associated with an ENS node, for reverse records.\\r\\n     * Defined in EIP181.\\r\\n     * @param node The ENS node to query.\\r\\n     * @return The associated name.\\r\\n     */\\r\\n    function name(bytes32 node) external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x23978bee98a262ac81b48b9e609ba3c2f58dad1e2ce90e064e3db36e98db4f2f\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IPubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface IPubkeyResolver {\\r\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\r\\n\\r\\n    /**\\r\\n     * Returns the SECP256k1 public key associated with an ENS node.\\r\\n     * Defined in EIP 619.\\r\\n     * @param node The ENS node to query\\r\\n     * @return x The X coordinate of the curve point for the public key.\\r\\n     * @return y The Y coordinate of the curve point for the public key.\\r\\n     */\\r\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\r\\n}\\r\\n\",\"keccak256\":\"0x660a4697f9bf2271cc93e986ab0bb1584d96a6c6441f4c017c9a23f205e74153\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface ITextResolver {\\r\\n    event TextChanged(\\r\\n        bytes32 indexed node,\\r\\n        string indexed indexedKey,\\r\\n        string key,\\r\\n        string value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * Returns the text data associated with an ENS node and key.\\r\\n     * @param node The ENS node to query.\\r\\n     * @param key The text data key to query.\\r\\n     * @return The associated text data.\\r\\n     */\\r\\n    function text(\\r\\n        bytes32 node,\\r\\n        string calldata key\\r\\n    ) external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x9ff1a5c32e2d5a4680027ab172651da5f9ff68129abeec02650bcc8b471b9659\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IVersionableResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface IVersionableResolver {\\r\\n    event VersionChanged(bytes32 indexed node, uint64 newVersion);\\r\\n\\r\\n    function recordVersions(bytes32 node) external view returns (uint64);\\r\\n}\\r\\n\",\"keccak256\":\"0x5f1b4de08824e89dd4a8e8aef8c96cfddd8579ac25e9fbb6e1efb14ba23ddea7\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/InterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport \\\"../ResolverBase.sol\\\";\\r\\nimport \\\"./AddrResolver.sol\\\";\\r\\nimport \\\"./IInterfaceResolver.sol\\\";\\r\\n\\r\\nabstract contract InterfaceResolver is IInterfaceResolver, AddrResolver {\\r\\n    mapping(uint64 => mapping(bytes32 => mapping(bytes4 => address))) versionable_interfaces;\\r\\n\\r\\n    /**\\r\\n     * Sets an interface associated with a name.\\r\\n     * Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\\r\\n     * @param node The node to update.\\r\\n     * @param interfaceID The EIP 165 interface ID.\\r\\n     * @param implementer The address of a contract that implements this interface for this node.\\r\\n     */\\r\\n    function setInterface(\\r\\n        bytes32 node,\\r\\n        bytes4 interfaceID,\\r\\n        address implementer\\r\\n    ) external virtual authorised(node) {\\r\\n        versionable_interfaces[recordVersions[node]][node][\\r\\n            interfaceID\\r\\n        ] = implementer;\\r\\n        emit InterfaceChanged(node, interfaceID, implementer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the address of a contract that implements the specified interface for this name.\\r\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\r\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\r\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\r\\n     * will be returned.\\r\\n     * @param node The ENS node to query.\\r\\n     * @param interfaceID The EIP 165 interface ID to check for.\\r\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\r\\n     */\\r\\n    function interfaceImplementer(\\r\\n        bytes32 node,\\r\\n        bytes4 interfaceID\\r\\n    ) external view virtual override returns (address) {\\r\\n        address implementer = versionable_interfaces[recordVersions[node]][\\r\\n            node\\r\\n        ][interfaceID];\\r\\n        if (implementer != address(0)) {\\r\\n            return implementer;\\r\\n        }\\r\\n\\r\\n        address a = addr(node);\\r\\n        if (a == address(0)) {\\r\\n            return address(0);\\r\\n        }\\r\\n\\r\\n        (bool success, bytes memory returnData) = a.staticcall(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"supportsInterface(bytes4)\\\",\\r\\n                type(IERC165).interfaceId\\r\\n            )\\r\\n        );\\r\\n        if (!success || returnData.length < 32 || returnData[31] == 0) {\\r\\n            // EIP 165 not supported by target\\r\\n            return address(0);\\r\\n        }\\r\\n\\r\\n        (success, returnData) = a.staticcall(\\r\\n            abi.encodeWithSignature(\\\"supportsInterface(bytes4)\\\", interfaceID)\\r\\n        );\\r\\n        if (!success || returnData.length < 32 || returnData[31] == 0) {\\r\\n            // Specified interface not supported by target\\r\\n            return address(0);\\r\\n        }\\r\\n\\r\\n        return a;\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceID\\r\\n    ) public view virtual override returns (bool) {\\r\\n        return\\r\\n            interfaceID == type(IInterfaceResolver).interfaceId ||\\r\\n            super.supportsInterface(interfaceID);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3a819e0163d19548e8ccbb3113196594ead8fe6b198d5a69bbc39ca69f9fb00c\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/NameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"../ResolverBase.sol\\\";\\r\\nimport \\\"./INameResolver.sol\\\";\\r\\n\\r\\nabstract contract NameResolver is INameResolver, ResolverBase {\\r\\n    mapping(uint64 => mapping(bytes32 => string)) versionable_names;\\r\\n\\r\\n    /**\\r\\n     * Sets the name associated with an ENS node, for reverse records.\\r\\n     * May only be called by the owner of that node in the ENS registry.\\r\\n     * @param node The node to update.\\r\\n     */\\r\\n    function setName(\\r\\n        bytes32 node,\\r\\n        string calldata newName\\r\\n    ) external virtual authorised(node) {\\r\\n        versionable_names[recordVersions[node]][node] = newName;\\r\\n        emit NameChanged(node, newName);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the name associated with an ENS node, for reverse records.\\r\\n     * Defined in EIP181.\\r\\n     * @param node The ENS node to query.\\r\\n     * @return The associated name.\\r\\n     */\\r\\n    function name(\\r\\n        bytes32 node\\r\\n    ) external view virtual override returns (string memory) {\\r\\n        return versionable_names[recordVersions[node]][node];\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceID\\r\\n    ) public view virtual override returns (bool) {\\r\\n        return\\r\\n            interfaceID == type(INameResolver).interfaceId ||\\r\\n            super.supportsInterface(interfaceID);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf03054e60efe6c56be3003b6d29daa71983d46e3f8c54f77d79e9d0cc598eacf\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/PubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"../ResolverBase.sol\\\";\\r\\nimport \\\"./IPubkeyResolver.sol\\\";\\r\\n\\r\\nabstract contract PubkeyResolver is IPubkeyResolver, ResolverBase {\\r\\n    struct PublicKey {\\r\\n        bytes32 x;\\r\\n        bytes32 y;\\r\\n    }\\r\\n\\r\\n    mapping(uint64 => mapping(bytes32 => PublicKey)) versionable_pubkeys;\\r\\n\\r\\n    /**\\r\\n     * Sets the SECP256k1 public key associated with an ENS node.\\r\\n     * @param node The ENS node to query\\r\\n     * @param x the X coordinate of the curve point for the public key.\\r\\n     * @param y the Y coordinate of the curve point for the public key.\\r\\n     */\\r\\n    function setPubkey(\\r\\n        bytes32 node,\\r\\n        bytes32 x,\\r\\n        bytes32 y\\r\\n    ) external virtual authorised(node) {\\r\\n        versionable_pubkeys[recordVersions[node]][node] = PublicKey(x, y);\\r\\n        emit PubkeyChanged(node, x, y);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the SECP256k1 public key associated with an ENS node.\\r\\n     * Defined in EIP 619.\\r\\n     * @param node The ENS node to query\\r\\n     * @return x The X coordinate of the curve point for the public key.\\r\\n     * @return y The Y coordinate of the curve point for the public key.\\r\\n     */\\r\\n    function pubkey(\\r\\n        bytes32 node\\r\\n    ) external view virtual override returns (bytes32 x, bytes32 y) {\\r\\n        uint64 currentRecordVersion = recordVersions[node];\\r\\n        return (\\r\\n            versionable_pubkeys[currentRecordVersion][node].x,\\r\\n            versionable_pubkeys[currentRecordVersion][node].y\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceID\\r\\n    ) public view virtual override returns (bool) {\\r\\n        return\\r\\n            interfaceID == type(IPubkeyResolver).interfaceId ||\\r\\n            super.supportsInterface(interfaceID);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0a232c7fb11a78c934e7da6ca11a9ab0e78a439ad02a49c062a6678dea106d53\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/TextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"../ResolverBase.sol\\\";\\r\\nimport \\\"./ITextResolver.sol\\\";\\r\\n\\r\\nabstract contract TextResolver is ITextResolver, ResolverBase {\\r\\n    mapping(uint64 => mapping(bytes32 => mapping(string => string))) versionable_texts;\\r\\n\\r\\n    /**\\r\\n     * Sets the text data associated with an ENS node and key.\\r\\n     * May only be called by the owner of that node in the ENS registry.\\r\\n     * @param node The node to update.\\r\\n     * @param key The key to set.\\r\\n     * @param value The text data value to set.\\r\\n     */\\r\\n    function setText(\\r\\n        bytes32 node,\\r\\n        string calldata key,\\r\\n        string calldata value\\r\\n    ) external virtual authorised(node) {\\r\\n        versionable_texts[recordVersions[node]][node][key] = value;\\r\\n        emit TextChanged(node, key, key, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the text data associated with an ENS node and key.\\r\\n     * @param node The ENS node to query.\\r\\n     * @param key The text data key to query.\\r\\n     * @return The associated text data.\\r\\n     */\\r\\n    function text(\\r\\n        bytes32 node,\\r\\n        string calldata key\\r\\n    ) external view virtual override returns (string memory) {\\r\\n        return versionable_texts[recordVersions[node]][node][key];\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceID\\r\\n    ) public view virtual override returns (bool) {\\r\\n        return\\r\\n            interfaceID == type(ITextResolver).interfaceId ||\\r\\n            super.supportsInterface(interfaceID);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x55ed633a25dbe2de00a940eb3e299b05215dc405aa7aafd38ce8cf2544cf8c9c\",\"license\":\"MIT\"},\"contracts/reverseRegistrar/IReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\ninterface IReverseRegistrar {\\r\\n    function setDefaultResolver(address resolver) external;\\r\\n\\r\\n    function claim(address owner) external returns (bytes32);\\r\\n\\r\\n    function claimForAddr(\\r\\n        address addr,\\r\\n        address owner,\\r\\n        address resolver\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function claimWithResolver(\\r\\n        address owner,\\r\\n        address resolver\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function setName(string memory name) external returns (bytes32);\\r\\n\\r\\n    function setNameForAddr(\\r\\n        address addr,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        string memory name\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function node(address addr) external pure returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x6acf52dff6d755236ebbab385c6d87fa305d6682f16c6f016737123fbcb36fee\"},\"contracts/reverseRegistrar/ReverseClaimer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.17 <0.9.0;\\r\\n\\r\\nimport {ENS} from \\\"../registry/ENS.sol\\\";\\r\\nimport {IReverseRegistrar} from \\\"../reverseRegistrar/IReverseRegistrar.sol\\\";\\r\\n\\r\\ncontract ReverseClaimer {\\r\\n    bytes32 constant ADDR_REVERSE_NODE =\\r\\n        0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\r\\n\\r\\n    constructor(ENS ens, address claimant) {\\r\\n        IReverseRegistrar reverseRegistrar = IReverseRegistrar(\\r\\n            ens.owner(ADDR_REVERSE_NODE)\\r\\n        );\\r\\n        reverseRegistrar.claim(claimant);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x97b68693fb055f0b33a5667c1f58e30afdb81174f26eab4f7ee7f02d8e65a899\",\"license\":\"MIT\"},\"contracts/wrapper/IMetadataService.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ~0.8.17;\\r\\n\\r\\ninterface IMetadataService {\\r\\n    function uri(uint256) external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x0e3865c7cc5844146972a662d5fcbd81b418be9cb95a731132681b5f4c5ac8f2\",\"license\":\"MIT\"},\"contracts/wrapper/INameWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ~0.8.17;\\r\\n\\r\\nimport \\\"../registry/ENS.sol\\\";\\r\\nimport \\\"../ethregistrar/IBaseRegistrar.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"./IMetadataService.sol\\\";\\r\\nimport \\\"./INameWrapperUpgrade.sol\\\";\\r\\n\\r\\nuint32 constant CANNOT_UNWRAP = 1;\\r\\nuint32 constant CANNOT_BURN_FUSES = 2;\\r\\nuint32 constant CANNOT_TRANSFER = 4;\\r\\nuint32 constant CANNOT_SET_RESOLVER = 8;\\r\\nuint32 constant CANNOT_SET_TTL = 16;\\r\\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\\r\\nuint32 constant CANNOT_APPROVE = 64;\\r\\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\\r\\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\\r\\nuint32 constant IS_DOT_ETH = 1 << 17;\\r\\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\\r\\nuint32 constant CAN_DO_EVERYTHING = 0;\\r\\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\\r\\n// all fuses apart from IS_DOT_ETH\\r\\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\\r\\n\\r\\ninterface INameWrapper is IERC1155 {\\r\\n    event NameWrapped(\\r\\n        bytes32 indexed node,\\r\\n        bytes name,\\r\\n        address owner,\\r\\n        uint32 fuses,\\r\\n        uint64 expiry\\r\\n    );\\r\\n\\r\\n    event NameUnwrapped(bytes32 indexed node, address owner);\\r\\n\\r\\n    event FusesSet(bytes32 indexed node, uint32 fuses);\\r\\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\\r\\n\\r\\n    function ens() external view returns (ENS);\\r\\n\\r\\n    function registrar() external view returns (IBaseRegistrar);\\r\\n\\r\\n    function metadataService() external view returns (IMetadataService);\\r\\n\\r\\n    function names(bytes32) external view returns (bytes memory);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function upgradeContract() external view returns (INameWrapperUpgrade);\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\r\\n\\r\\n    function wrap(\\r\\n        bytes calldata name,\\r\\n        address wrappedOwner,\\r\\n        address resolver\\r\\n    ) external;\\r\\n\\r\\n    function wrapETH2LD(\\r\\n        string calldata label,\\r\\n        address wrappedOwner,\\r\\n        uint16 ownerControlledFuses,\\r\\n        address resolver\\r\\n    ) external returns (uint64 expires);\\r\\n\\r\\n    function registerAndWrapETH2LD(\\r\\n        string calldata label,\\r\\n        address wrappedOwner,\\r\\n        uint256 duration,\\r\\n        address resolver,\\r\\n        uint16 ownerControlledFuses\\r\\n    ) external returns (uint256 registrarExpiry);\\r\\n\\r\\n    function renew(\\r\\n        uint256 labelHash,\\r\\n        uint256 duration\\r\\n    ) external returns (uint256 expires);\\r\\n\\r\\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\\r\\n\\r\\n    function unwrapETH2LD(\\r\\n        bytes32 label,\\r\\n        address newRegistrant,\\r\\n        address newController\\r\\n    ) external;\\r\\n\\r\\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\\r\\n\\r\\n    function setFuses(\\r\\n        bytes32 node,\\r\\n        uint16 ownerControlledFuses\\r\\n    ) external returns (uint32 newFuses);\\r\\n\\r\\n    function setChildFuses(\\r\\n        bytes32 parentNode,\\r\\n        bytes32 labelhash,\\r\\n        uint32 fuses,\\r\\n        uint64 expiry\\r\\n    ) external;\\r\\n\\r\\n    function setSubnodeRecord(\\r\\n        bytes32 node,\\r\\n        string calldata label,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl,\\r\\n        uint32 fuses,\\r\\n        uint64 expiry\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function setRecord(\\r\\n        bytes32 node,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) external;\\r\\n\\r\\n    function setSubnodeOwner(\\r\\n        bytes32 node,\\r\\n        string calldata label,\\r\\n        address newOwner,\\r\\n        uint32 fuses,\\r\\n        uint64 expiry\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function extendExpiry(\\r\\n        bytes32 node,\\r\\n        bytes32 labelhash,\\r\\n        uint64 expiry\\r\\n    ) external returns (uint64);\\r\\n\\r\\n    function canModifyName(\\r\\n        bytes32 node,\\r\\n        address addr\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function setResolver(bytes32 node, address resolver) external;\\r\\n\\r\\n    function setTTL(bytes32 node, uint64 ttl) external;\\r\\n\\r\\n    function ownerOf(uint256 id) external view returns (address owner);\\r\\n\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    function getApproved(uint256 tokenId) external view returns (address);\\r\\n\\r\\n    function getData(\\r\\n        uint256 id\\r\\n    ) external view returns (address, uint32, uint64);\\r\\n\\r\\n    function setMetadataService(IMetadataService _metadataService) external;\\r\\n\\r\\n    function uri(uint256 tokenId) external view returns (string memory);\\r\\n\\r\\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\\r\\n\\r\\n    function allFusesBurned(\\r\\n        bytes32 node,\\r\\n        uint32 fuseMask\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function isWrapped(bytes32) external view returns (bool);\\r\\n\\r\\n    function isWrapped(bytes32, bytes32) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xda719a7d21e720db7530541cc740b3e637047d79f22806f02af633406efbac90\",\"license\":\"MIT\"},\"contracts/wrapper/INameWrapperUpgrade.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ~0.8.17;\\r\\n\\r\\ninterface INameWrapperUpgrade {\\r\\n    function wrapFromUpgrade(\\r\\n        bytes calldata name,\\r\\n        address wrappedOwner,\\r\\n        uint32 fuses,\\r\\n        uint64 expiry,\\r\\n        address approved,\\r\\n        bytes calldata extraData\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xff7834752740bd7dde3939a257f83ed45c2d323d8ca0fae007ad086e98d1afad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80638b95dd7111610104578063c8690233116100a2578063e32954eb11610071578063e32954eb14610500578063e59d895d14610513578063e985e9c514610526578063f1cb7e061461056257600080fd5b8063c869023314610441578063ce3decdc14610499578063d5fa2b00146104ac578063d700ff33146104bf57600080fd5b8063a8fa5682116100de578063a8fa5682146103b7578063a9784b3e146103ca578063ac9650d81461040e578063bc1c58d11461042e57600080fd5b80638b95dd711461037e578063a22cb46514610391578063a4b91a01146103a457600080fd5b80633603d7581161017c5780635c98042b1161014b5780635c98042b14610332578063623195b014610345578063691f343114610358578063773722131461036b57600080fd5b80633603d758146102a15780633b3b57de146102b45780634cbf6ba4146102c757806359d1d43c1461031257600080fd5b8063124a319c116101b8578063124a319c1461022f5780632203ab561461025a57806329cd62ea1461027b578063304e6ade1461028e57600080fd5b806301ffc9a7146101df5780630af179d71461020757806310f13a8c1461021c575b600080fd5b6101f26101ed36600461230a565b610575565b60405190151581526020015b60405180910390f35b61021a610215366004612366565b610586565b005b61021a61022a3660046123b1565b61078f565b61024261023d36600461242a565b61085b565b6040516001600160a01b0390911681526020016101fe565b61026d610268366004612456565b610aac565b6040516101fe9291906124c8565b61021a6102893660046124e1565b610be2565b61021a61029c366004612366565b610c7c565b61021a6102af36600461250d565b610cf7565b6102426102c236600461250d565b610d98565b6101f26102d5366004612456565b600082815260208181526040808320546001600160401b031683526006825280832094835293815283822092825291909152205461ffff16151590565b610325610320366004612366565b610dca565b6040516101fe9190612526565b61032561034036600461250d565b610ea9565b61021a610353366004612539565b610f67565b61032561036636600461250d565b611003565b61021a610379366004612366565b61103c565b61021a61038c3660046125a1565b6110b7565b61021a61039f366004612689565b611196565b61021a6103b23660046126b5565b611271565b6103256103c53660046126f3565b61133e565b6101f26103d8366004612733565b6001600160a01b039283166000908152600c60209081526040808320948352938152838220929094168152925290205460ff1690565b61042161041c3660046127ae565b61138b565b6040516101fe91906127ef565b61032561043c36600461250d565b611399565b61048461044f36600461250d565b600081815260208181526040808320546001600160401b03168352600982528083209383529290522080546001909101549091565b604080519283526020830191909152016101fe565b61021a6104a7366004612366565b6113d2565b61021a6104ba366004612851565b611513565b6104e86104cd36600461250d565b6000602081905290815260409020546001600160401b031681565b6040516001600160401b0390911681526020016101fe565b61042161050e366004612881565b61153a565b61021a6105213660046128bf565b61154f565b6101f26105343660046128f4565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205460ff1690565b610325610570366004612456565b6115f5565b6000610580826116bc565b92915050565b82610590816116e1565b61059957600080fd5b600084815260208181526040808320548151601f87018490048402810184019092528582528392606092839285926001600160401b039091169183916105fe9183918d908d908190840183828082843760009201919091525092939250506119169050565b90505b80515160208201511015610728578661ffff16600003610666578060400151965061062b81611977565b94508460405160200161063e9190612922565b60405160208183030381529060405280519060200120925061065f81611998565b935061071a565b600061067182611977565b9050816040015161ffff168861ffff16141580610695575061069386826119b4565b155b15610718576106f18c878a8e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505060208801518d91506106e8908290612954565b8b51158a6119d2565b81604001519750816020015196508095508580519060200120935061071582611998565b94505b505b61072381611c39565b610601565b50835115610783576107838a85888c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c925061077a91508290508f612954565b895115886119d2565b50505050505050505050565b84610799816116e1565b6107a257600080fd5b600086815260208181526040808320546001600160401b03168352600a8252808320898452909152908190209051849184916107e19089908990612967565b908152602001604051809103902091826107fc9291906129ff565b50848460405161080d929190612967565b6040518091039020867f448bc014f1536726cf8d54ff3d6481ed3cbc683c2591ca204274009afa09b1a18787878760405161084b9493929190612ae7565b60405180910390a3505050505050565b600082815260208181526040808320546001600160401b031683526007825280832085845282528083206001600160e01b0319851684529091528120546001600160a01b031680156108ae579050610580565b60006108b985610d98565b90506001600160a01b0381166108d457600092505050610580565b6040516301ffc9a760e01b602482015260009081906001600160a01b0384169060440160408051601f198184030181529181526020820180516001600160e01b03166301ffc9a760e01b1790525161092c9190612922565b600060405180830381855afa9150503d8060008114610967576040519150601f19603f3d011682016040523d82523d6000602084013e61096c565b606091505b509150915081158061097f575060208151105b806109a9575080601f8151811061099857610998612b19565b01602001516001600160f81b031916155b156109bb576000945050505050610580565b6040516001600160e01b0319871660248201526001600160a01b0384169060440160408051601f198184030181529181526020820180516001600160e01b03166301ffc9a760e01b17905251610a119190612922565b600060405180830381855afa9150503d8060008114610a4c576040519150601f19603f3d011682016040523d82523d6000602084013e610a51565b606091505b509092509050811580610a65575060208151105b80610a8f575080601f81518110610a7e57610a7e612b19565b01602001516001600160f81b031916155b15610aa1576000945050505050610580565b509095945050505050565b600082815260208181526040808320546001600160401b03168352600180835281842086855290925282206060915b848111610bc25780851615801590610b0b575060008181526020839052604081208054610b0790612977565b9050115b15610bba5780826000838152602001908152602001600020808054610b2f90612977565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5b90612977565b8015610ba85780601f10610b7d57610100808354040283529160200191610ba8565b820191906000526020600020905b815481529060010190602001808311610b8b57829003601f168201915b50505050509050935093505050610bdb565b60011b610adb565b5060006040518060200160405280600081525092509250505b9250929050565b82610bec816116e1565b610bf557600080fd5b60408051808201825284815260208082018581526000888152808352848120546001600160401b031681526009835284812089825283528490209251835551600190920191909155815185815290810184905285917f1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e4691015b60405180910390a250505050565b82610c86816116e1565b610c8f57600080fd5b600084815260208181526040808320546001600160401b03168352600382528083208784529091529020610cc48385836129ff565b50837fe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d75788484604051610c6e929190612b2f565b80610d01816116e1565b610d0a57600080fd5b600082815260208190526040812080546001600160401b031691610d2d83612b43565b82546101009290920a6001600160401b03818102199093169183160217909155600084815260208181526040918290205491519190921681528492507fc6621ccb8f3f5a04bb6502154b2caf6adf5983fe76dfef1cfc9c42e3579db444910160405180910390a25050565b600080610da683603c6115f5565b90508051600003610dba5750600092915050565b610dc381611d21565b9392505050565b600083815260208181526040808320546001600160401b03168352600a825280832086845290915290819020905160609190610e099085908590612967565b90815260200160405180910390208054610e2290612977565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4e90612977565b8015610e9b5780601f10610e7057610100808354040283529160200191610e9b565b820191906000526020600020905b815481529060010190602001808311610e7e57829003601f168201915b505050505090509392505050565b600081815260208181526040808320546001600160401b03168352600482528083208484529091529020805460609190610ee290612977565b80601f0160208091040260200160405190810160405280929190818152602001828054610f0e90612977565b8015610f5b5780601f10610f3057610100808354040283529160200191610f5b565b820191906000526020600020905b815481529060010190602001808311610f3e57829003601f168201915b50505050509050919050565b83610f71816116e1565b610f7a57600080fd5b83610f86600182612954565b1615610f9157600080fd5b600085815260208181526040808320546001600160401b031683526001825280832088845282528083208784529091529020610fce8385836129ff565b50604051849086907faa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe390600090a35050505050565b600081815260208181526040808320546001600160401b03168352600882528083208484529091529020805460609190610ee290612977565b82611046816116e1565b61104f57600080fd5b600084815260208181526040808320546001600160401b031683526008825280832087845290915290206110848385836129ff565b50837fb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f78484604051610c6e929190612b2f565b826110c1816116e1565b6110ca57600080fd5b837f65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af75284846040516110fc9291906124c8565b60405180910390a2603c830361115357837f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd261113784611d21565b6040516001600160a01b03909116815260200160405180910390a25b600084815260208181526040808320546001600160401b03168352600282528083208784528252808320868452909152902061118f8382612b69565b5050505050565b6001600160a01b03821633036112055760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084015b60405180910390fd5b336000818152600b602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6001600160a01b03821633036112c95760405162461bcd60e51b815260206004820181905260248201527f53657474696e672064656c65676174652073746174757320666f722073656c6660448201526064016111fc565b336000818152600c6020908152604080832087845282528083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519384529286917ff0ddb3b04746704017f9aa8bd728fcc2c1d11675041205350018915f5e4750a0910160405180910390a4505050565b600083815260208181526040808320546001600160401b03168352600582528083208684528252808320858452825280832061ffff851684529091529020805460609190610e2290612977565b6060610dc360008484611d40565b600081815260208181526040808320546001600160401b03168352600382528083208484529091529020805460609190610ee290612977565b826113dc816116e1565b6113e557600080fd5b600084815260208181526040808320546001600160401b0316808452600483528184208885529092528220805491929161141e90612977565b80601f016020809104026020016040519081016040528092919081815260200182805461144a90612977565b80156114975780601f1061146c57610100808354040283529160200191611497565b820191906000526020600020905b81548152906001019060200180831161147a57829003601f168201915b505050506001600160401b03841660009081526004602090815260408083208b845290915290209192506114ce90508587836129ff565b50857f8f15ed4b723ef428f250961da8315675b507046737e19319fc1a4d81bfe87f8582878760405161150393929190612c28565b60405180910390a2505050505050565b8161151d816116e1565b61152657600080fd5b61153583603c61038c85611f0f565b505050565b6060611547848484611d40565b949350505050565b82611559816116e1565b61156257600080fd5b600084815260208181526040808320546001600160401b031683526007825280832087845282528083206001600160e01b031987168085529083529281902080546001600160a01b0319166001600160a01b038716908117909155905190815286917f7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa910160405180910390a350505050565b600082815260208181526040808320546001600160401b03168352600282528083208584528252808320848452909152902080546060919061163690612977565b80601f016020809104026020016040519081016040528092919081815260200182805461166290612977565b80156116af5780601f10611684576101008083540402835291602001916116af565b820191906000526020600020905b81548152906001019060200180831161169257829003601f168201915b5050505050905092915050565b60006001600160e01b03198216631674750f60e21b1480610580575061058082611f3f565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806117425750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b1561174f57506001919050565b6040516302571be360e01b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906302571be390602401602060405180830381865afa1580156117b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117db9190612c58565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316036118a2576040516331a9108f60e11b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa15801561187b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189f9190612c58565b90505b6001600160a01b0381163314806118dc57506001600160a01b0381166000908152600b6020908152604080832033845290915290205460ff165b80610dc357506001600160a01b0381166000908152600c60209081526040808320868452825280832033845290915290205460ff16610dc3565b6119646040518060e001604052806060815260200160008152602001600061ffff168152602001600061ffff168152602001600063ffffffff16815260200160008152602001600081525090565b82815260c0810182905261058081611c39565b602081015181516060916105809161198f9082611f64565b84519190611fbe565b60a081015160c08201516060916105809161198f908290612954565b600081518351148015610dc35750610dc38360008460008751612034565b8651602088012060006119e6878787611fbe565b90508315611b0d576001600160401b03831660009081526005602090815260408083208d84528252808320858452825280832061ffff8c16845290915290208054611a3090612977565b159050611a8e576001600160401b03831660009081526006602090815260408083208d845282528083208584529091528120805461ffff1691611a7283612c75565b91906101000a81548161ffff021916908361ffff160217905550505b6001600160401b03831660009081526005602090815260408083208d84528252808320858452825280832061ffff8c1684529091528120611ace91612297565b897f03528ed0c2a3ebc993b12ce3c16bb382f9c7d88ef7d8a1bf290eaf35955a12078a8a604051611b00929190612c93565b60405180910390a2610783565b6001600160401b03831660009081526005602090815260408083208d84528252808320858452825280832061ffff8c16845290915290208054611b4f90612977565b9050600003611baf576001600160401b03831660009081526006602090815260408083208d845282528083208584529091528120805461ffff1691611b9383612cb9565b91906101000a81548161ffff021916908361ffff160217905550505b6001600160401b03831660009081526005602090815260408083208d84528252808320858452825280832061ffff8c1684529091529020611bf08282612b69565b50897f52a608b3303a48862d07a73d82fa221318c0027fbbcfb1b2329bface3f19ff2b8a8a84604051611c2593929190612cd0565b60405180910390a250505050505050505050565b60c08101516020820181905281515111611c505750565b6000611c6482600001518360200151611f64565b8260200151611c739190612cff565b8251909150611c829082612057565b61ffff166040830152611c96600282612cff565b8251909150611ca59082612057565b61ffff166060830152611cb9600282612cff565b8251909150611cc8908261207f565b63ffffffff166080830152611cde600482612cff565b8251909150600090611cf09083612057565b61ffff169050611d01600283612cff565b60a084018190529150611d148183612cff565b60c0909301929092525050565b60008151601414611d3157600080fd5b5060200151600160601b900490565b6060816001600160401b03811115611d5a57611d5a61258b565b604051908082528060200260200182016040528015611d8d57816020015b6060815260200190600190039081611d785790505b50905060005b82811015611f07578415611e4f576000848483818110611db557611db5612b19565b9050602002810190611dc79190612d12565b611dd691602491600491612d58565b611ddf91612d82565b9050858114611e4d5760405162461bcd60e51b815260206004820152603460248201527f6d756c746963616c6c3a20416c6c207265636f726473206d7573742068617665604482015273040c240dac2e8c6d0d2dcce40dcc2dacad0c2e6d60631b60648201526084016111fc565b505b60008030868685818110611e6557611e65612b19565b9050602002810190611e779190612d12565b604051611e85929190612967565b600060405180830381855af49150503d8060008114611ec0576040519150601f19603f3d011682016040523d82523d6000602084013e611ec5565b606091505b509150915081611ed457600080fd5b80848481518110611ee757611ee7612b19565b602002602001018190525050508080611eff90612da0565b915050611d93565b509392505050565b604080516014808252818301909252606091602082018180368337505050600160601b9290920260208301525090565b60006001600160e01b0319821663c869023360e01b14806105805750610580826120a9565b6000815b83518110611f7857611f78612db9565b6000611f8485836120ce565b60ff169050611f94816001612cff565b611f9e9083612cff565b915080600003611fae5750611fb4565b50611f68565b6115478382612954565b8251606090611fcd8385612cff565b1115611fd857600080fd5b6000826001600160401b03811115611ff257611ff261258b565b6040519080825280601f01601f19166020018201604052801561201c576020820181803683370190505b50905060208082019086860101610aa18282876120f2565b6000612041848484612148565b61204c878785612148565b149695505050505050565b8151600090612067836002612cff565b111561207257600080fd5b50016002015161ffff1690565b815160009061208f836004612cff565b111561209a57600080fd5b50016004015163ffffffff1690565b60006001600160e01b0319821663691f343160e01b148061058057506105808261216c565b60008282815181106120e2576120e2612b19565b016020015160f81c905092915050565b6020811061212a5781518352612109602084612cff565b9250612116602083612cff565b9150612123602082612954565b90506120f2565b905182516020929092036101000a6000190180199091169116179052565b82516000906121578385612cff565b111561216257600080fd5b5091016020012090565b60006001600160e01b031982166304928c6760e21b148061058057506105808260006001600160e01b0319821663547d2b4160e11b14806121bd57506001600160e01b03198216635c98042b60e01b145b8061058057506105808260006001600160e01b0319821663bc1c58d160e01b148061058057506105808260006001600160e01b03198216631d9dabef60e11b148061221857506001600160e01b031982166378e5bf0360e11b145b8061058057506105808260006001600160e01b03198216631101d5ab60e11b148061058057506105808260006001600160e01b0319821663d700ff3360e01b148061058057506105808260006001600160e01b03198216634fbf043360e01b148061058057506301ffc9a760e01b6001600160e01b0319831614610580565b5080546122a390612977565b6000825580601f106122b3575050565b601f0160209004906000526020600020908101906122d191906122d4565b50565b5b808211156122e957600081556001016122d5565b5090565b80356001600160e01b03198116811461230557600080fd5b919050565b60006020828403121561231c57600080fd5b610dc3826122ed565b60008083601f84011261233757600080fd5b5081356001600160401b0381111561234e57600080fd5b602083019150836020828501011115610bdb57600080fd5b60008060006040848603121561237b57600080fd5b8335925060208401356001600160401b0381111561239857600080fd5b6123a486828701612325565b9497909650939450505050565b6000806000806000606086880312156123c957600080fd5b8535945060208601356001600160401b03808211156123e757600080fd5b6123f389838a01612325565b9096509450604088013591508082111561240c57600080fd5b5061241988828901612325565b969995985093965092949392505050565b6000806040838503121561243d57600080fd5b8235915061244d602084016122ed565b90509250929050565b6000806040838503121561246957600080fd5b50508035926020909101359150565b60005b8381101561249357818101518382015260200161247b565b50506000910152565b600081518084526124b4816020860160208601612478565b601f01601f19169290920160200192915050565b828152604060208201526000611547604083018461249c565b6000806000606084860312156124f657600080fd5b505081359360208301359350604090920135919050565b60006020828403121561251f57600080fd5b5035919050565b602081526000610dc3602083018461249c565b6000806000806060858703121561254f57600080fd5b843593506020850135925060408501356001600160401b0381111561257357600080fd5b61257f87828801612325565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156125b657600080fd5b833592506020840135915060408401356001600160401b03808211156125db57600080fd5b818601915086601f8301126125ef57600080fd5b8135818111156126015761260161258b565b604051601f8201601f19908116603f011681019083821181831017156126295761262961258b565b8160405282815289602084870101111561264257600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b6001600160a01b03811681146122d157600080fd5b8035801515811461230557600080fd5b6000806040838503121561269c57600080fd5b82356126a781612664565b915061244d60208401612679565b6000806000606084860312156126ca57600080fd5b8335925060208401356126dc81612664565b91506126ea60408501612679565b90509250925092565b60008060006060848603121561270857600080fd5b8335925060208401359150604084013561ffff8116811461272857600080fd5b809150509250925092565b60008060006060848603121561274857600080fd5b833561275381612664565b925060208401359150604084013561272881612664565b60008083601f84011261277c57600080fd5b5081356001600160401b0381111561279357600080fd5b6020830191508360208260051b8501011115610bdb57600080fd5b600080602083850312156127c157600080fd5b82356001600160401b038111156127d757600080fd5b6127e38582860161276a565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561284457603f1988860301845261283285835161249c565b94509285019290850190600101612816565b5092979650505050505050565b6000806040838503121561286457600080fd5b82359150602083013561287681612664565b809150509250929050565b60008060006040848603121561289657600080fd5b8335925060208401356001600160401b038111156128b357600080fd5b6123a48682870161276a565b6000806000606084860312156128d457600080fd5b833592506128e4602085016122ed565b9150604084013561272881612664565b6000806040838503121561290757600080fd5b823561291281612664565b9150602083013561287681612664565b60008251612934818460208701612478565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b818103818111156105805761058061293e565b8183823760009101908152919050565b600181811c9082168061298b57607f821691505b6020821081036129ab57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561153557600081815260208120601f850160051c810160208610156129d85750805b601f850160051c820191505b818110156129f7578281556001016129e4565b505050505050565b6001600160401b03831115612a1657612a1661258b565b612a2a83612a248354612977565b836129b1565b6000601f841160018114612a5e5760008515612a465750838201355b600019600387901b1c1916600186901b17835561118f565b600083815260209020601f19861690835b82811015612a8f5786850135825560209485019460019092019101612a6f565b5086821015612aac5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b604081526000612afb604083018688612abe565b8281036020840152612b0e818587612abe565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b602081526000611547602083018486612abe565b60006001600160401b03808316818103612b5f57612b5f61293e565b6001019392505050565b81516001600160401b03811115612b8257612b8261258b565b612b9681612b908454612977565b846129b1565b602080601f831160018114612bcb5760008415612bb35750858301515b600019600386901b1c1916600185901b1785556129f7565b600085815260208120601f198616915b82811015612bfa57888601518255948401946001909101908401612bdb565b5085821015612c185787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604081526000612c3b604083018661249c565b8281036020840152612c4e818587612abe565b9695505050505050565b600060208284031215612c6a57600080fd5b8151610dc381612664565b600061ffff821680612c8957612c8961293e565b6000190192915050565b604081526000612ca6604083018561249c565b905061ffff831660208301529392505050565b600061ffff808316818103612b5f57612b5f61293e565b606081526000612ce3606083018661249c565b61ffff851660208401528281036040840152612c4e818561249c565b808201808211156105805761058061293e565b6000808335601e19843603018112612d2957600080fd5b8301803591506001600160401b03821115612d4357600080fd5b602001915036819003821315610bdb57600080fd5b60008085851115612d6857600080fd5b83861115612d7557600080fd5b5050820193919092039150565b8035602083101561058057600019602084900360031b1b1692915050565b600060018201612db257612db261293e565b5060010190565b634e487b7160e01b600052600160045260246000fdfea26469706673582212207b039cd7281a0b9757c42758a6e3d5675c4ff95076dfe3250dcdc509ba2511d464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "ABI(bytes32,uint256)": {
        "params": {
          "contentTypes": "A bitwise OR of the ABI formats accepted by the caller.",
          "node": "The ENS node to query"
        },
        "returns": {
          "_0": "contentType The content type of the return value",
          "_1": "data The ABI data"
        }
      },
      "addr(bytes32)": {
        "params": {
          "node": "The ENS node to query."
        },
        "returns": {
          "_0": "The associated address."
        }
      },
      "approve(bytes32,address,bool)": {
        "details": "Approve a delegate to be able to updated records on a node."
      },
      "clearRecords(bytes32)": {
        "params": {
          "node": "The node to update."
        }
      },
      "contenthash(bytes32)": {
        "params": {
          "node": "The ENS node to query."
        },
        "returns": {
          "_0": "The associated contenthash."
        }
      },
      "dnsRecord(bytes32,bytes32,uint16)": {
        "params": {
          "name": "the keccak-256 hash of the fully-qualified name for which to fetch the record",
          "node": "the namehash of the node for which to fetch the record",
          "resource": "the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types"
        },
        "returns": {
          "_0": "the DNS record in wire format if present, otherwise empty"
        }
      },
      "hasDNSRecords(bytes32,bytes32)": {
        "params": {
          "name": "the namehash of the node for which to check the records",
          "node": "the namehash of the node for which to check the records"
        }
      },
      "interfaceImplementer(bytes32,bytes4)": {
        "params": {
          "interfaceID": "The EIP 165 interface ID to check for.",
          "node": "The ENS node to query."
        },
        "returns": {
          "_0": "The address that implements this interface, or 0 if the interface is unsupported."
        }
      },
      "isApprovedFor(address,bytes32,address)": {
        "details": "Check to see if the delegate has been approved by the owner for the node."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "name(bytes32)": {
        "params": {
          "node": "The ENS node to query."
        },
        "returns": {
          "_0": "The associated name."
        }
      },
      "pubkey(bytes32)": {
        "params": {
          "node": "The ENS node to query"
        },
        "returns": {
          "x": "The X coordinate of the curve point for the public key.",
          "y": "The Y coordinate of the curve point for the public key."
        }
      },
      "setABI(bytes32,uint256,bytes)": {
        "params": {
          "contentType": "The content type of the ABI",
          "data": "The ABI data.",
          "node": "The node to update."
        }
      },
      "setAddr(bytes32,address)": {
        "params": {
          "a": "The address to set.",
          "node": "The node to update."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setContenthash(bytes32,bytes)": {
        "params": {
          "hash": "The contenthash to set",
          "node": "The node to update."
        }
      },
      "setDNSRecords(bytes32,bytes)": {
        "params": {
          "data": "the DNS wire format records to set",
          "node": "the namehash of the node for which to set the records"
        }
      },
      "setInterface(bytes32,bytes4,address)": {
        "params": {
          "implementer": "The address of a contract that implements this interface for this node.",
          "interfaceID": "The EIP 165 interface ID.",
          "node": "The node to update."
        }
      },
      "setName(bytes32,string)": {
        "params": {
          "node": "The node to update."
        }
      },
      "setPubkey(bytes32,bytes32,bytes32)": {
        "params": {
          "node": "The ENS node to query",
          "x": "the X coordinate of the curve point for the public key.",
          "y": "the Y coordinate of the curve point for the public key."
        }
      },
      "setText(bytes32,string,string)": {
        "params": {
          "key": "The key to set.",
          "node": "The node to update.",
          "value": "The text data value to set."
        }
      },
      "setZonehash(bytes32,bytes)": {
        "params": {
          "hash": "The zonehash to set",
          "node": "The node to update."
        }
      },
      "text(bytes32,string)": {
        "params": {
          "key": "The text data key to query.",
          "node": "The ENS node to query."
        },
        "returns": {
          "_0": "The associated text data."
        }
      },
      "zonehash(bytes32)": {
        "params": {
          "node": "The ENS node to query."
        },
        "returns": {
          "_0": "The associated contenthash."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ABI(bytes32,uint256)": {
        "notice": "Returns the ABI associated with an ENS node. Defined in EIP205."
      },
      "addr(bytes32)": {
        "notice": "Returns the address associated with an ENS node."
      },
      "clearRecords(bytes32)": {
        "notice": "Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry."
      },
      "contenthash(bytes32)": {
        "notice": "Returns the contenthash associated with an ENS node."
      },
      "dnsRecord(bytes32,bytes32,uint16)": {
        "notice": "Obtain a DNS record."
      },
      "hasDNSRecords(bytes32,bytes32)": {
        "notice": "Check if a given node has records."
      },
      "interfaceImplementer(bytes32,bytes4)": {
        "notice": "Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP165 and returns `true` for the specified interfaceID, its address will be returned."
      },
      "name(bytes32)": {
        "notice": "Returns the name associated with an ENS node, for reverse records. Defined in EIP181."
      },
      "pubkey(bytes32)": {
        "notice": "Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619."
      },
      "setABI(bytes32,uint256,bytes)": {
        "notice": "Sets the ABI associated with an ENS node. Nodes may have one ABI of each content type. To remove an ABI, set it to the empty string."
      },
      "setAddr(bytes32,address)": {
        "notice": "Sets the address associated with an ENS node. May only be called by the owner of that node in the ENS registry."
      },
      "setContenthash(bytes32,bytes)": {
        "notice": "Sets the contenthash associated with an ENS node. May only be called by the owner of that node in the ENS registry."
      },
      "setDNSRecords(bytes32,bytes)": {
        "notice": "Set one or more DNS records.  Records are supplied in wire-format. Records with the same node/name/resource must be supplied one after the other to ensure the data is updated correctly. For example, if the data was supplied:     a.example.com IN A 1.2.3.4     a.example.com IN A 5.6.7.8     www.example.com IN CNAME a.example.com. then this would store the two A records for a.example.com correctly as a single RRSET, however if the data was supplied:     a.example.com IN A 1.2.3.4     www.example.com IN CNAME a.example.com.     a.example.com IN A 5.6.7.8 then this would store the first A record, the CNAME, then the second A record which would overwrite the first."
      },
      "setInterface(bytes32,bytes4,address)": {
        "notice": "Sets an interface associated with a name. Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support."
      },
      "setName(bytes32,string)": {
        "notice": "Sets the name associated with an ENS node, for reverse records. May only be called by the owner of that node in the ENS registry."
      },
      "setPubkey(bytes32,bytes32,bytes32)": {
        "notice": "Sets the SECP256k1 public key associated with an ENS node."
      },
      "setText(bytes32,string,string)": {
        "notice": "Sets the text data associated with an ENS node and key. May only be called by the owner of that node in the ENS registry."
      },
      "setZonehash(bytes32,bytes)": {
        "notice": "setZonehash sets the hash for the zone. May only be called by the owner of that node in the ENS registry."
      },
      "text(bytes32,string)": {
        "notice": "Returns the text data associated with an ENS node and key."
      },
      "zonehash(bytes32)": {
        "notice": "zonehash obtains the hash for the zone."
      }
    },
    "notice": "A simple resolver anyone can use; only allows the owner of a node to set its address.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15400,
        "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
        "label": "recordVersions",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_uint64)"
      },
      {
        "astId": 15494,
        "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
        "label": "versionable_abis",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage)))"
      },
      {
        "astId": 15648,
        "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
        "label": "versionable_addresses",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage)))"
      },
      {
        "astId": 15839,
        "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
        "label": "versionable_hashes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint64,t_mapping(t_bytes32,t_bytes_storage))"
      },
      {
        "astId": 15929,
        "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
        "label": "versionable_zonehashes",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint64,t_mapping(t_bytes32,t_bytes_storage))"
      },
      {
        "astId": 15939,
        "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
        "label": "versionable_records",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage))))"
      },
      {
        "astId": 15947,
        "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
        "label": "versionable_nameEntriesCount",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint16)))"
      },
      {
        "astId": 16685,
        "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
        "label": "versionable_interfaces",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_bytes4,t_address)))"
      },
      {
        "astId": 16877,
        "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
        "label": "versionable_names",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint64,t_mapping(t_bytes32,t_string_storage))"
      },
      {
        "astId": 16964,
        "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
        "label": "versionable_pubkeys",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint64,t_mapping(t_bytes32,t_struct(PublicKey)16957_storage))"
      },
      {
        "astId": 17067,
        "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
        "label": "versionable_texts",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage)))"
      },
      {
        "astId": 14929,
        "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 14938,
        "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_address,t_bool)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_address,t_bool)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => mapping(address => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      "t_mapping(t_bytes32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage)))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => mapping(uint16 => bytes)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage))"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint16))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => uint16))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint16)"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes4,t_address))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes4 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes4,t_address)"
      },
      "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(string => string))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_string_storage)"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint16 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_bytes_storage)"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bytes_storage)"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_bytes32,t_struct(PublicKey)16957_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct PubkeyResolver.PublicKey)",
        "numberOfBytes": "32",
        "value": "t_struct(PublicKey)16957_storage"
      },
      "t_mapping(t_bytes32,t_uint16)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_bytes32,t_uint64)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint64,t_mapping(t_bytes32,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => mapping(bytes32 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      "t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage))))": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => mapping(bytes32 => mapping(bytes32 => mapping(uint16 => bytes))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage)))"
      },
      "t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint16)))": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => mapping(bytes32 => mapping(bytes32 => uint16)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint16))"
      },
      "t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_bytes4,t_address)))": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => mapping(bytes32 => mapping(bytes4 => address)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_bytes4,t_address))"
      },
      "t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage)))": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => mapping(bytes32 => mapping(string => string)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage))"
      },
      "t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage)))": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))"
      },
      "t_mapping(t_uint64,t_mapping(t_bytes32,t_string_storage))": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => mapping(bytes32 => string))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_string_storage)"
      },
      "t_mapping(t_uint64,t_mapping(t_bytes32,t_struct(PublicKey)16957_storage))": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => mapping(bytes32 => struct PubkeyResolver.PublicKey))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(PublicKey)16957_storage)"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PublicKey)16957_storage": {
        "encoding": "inplace",
        "label": "struct PubkeyResolver.PublicKey",
        "members": [
          {
            "astId": 16954,
            "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
            "label": "x",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 16956,
            "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
            "label": "y",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}