{
  "address": "0xBe51d9472Cd57a745166Eb7D12F5Fc5D69D81299",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "_usdOracle",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_rentPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_startPremium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDays",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "name": "RentPriceChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startPremium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "elapsed",
          "type": "uint256"
        }
      ],
      "name": "decayedPremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "premium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "base",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "premium",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPriceOracle.Price",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price1Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price2Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price3Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price4Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price5Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdOracle",
      "outputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1bc40397638b05851cc866fc02f01f04289d2ec36a90a8f47333d5c30dc344d1",
  "receipt": {
    "to": null,
    "from": "0x245237D8cD588F0999c38331EBc97C337c007F2e",
    "contractAddress": "0xBe51d9472Cd57a745166Eb7D12F5Fc5D69D81299",
    "transactionIndex": 2,
    "gasUsed": "748888",
    "logsBloom": "0x
    "blockHash": "0x30e6f4d8ddce98121a213e56649d4c6c50a1be7f4b9fbec27cb0e8cda9752929",
    "transactionHash": "0x1bc40397638b05851cc866fc02f01f04289d2ec36a90a8f47333d5c30dc344d1",
    "logs": [],
    "blockNumber": 383122,
    "cumulativeGasUsed": "1004684",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x80998ee95720233f58F53e75f8C56da7500Cfe28",
    [
      0,
      0,
      "20294266869609",
      "5073566717402",
      "158548959919"
    ],
    "100000000000000000000000000",
    21
  ],
  "numDeployments": 3,
  "solcInputHash": "2c0eb307c5c04aca158dc0df5329149a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"_usdOracle\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_rentPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_startPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDays\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"RentPriceChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"elapsed\",\"type\":\"uint256\"}],\"name\":\"decayedPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"premium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"internalType\":\"struct IPriceOracle.Price\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price2Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price3Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price4Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price5Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdOracle\",\"outputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"decayedPremium(uint256,uint256)\":{\"details\":\"Returns the premium price at current time elapsed\",\"params\":{\"elapsed\":\"time past since expiry\",\"startPremium\":\"starting price\"}},\"premium(string,uint256,uint256)\":{\"details\":\"Returns the pricing premium in wei.\"},\"price(string,uint256,uint256)\":{\"details\":\"Returns the price to register or renew a name.\",\"params\":{\"duration\":\"How long the name is being registered or extended for, in seconds.\",\"expires\":\"When the name presently expires (0 if this is a new registration).\",\"name\":\"The name being registered or renewed.\"},\"returns\":{\"_0\":\"base premium tuple of base price + premium price\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/ExponentialPremiumPriceOracle.sol\":\"ExponentialPremiumPriceOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/ethregistrar/ExponentialPremiumPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"./StablePriceOracle.sol\\\";\\n\\ncontract ExponentialPremiumPriceOracle is StablePriceOracle {\\n    uint256 constant GRACE_PERIOD = 90 days;\\n    uint256 immutable startPremium;\\n    uint256 immutable endValue;\\n\\n    constructor(\\n        AggregatorInterface _usdOracle,\\n        uint256[] memory _rentPrices,\\n        uint256 _startPremium,\\n        uint256 totalDays\\n    ) StablePriceOracle(_usdOracle, _rentPrices) {\\n        startPremium = _startPremium;\\n        endValue = _startPremium >> totalDays;\\n    }\\n\\n    uint256 constant PRECISION = 1e18;\\n    uint256 constant bit1 = 999989423469314432; // 0.5 ^ 1/65536 * (10 ** 18)\\n    uint256 constant bit2 = 999978847050491904; // 0.5 ^ 2/65536 * (10 ** 18)\\n    uint256 constant bit3 = 999957694548431104;\\n    uint256 constant bit4 = 999915390886613504;\\n    uint256 constant bit5 = 999830788931929088;\\n    uint256 constant bit6 = 999661606496243712;\\n    uint256 constant bit7 = 999323327502650752;\\n    uint256 constant bit8 = 998647112890970240;\\n    uint256 constant bit9 = 997296056085470080;\\n    uint256 constant bit10 = 994599423483633152;\\n    uint256 constant bit11 = 989228013193975424;\\n    uint256 constant bit12 = 978572062087700096;\\n    uint256 constant bit13 = 957603280698573696;\\n    uint256 constant bit14 = 917004043204671232;\\n    uint256 constant bit15 = 840896415253714560;\\n    uint256 constant bit16 = 707106781186547584;\\n\\n    /**\\n     * @dev Returns the pricing premium in internal base units.\\n     */\\n    function _premium(\\n        string memory,\\n        uint256 expires,\\n        uint256\\n    ) internal view override returns (uint256) {\\n        expires = expires + GRACE_PERIOD;\\n        if (expires > block.timestamp) {\\n            return 0;\\n        }\\n\\n        uint256 elapsed = block.timestamp - expires;\\n        uint256 premium = decayedPremium(startPremium, elapsed);\\n        if (premium >= endValue) {\\n            return premium - endValue;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the premium price at current time elapsed\\n     * @param startPremium starting price\\n     * @param elapsed time past since expiry\\n     */\\n    function decayedPremium(\\n        uint256 startPremium,\\n        uint256 elapsed\\n    ) public pure returns (uint256) {\\n        uint256 daysPast = (elapsed * PRECISION) / 1 days;\\n        uint256 intDays = daysPast / PRECISION;\\n        uint256 premium = startPremium >> intDays;\\n        uint256 partDay = (daysPast - intDays * PRECISION);\\n        uint256 fraction = (partDay * (2 ** 16)) / PRECISION;\\n        uint256 totalPremium = addFractionalPremium(fraction, premium);\\n        return totalPremium;\\n    }\\n\\n    function addFractionalPremium(\\n        uint256 fraction,\\n        uint256 premium\\n    ) internal pure returns (uint256) {\\n        if (fraction & (1 << 0) != 0) {\\n            premium = (premium * bit1) / PRECISION;\\n        }\\n        if (fraction & (1 << 1) != 0) {\\n            premium = (premium * bit2) / PRECISION;\\n        }\\n        if (fraction & (1 << 2) != 0) {\\n            premium = (premium * bit3) / PRECISION;\\n        }\\n        if (fraction & (1 << 3) != 0) {\\n            premium = (premium * bit4) / PRECISION;\\n        }\\n        if (fraction & (1 << 4) != 0) {\\n            premium = (premium * bit5) / PRECISION;\\n        }\\n        if (fraction & (1 << 5) != 0) {\\n            premium = (premium * bit6) / PRECISION;\\n        }\\n        if (fraction & (1 << 6) != 0) {\\n            premium = (premium * bit7) / PRECISION;\\n        }\\n        if (fraction & (1 << 7) != 0) {\\n            premium = (premium * bit8) / PRECISION;\\n        }\\n        if (fraction & (1 << 8) != 0) {\\n            premium = (premium * bit9) / PRECISION;\\n        }\\n        if (fraction & (1 << 9) != 0) {\\n            premium = (premium * bit10) / PRECISION;\\n        }\\n        if (fraction & (1 << 10) != 0) {\\n            premium = (premium * bit11) / PRECISION;\\n        }\\n        if (fraction & (1 << 11) != 0) {\\n            premium = (premium * bit12) / PRECISION;\\n        }\\n        if (fraction & (1 << 12) != 0) {\\n            premium = (premium * bit13) / PRECISION;\\n        }\\n        if (fraction & (1 << 13) != 0) {\\n            premium = (premium * bit14) / PRECISION;\\n        }\\n        if (fraction & (1 << 14) != 0) {\\n            premium = (premium * bit15) / PRECISION;\\n        }\\n        if (fraction & (1 << 15) != 0) {\\n            premium = (premium * bit16) / PRECISION;\\n        }\\n        return premium;\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x09149a39e7660d65873e5160971cf0904630b266cbec4f02721dad0aad28320b\",\"license\":\"MIT\"},\"contracts/ethregistrar/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\ninterface IPriceOracle {\\n    struct Price {\\n        uint256 base;\\n        uint256 premium;\\n    }\\n\\n    /**\\n     * @dev Returns the price to register or renew a name.\\n     * @param name The name being registered or renewed.\\n     * @param expires When the name presently expires (0 if this is a new registration).\\n     * @param duration How long the name is being registered or extended for, in seconds.\\n     * @return base premium tuple of base price + premium price\\n     */\\n    function price(\\n        string calldata name,\\n        uint256 expires,\\n        uint256 duration\\n    ) external view returns (Price calldata);\\n}\\n\",\"keccak256\":\"0x1ec537b4c7f9cc40363b39dcc7ade8c29bf94662e6b01d38e681487637bd577e\",\"license\":\"MIT\"},\"contracts/ethregistrar/StablePriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"./IPriceOracle.sol\\\";\\nimport \\\"./StringUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface AggregatorInterface {\\n    function latestAnswer() external view returns (int256);\\n}\\n\\n// StablePriceOracle sets a price in USD, based on an oracle.\\ncontract StablePriceOracle is IPriceOracle {\\n    using StringUtils for *;\\n\\n    // Rent in base price units by length\\n    uint256 public immutable price1Letter;\\n    uint256 public immutable price2Letter;\\n    uint256 public immutable price3Letter;\\n    uint256 public immutable price4Letter;\\n    uint256 public immutable price5Letter;\\n\\n    // Oracle address\\n    AggregatorInterface public immutable usdOracle;\\n\\n    event RentPriceChanged(uint256[] prices);\\n\\n    constructor(AggregatorInterface _usdOracle, uint256[] memory _rentPrices) {\\n        usdOracle = _usdOracle;\\n        price1Letter = _rentPrices[0];\\n        price2Letter = _rentPrices[1];\\n        price3Letter = _rentPrices[2];\\n        price4Letter = _rentPrices[3];\\n        price5Letter = _rentPrices[4];\\n    }\\n\\n    function price(\\n        string calldata name,\\n        uint256 expires,\\n        uint256 duration\\n    ) external view override returns (IPriceOracle.Price memory) {\\n        uint256 len = name.strlen();\\n        uint256 basePrice;\\n\\n        if (len >= 5) {\\n            basePrice = price5Letter * duration;\\n        } else if (len == 4) {\\n            basePrice = price4Letter * duration;\\n        } else if (len == 3) {\\n            basePrice = price3Letter * duration;\\n        } else if (len == 2) {\\n            basePrice = price2Letter * duration;\\n        } else {\\n            basePrice = price1Letter * duration;\\n        }\\n\\n        return\\n            IPriceOracle.Price({\\n                base: attoUSDToWei(basePrice),\\n                premium: attoUSDToWei(_premium(name, expires, duration))\\n            });\\n    }\\n\\n    /**\\n     * @dev Returns the pricing premium in wei.\\n     */\\n    function premium(\\n        string calldata name,\\n        uint256 expires,\\n        uint256 duration\\n    ) external view returns (uint256) {\\n        return attoUSDToWei(_premium(name, expires, duration));\\n    }\\n\\n    /**\\n     * @dev Returns the pricing premium in internal base units.\\n     */\\n    function _premium(\\n        string memory name,\\n        uint256 expires,\\n        uint256 duration\\n    ) internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    function attoUSDToWei(uint256 amount) internal view returns (uint256) {\\n        uint256 ethPrice = uint256(usdOracle.latestAnswer());\\n        return (amount * 1e8) / ethPrice;\\n    }\\n\\n    function weiToAttoUSD(uint256 amount) internal view returns (uint256) {\\n        uint256 ethPrice = uint256(usdOracle.latestAnswer());\\n        return (amount * ethPrice) / 1e8;\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual returns (bool) {\\n        return\\n            interfaceID == type(IERC165).interfaceId ||\\n            interfaceID == type(IPriceOracle).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x23a3d1eb3021080f20eb5f6af941b2d29a5d252a0a6119ba74f595da9c1ae1d6\",\"license\":\"MIT\"},\"contracts/ethregistrar/StringUtils.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nlibrary StringUtils {\\n    /**\\n     * @dev Returns the length of a given string\\n     *\\n     * @param s The string to measure the length of\\n     * @return The length of the input string\\n     */\\n    function strlen(string memory s) internal pure returns (uint256) {\\n        uint256 len;\\n        uint256 i = 0;\\n        uint256 bytelength = bytes(s).length;\\n        for (len = 0; i < bytelength; len++) {\\n            bytes1 b = bytes(s)[i];\\n            if (b < 0x80) {\\n                i += 1;\\n            } else if (b < 0xE0) {\\n                i += 2;\\n            } else if (b < 0xF0) {\\n                i += 3;\\n            } else if (b < 0xF8) {\\n                i += 4;\\n            } else if (b < 0xFC) {\\n                i += 5;\\n            } else {\\n                i += 6;\\n            }\\n        }\\n        return len;\\n    }\\n}\\n\",\"keccak256\":\"0x4cc8363a850dc9130c433ee50e7c97e29a45ae5d9bd0808205ac7134b34f24e4\"}},\"version\":1}",
  "bytecode": "0x6101806040523480156200001257600080fd5b5060405162000f4638038062000f4683398101604081905262000035916200012c565b6001600160a01b0384166101205282518490849081906000906200005d576200005d62000227565b6020026020010151608081815250508060018151811062000082576200008262000227565b602002602001015160a0818152505080600281518110620000a757620000a762000227565b602002602001015160c0818152505080600381518110620000cc57620000cc62000227565b602002602001015160e0818152505080600481518110620000f157620000f162000227565b60209081029190910101516101005250506101408290521c61016052506200023d9050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156200014357600080fd5b84516001600160a01b03811681146200015b57600080fd5b602086810151919550906001600160401b03808211156200017b57600080fd5b818801915088601f8301126200019057600080fd5b815181811115620001a557620001a562000116565b8060051b604051601f19603f83011681018181108582111715620001cd57620001cd62000116565b60405291825284820192508381018501918b831115620001ec57600080fd5b938501935b828510156200020c57845184529385019392850192620001f1565b60408b01516060909b0151999c909b50975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60805160a05160c05160e05161010051610120516101405161016051610c73620002d360003960008181610731015261075b015260006107080152600081816101a7015261063001526000818161013301526102a701526000818161020d01526102e001526000818161016d01526103120152600081816101e6015261034401526000818160d0015261036e0152610c736000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a200e15311610066578063a200e15314610168578063a34e35961461018f578063c8a4271f146101a2578063cd5d2c74146101e1578063d820ed421461020857600080fd5b806301ffc9a7146100a35780632c0fd74c146100cb57806350e9a7151461010057806359b6b86c1461012e57806359e1777c14610155575b600080fd5b6100b66100b1366004610ab5565b61022f565b60405190151581526020015b60405180910390f35b6100f27f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100c2565b61011361010e366004610adf565b610240565b604080518251815260209283015192810192909252016100c2565b6100f27f000000000000000000000000000000000000000000000000000000000000000081565b6100f2610163366004610b5e565b610406565b6100f27f000000000000000000000000000000000000000000000000000000000000000081565b6100f261019d366004610adf565b6104a1565b6101c97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c2565b6100f27f000000000000000000000000000000000000000000000000000000000000000081565b6100f27f000000000000000000000000000000000000000000000000000000000000000081565b600061023a826104f2565b92915050565b6040805180820190915260008082526020820152600061029586868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061052892505050565b90506000600582106102d2576102cb847f0000000000000000000000000000000000000000000000000000000000000000610b96565b9050610395565b81600403610304576102cb847f0000000000000000000000000000000000000000000000000000000000000000610b96565b81600303610336576102cb847f0000000000000000000000000000000000000000000000000000000000000000610b96565b81600203610368576102cb847f0000000000000000000000000000000000000000000000000000000000000000610b96565b610392847f0000000000000000000000000000000000000000000000000000000000000000610b96565b90505b60405180604001604052806103a98361062b565b81526020016103f96103f48a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508b91506106d29050565b61062b565b9052979650505050505050565b6000806201518061041f670de0b6b3a764000085610b96565b6104299190610bad565b9050600061043f670de0b6b3a764000083610bad565b905084811c6000610458670de0b6b3a764000084610b96565b6104629085610bcf565b90506000670de0b6b3a764000061047c8362010000610b96565b6104869190610bad565b905060006104948285610795565b9998505050505050505050565b60006104e96103f486868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508791506106d29050565b95945050505050565b60006001600160e01b031982166301ffc9a760e01b148061023a57506001600160e01b031982166350e9a71560e01b1492915050565b8051600090819081905b8082101561062257600085838151811061054e5761054e610be2565b01602001516001600160f81b0319169050600160ff1b81101561057d57610576600184610bf8565b925061060f565b600760fd1b6001600160f81b03198216101561059e57610576600284610bf8565b600f60fc1b6001600160f81b0319821610156105bf57610576600384610bf8565b601f60fb1b6001600160f81b0319821610156105e057610576600484610bf8565b603f60fa1b6001600160f81b03198216101561060157610576600584610bf8565b61060c600684610bf8565b92505b508261061a81610c0b565b935050610532565b50909392505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561068c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b09190610c24565b9050806106c1846305f5e100610b96565b6106cb9190610bad565b9392505050565b60006106e16276a70084610bf8565b9250428311156106f3575060006106cb565b60006106ff8442610bcf565b9050600061072d7f000000000000000000000000000000000000000000000000000000000000000083610406565b90507f00000000000000000000000000000000000000000000000000000000000000008110610789576107807f000000000000000000000000000000000000000000000000000000000000000082610bcf565b925050506106cb565b50600095945050505050565b600060018316156107c857670de0b6b3a76400006107bb670de0ad151d09418084610b96565b6107c59190610bad565b91505b60028316156107f957670de0b6b3a76400006107ec670de0a3769959680084610b96565b6107f69190610bad565b91505b600483161561082a57670de0b6b3a764000061081d670de09039a5fa510084610b96565b6108279190610bad565b91505b600883161561085b57670de0b6b3a764000061084e670de069c00f3e120084610b96565b6108589190610bad565b91505b601083161561088c57670de0b6b3a764000061087f670de01cce21c9440084610b96565b6108899190610bad565b91505b60208316156108bd57670de0b6b3a76400006108b0670ddf82ef46ce100084610b96565b6108ba9190610bad565b91505b60408316156108ee57670de0b6b3a76400006108e1670dde4f458f8e8d8084610b96565b6108eb9190610bad565b91505b608083161561091f57670de0b6b3a7640000610912670ddbe84213d5f08084610b96565b61091c9190610bad565b91505b61010083161561095157670de0b6b3a7640000610944670dd71b7aa6df5b8084610b96565b61094e9190610bad565b91505b61020083161561098357670de0b6b3a7640000610976670dcd86e7f28cde0084610b96565b6109809190610bad565b91505b6104008316156109b557670de0b6b3a76400006109a8670dba71a3084ad68084610b96565b6109b29190610bad565b91505b6108008316156109e757670de0b6b3a76400006109da670d94961b13dbde8084610b96565b6109e49190610bad565b91505b611000831615610a1957670de0b6b3a7640000610a0c670d4a171c35c9838084610b96565b610a169190610bad565b91505b612000831615610a4b57670de0b6b3a7640000610a3e670cb9da519ccfb70084610b96565b610a489190610bad565b91505b614000831615610a7d57670de0b6b3a7640000610a70670bab76d59c18d68084610b96565b610a7a9190610bad565b91505b618000831615610aaf57670de0b6b3a7640000610aa26709d025defee4df8084610b96565b610aac9190610bad565b91505b50919050565b600060208284031215610ac757600080fd5b81356001600160e01b0319811681146106cb57600080fd5b60008060008060608587031215610af557600080fd5b843567ffffffffffffffff80821115610b0d57600080fd5b818701915087601f830112610b2157600080fd5b813581811115610b3057600080fd5b886020828501011115610b4257600080fd5b6020928301999098509187013596604001359550909350505050565b60008060408385031215610b7157600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761023a5761023a610b80565b600082610bca57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561023a5761023a610b80565b634e487b7160e01b600052603260045260246000fd5b8082018082111561023a5761023a610b80565b600060018201610c1d57610c1d610b80565b5060010190565b600060208284031215610c3657600080fd5b505191905056fea26469706673582212201300a8ba1039b69cd5b18f11083d909782d98eeed55816b4225291d1e69c817964736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a200e15311610066578063a200e15314610168578063a34e35961461018f578063c8a4271f146101a2578063cd5d2c74146101e1578063d820ed421461020857600080fd5b806301ffc9a7146100a35780632c0fd74c146100cb57806350e9a7151461010057806359b6b86c1461012e57806359e1777c14610155575b600080fd5b6100b66100b1366004610ab5565b61022f565b60405190151581526020015b60405180910390f35b6100f27f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100c2565b61011361010e366004610adf565b610240565b604080518251815260209283015192810192909252016100c2565b6100f27f000000000000000000000000000000000000000000000000000000000000000081565b6100f2610163366004610b5e565b610406565b6100f27f000000000000000000000000000000000000000000000000000000000000000081565b6100f261019d366004610adf565b6104a1565b6101c97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c2565b6100f27f000000000000000000000000000000000000000000000000000000000000000081565b6100f27f000000000000000000000000000000000000000000000000000000000000000081565b600061023a826104f2565b92915050565b6040805180820190915260008082526020820152600061029586868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061052892505050565b90506000600582106102d2576102cb847f0000000000000000000000000000000000000000000000000000000000000000610b96565b9050610395565b81600403610304576102cb847f0000000000000000000000000000000000000000000000000000000000000000610b96565b81600303610336576102cb847f0000000000000000000000000000000000000000000000000000000000000000610b96565b81600203610368576102cb847f0000000000000000000000000000000000000000000000000000000000000000610b96565b610392847f0000000000000000000000000000000000000000000000000000000000000000610b96565b90505b60405180604001604052806103a98361062b565b81526020016103f96103f48a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508b91506106d29050565b61062b565b9052979650505050505050565b6000806201518061041f670de0b6b3a764000085610b96565b6104299190610bad565b9050600061043f670de0b6b3a764000083610bad565b905084811c6000610458670de0b6b3a764000084610b96565b6104629085610bcf565b90506000670de0b6b3a764000061047c8362010000610b96565b6104869190610bad565b905060006104948285610795565b9998505050505050505050565b60006104e96103f486868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508791506106d29050565b95945050505050565b60006001600160e01b031982166301ffc9a760e01b148061023a57506001600160e01b031982166350e9a71560e01b1492915050565b8051600090819081905b8082101561062257600085838151811061054e5761054e610be2565b01602001516001600160f81b0319169050600160ff1b81101561057d57610576600184610bf8565b925061060f565b600760fd1b6001600160f81b03198216101561059e57610576600284610bf8565b600f60fc1b6001600160f81b0319821610156105bf57610576600384610bf8565b601f60fb1b6001600160f81b0319821610156105e057610576600484610bf8565b603f60fa1b6001600160f81b03198216101561060157610576600584610bf8565b61060c600684610bf8565b92505b508261061a81610c0b565b935050610532565b50909392505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561068c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b09190610c24565b9050806106c1846305f5e100610b96565b6106cb9190610bad565b9392505050565b60006106e16276a70084610bf8565b9250428311156106f3575060006106cb565b60006106ff8442610bcf565b9050600061072d7f000000000000000000000000000000000000000000000000000000000000000083610406565b90507f00000000000000000000000000000000000000000000000000000000000000008110610789576107807f000000000000000000000000000000000000000000000000000000000000000082610bcf565b925050506106cb565b50600095945050505050565b600060018316156107c857670de0b6b3a76400006107bb670de0ad151d09418084610b96565b6107c59190610bad565b91505b60028316156107f957670de0b6b3a76400006107ec670de0a3769959680084610b96565b6107f69190610bad565b91505b600483161561082a57670de0b6b3a764000061081d670de09039a5fa510084610b96565b6108279190610bad565b91505b600883161561085b57670de0b6b3a764000061084e670de069c00f3e120084610b96565b6108589190610bad565b91505b601083161561088c57670de0b6b3a764000061087f670de01cce21c9440084610b96565b6108899190610bad565b91505b60208316156108bd57670de0b6b3a76400006108b0670ddf82ef46ce100084610b96565b6108ba9190610bad565b91505b60408316156108ee57670de0b6b3a76400006108e1670dde4f458f8e8d8084610b96565b6108eb9190610bad565b91505b608083161561091f57670de0b6b3a7640000610912670ddbe84213d5f08084610b96565b61091c9190610bad565b91505b61010083161561095157670de0b6b3a7640000610944670dd71b7aa6df5b8084610b96565b61094e9190610bad565b91505b61020083161561098357670de0b6b3a7640000610976670dcd86e7f28cde0084610b96565b6109809190610bad565b91505b6104008316156109b557670de0b6b3a76400006109a8670dba71a3084ad68084610b96565b6109b29190610bad565b91505b6108008316156109e757670de0b6b3a76400006109da670d94961b13dbde8084610b96565b6109e49190610bad565b91505b611000831615610a1957670de0b6b3a7640000610a0c670d4a171c35c9838084610b96565b610a169190610bad565b91505b612000831615610a4b57670de0b6b3a7640000610a3e670cb9da519ccfb70084610b96565b610a489190610bad565b91505b614000831615610a7d57670de0b6b3a7640000610a70670bab76d59c18d68084610b96565b610a7a9190610bad565b91505b618000831615610aaf57670de0b6b3a7640000610aa26709d025defee4df8084610b96565b610aac9190610bad565b91505b50919050565b600060208284031215610ac757600080fd5b81356001600160e01b0319811681146106cb57600080fd5b60008060008060608587031215610af557600080fd5b843567ffffffffffffffff80821115610b0d57600080fd5b818701915087601f830112610b2157600080fd5b813581811115610b3057600080fd5b886020828501011115610b4257600080fd5b6020928301999098509187013596604001359550909350505050565b60008060408385031215610b7157600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761023a5761023a610b80565b600082610bca57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561023a5761023a610b80565b634e487b7160e01b600052603260045260246000fd5b8082018082111561023a5761023a610b80565b600060018201610c1d57610c1d610b80565b5060010190565b600060208284031215610c3657600080fd5b505191905056fea26469706673582212201300a8ba1039b69cd5b18f11083d909782d98eeed55816b4225291d1e69c817964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "decayedPremium(uint256,uint256)": {
        "details": "Returns the premium price at current time elapsed",
        "params": {
          "elapsed": "time past since expiry",
          "startPremium": "starting price"
        }
      },
      "premium(string,uint256,uint256)": {
        "details": "Returns the pricing premium in wei."
      },
      "price(string,uint256,uint256)": {
        "details": "Returns the price to register or renew a name.",
        "params": {
          "duration": "How long the name is being registered or extended for, in seconds.",
          "expires": "When the name presently expires (0 if this is a new registration).",
          "name": "The name being registered or renewed."
        },
        "returns": {
          "_0": "base premium tuple of base price + premium price"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}